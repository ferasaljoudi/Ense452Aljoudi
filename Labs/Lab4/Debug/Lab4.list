
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c84  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08002d90  08002d90  00003d90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031ac  080031ac  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080031ac  080031ac  000041ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031b4  080031b4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031b4  080031b4  000041b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031b8  080031b8  000041b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080031bc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bc8  20000068  08003224  00005068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c30  08003224  00005c30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec1a  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002393  00000000  00000000  00013cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00006146  00000000  00000000  0001603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  0001c188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e5  00000000  00000000  0001cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018840  00000000  00000000  0001d615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010622  00000000  00000000  00035e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bdde  00000000  00000000  00046477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d2255  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000264c  00000000  00000000  000d2298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000d48e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d78 	.word	0x08002d78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002d78 	.word	0x08002d78

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_ldivmod>:
 8000170:	b97b      	cbnz	r3, 8000192 <__aeabi_ldivmod+0x22>
 8000172:	b972      	cbnz	r2, 8000192 <__aeabi_ldivmod+0x22>
 8000174:	2900      	cmp	r1, #0
 8000176:	bfbe      	ittt	lt
 8000178:	2000      	movlt	r0, #0
 800017a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800017e:	e006      	blt.n	800018e <__aeabi_ldivmod+0x1e>
 8000180:	bf08      	it	eq
 8000182:	2800      	cmpeq	r0, #0
 8000184:	bf1c      	itt	ne
 8000186:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800018a:	f04f 30ff 	movne.w	r0, #4294967295
 800018e:	f000 b99b 	b.w	80004c8 <__aeabi_idiv0>
 8000192:	f1ad 0c08 	sub.w	ip, sp, #8
 8000196:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019a:	2900      	cmp	r1, #0
 800019c:	db09      	blt.n	80001b2 <__aeabi_ldivmod+0x42>
 800019e:	2b00      	cmp	r3, #0
 80001a0:	db1a      	blt.n	80001d8 <__aeabi_ldivmod+0x68>
 80001a2:	f000 f835 	bl	8000210 <__udivmoddi4>
 80001a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ae:	b004      	add	sp, #16
 80001b0:	4770      	bx	lr
 80001b2:	4240      	negs	r0, r0
 80001b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db1b      	blt.n	80001f4 <__aeabi_ldivmod+0x84>
 80001bc:	f000 f828 	bl	8000210 <__udivmoddi4>
 80001c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c8:	b004      	add	sp, #16
 80001ca:	4240      	negs	r0, r0
 80001cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d0:	4252      	negs	r2, r2
 80001d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001d6:	4770      	bx	lr
 80001d8:	4252      	negs	r2, r2
 80001da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001de:	f000 f817 	bl	8000210 <__udivmoddi4>
 80001e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ea:	b004      	add	sp, #16
 80001ec:	4240      	negs	r0, r0
 80001ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f2:	4770      	bx	lr
 80001f4:	4252      	negs	r2, r2
 80001f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001fa:	f000 f809 	bl	8000210 <__udivmoddi4>
 80001fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000206:	b004      	add	sp, #16
 8000208:	4252      	negs	r2, r2
 800020a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fbb1 f4f7 	udiv	r4, r1, r7
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8110 	bcs.w	800048a <__udivmoddi4+0x27a>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810d 	bls.w	800048a <__udivmoddi4+0x27a>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fbb1 f0f7 	udiv	r0, r1, r7
 800027a:	fb07 1110 	mls	r1, r7, r0, r1
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fa 	bcs.w	800048e <__udivmoddi4+0x27e>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f7 	bls.w	800048e <__udivmoddi4+0x27e>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	2100      	movs	r1, #0
 80002a6:	1b9b      	subs	r3, r3, r6
 80002a8:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80ee 	bcc.w	80004b8 <__udivmoddi4+0x2a8>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 808f 	bne.w	8000412 <__udivmoddi4+0x202>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fe:	fa1f f78c 	uxth.w	r7, ip
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	fb08 4416 	mls	r4, r8, r6, r4
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000332:	fb08 4410 	mls	r4, r8, r0, r4
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80ae 	bhi.w	80004b2 <__udivmoddi4+0x2a2>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa24 f607 	lsr.w	r6, r4, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fbb6 f8f9 	udiv	r8, r6, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 6618 	mls	r6, r9, r8, r6
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	408c      	lsls	r4, r1
 8000388:	fa00 fa01 	lsl.w	sl, r0, r1
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	431c      	orrs	r4, r3
 8000392:	0c23      	lsrs	r3, r4, #16
 8000394:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000398:	4298      	cmp	r0, r3
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	eb1c 0303 	adds.w	r3, ip, r3
 80003a4:	f108 36ff 	add.w	r6, r8, #4294967295
 80003a8:	f080 8081 	bcs.w	80004ae <__udivmoddi4+0x29e>
 80003ac:	4298      	cmp	r0, r3
 80003ae:	d97e      	bls.n	80004ae <__udivmoddi4+0x29e>
 80003b0:	f1a8 0802 	sub.w	r8, r8, #2
 80003b4:	4463      	add	r3, ip
 80003b6:	1a1e      	subs	r6, r3, r0
 80003b8:	fbb6 f3f9 	udiv	r3, r6, r9
 80003bc:	fb09 6613 	mls	r6, r9, r3, r6
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	b2a4      	uxth	r4, r4
 80003c6:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x1d0>
 80003ce:	eb1c 0404 	adds.w	r4, ip, r4
 80003d2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d6:	d266      	bcs.n	80004a6 <__udivmoddi4+0x296>
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d964      	bls.n	80004a6 <__udivmoddi4+0x296>
 80003dc:	3b02      	subs	r3, #2
 80003de:	4464      	add	r4, ip
 80003e0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003e4:	fba0 8302 	umull	r8, r3, r0, r2
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	429c      	cmp	r4, r3
 80003ee:	46c6      	mov	lr, r8
 80003f0:	461e      	mov	r6, r3
 80003f2:	d350      	bcc.n	8000496 <__udivmoddi4+0x286>
 80003f4:	d04d      	beq.n	8000492 <__udivmoddi4+0x282>
 80003f6:	b155      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f8:	ebba 030e 	subs.w	r3, sl, lr
 80003fc:	eb64 0406 	sbc.w	r4, r4, r6
 8000400:	fa04 f707 	lsl.w	r7, r4, r7
 8000404:	40cb      	lsrs	r3, r1
 8000406:	431f      	orrs	r7, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 7400 	strd	r7, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e751      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000412:	fa0c fc02 	lsl.w	ip, ip, r2
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d9      	lsrs	r1, r3
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa20 f303 	lsr.w	r3, r0, r3
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fbb1 f0f8 	udiv	r0, r1, r8
 800042c:	fb08 1110 	mls	r1, r8, r0, r1
 8000430:	4094      	lsls	r4, r2
 8000432:	431c      	orrs	r4, r3
 8000434:	fa1f f78c 	uxth.w	r7, ip
 8000438:	0c23      	lsrs	r3, r4, #16
 800043a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043e:	fb00 f107 	mul.w	r1, r0, r7
 8000442:	4299      	cmp	r1, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x248>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 36ff 	add.w	r6, r0, #4294967295
 800044e:	d22c      	bcs.n	80004aa <__udivmoddi4+0x29a>
 8000450:	4299      	cmp	r1, r3
 8000452:	d92a      	bls.n	80004aa <__udivmoddi4+0x29a>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1a5b      	subs	r3, r3, r1
 800045a:	fbb3 f1f8 	udiv	r1, r3, r8
 800045e:	fb08 3311 	mls	r3, r8, r1, r3
 8000462:	b2a4      	uxth	r4, r4
 8000464:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000468:	fb01 f307 	mul.w	r3, r1, r7
 800046c:	42a3      	cmp	r3, r4
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x272>
 8000470:	eb1c 0404 	adds.w	r4, ip, r4
 8000474:	f101 36ff 	add.w	r6, r1, #4294967295
 8000478:	d213      	bcs.n	80004a2 <__udivmoddi4+0x292>
 800047a:	42a3      	cmp	r3, r4
 800047c:	d911      	bls.n	80004a2 <__udivmoddi4+0x292>
 800047e:	3902      	subs	r1, #2
 8000480:	4464      	add	r4, ip
 8000482:	1ae4      	subs	r4, r4, r3
 8000484:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xf2>
 800048a:	4604      	mov	r4, r0
 800048c:	e6f2      	b.n	8000274 <__udivmoddi4+0x64>
 800048e:	4608      	mov	r0, r1
 8000490:	e708      	b.n	80002a4 <__udivmoddi4+0x94>
 8000492:	45c2      	cmp	sl, r8
 8000494:	d2af      	bcs.n	80003f6 <__udivmoddi4+0x1e6>
 8000496:	ebb8 0e02 	subs.w	lr, r8, r2
 800049a:	eb63 060c 	sbc.w	r6, r3, ip
 800049e:	3801      	subs	r0, #1
 80004a0:	e7a9      	b.n	80003f6 <__udivmoddi4+0x1e6>
 80004a2:	4631      	mov	r1, r6
 80004a4:	e7ed      	b.n	8000482 <__udivmoddi4+0x272>
 80004a6:	4603      	mov	r3, r0
 80004a8:	e79a      	b.n	80003e0 <__udivmoddi4+0x1d0>
 80004aa:	4630      	mov	r0, r6
 80004ac:	e7d4      	b.n	8000458 <__udivmoddi4+0x248>
 80004ae:	46b0      	mov	r8, r6
 80004b0:	e781      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b2:	4463      	add	r3, ip
 80004b4:	3802      	subs	r0, #2
 80004b6:	e74f      	b.n	8000358 <__udivmoddi4+0x148>
 80004b8:	4606      	mov	r6, r0
 80004ba:	4623      	mov	r3, r4
 80004bc:	4608      	mov	r0, r1
 80004be:	e711      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c0:	3e02      	subs	r6, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x11c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <cli_print>:
int buffer_index = 0;
extern UART_HandleTypeDef huart2;

// Function to print a message over UART
void cli_print(const char *message)
{
 80004cc:	b510      	push	{r4, lr}
 80004ce:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80004d0:	f7ff fe46 	bl	8000160 <strlen>
 80004d4:	4621      	mov	r1, r4
}
 80004d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80004da:	b282      	uxth	r2, r0
 80004dc:	f04f 33ff 	mov.w	r3, #4294967295
 80004e0:	4801      	ldr	r0, [pc, #4]	@ (80004e8 <cli_print+0x1c>)
 80004e2:	f001 b9e6 	b.w	80018b2 <HAL_UART_Transmit>
 80004e6:	bf00      	nop
 80004e8:	20000134 	.word	0x20000134

080004ec <toggle_led.part.0>:

// Function to toggle or provide LED state
void toggle_led(int state)
 80004ec:	b508      	push	{r3, lr}
{
    if (state)
    {
    	// Turn it on
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80004ee:	4805      	ldr	r0, [pc, #20]	@ (8000504 <toggle_led.part.0+0x18>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	2120      	movs	r1, #32
 80004f4:	f000 fdf2 	bl	80010dc <HAL_GPIO_WritePin>
    {
    	// Turn it off
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
        cli_print("You have turned the LED OFF\r\n");
    }
}
 80004f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        cli_print("You have turned the LED ON\r\n");
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <toggle_led.part.0+0x1c>)
 80004fe:	f7ff bfe5 	b.w	80004cc <cli_print>
 8000502:	bf00      	nop
 8000504:	40010800 	.word	0x40010800
 8000508:	08002d90 	.word	0x08002d90

0800050c <toggle_led>:
    if (state)
 800050c:	4602      	mov	r2, r0
{
 800050e:	b508      	push	{r3, lr}
    if (state)
 8000510:	b118      	cbz	r0, 800051a <toggle_led+0xe>
}
 8000512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000516:	f7ff bfe9 	b.w	80004ec <toggle_led.part.0>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800051a:	4804      	ldr	r0, [pc, #16]	@ (800052c <toggle_led+0x20>)
 800051c:	2120      	movs	r1, #32
 800051e:	f000 fddd 	bl	80010dc <HAL_GPIO_WritePin>
}
 8000522:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        cli_print("You have turned the LED OFF\r\n");
 8000526:	4802      	ldr	r0, [pc, #8]	@ (8000530 <toggle_led+0x24>)
 8000528:	f7ff bfd0 	b.w	80004cc <cli_print>
 800052c:	40010800 	.word	0x40010800
 8000530:	08002dad 	.word	0x08002dad

08000534 <query_led>:

void query_led()
{
 8000534:	b508      	push	{r3, lr}
    GPIO_PinState state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000536:	2120      	movs	r1, #32
 8000538:	4805      	ldr	r0, [pc, #20]	@ (8000550 <query_led+0x1c>)
 800053a:	f000 fdc9 	bl	80010d0 <HAL_GPIO_ReadPin>
    }
    else
    {
        cli_print("LED is OFF\r\n");
    }
}
 800053e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (state == GPIO_PIN_SET)
 8000542:	2801      	cmp	r0, #1
        cli_print("LED is ON\r\n");
 8000544:	bf0c      	ite	eq
 8000546:	4803      	ldreq	r0, [pc, #12]	@ (8000554 <query_led+0x20>)
        cli_print("LED is OFF\r\n");
 8000548:	4803      	ldrne	r0, [pc, #12]	@ (8000558 <query_led+0x24>)
 800054a:	f7ff bfbf 	b.w	80004cc <cli_print>
 800054e:	bf00      	nop
 8000550:	40010800 	.word	0x40010800
 8000554:	08002dcb 	.word	0x08002dcb
 8000558:	08002dd7 	.word	0x08002dd7

0800055c <cli_help>:

// Help function
void cli_help()
{
 800055c:	b508      	push	{r3, lr}
	cli_print("You asked for HELP\r\n");
 800055e:	480b      	ldr	r0, [pc, #44]	@ (800058c <cli_help+0x30>)
 8000560:	f7ff ffb4 	bl	80004cc <cli_print>
    cli_print("\x1b[33mAvailable Commands:\r\n");
 8000564:	480a      	ldr	r0, [pc, #40]	@ (8000590 <cli_help+0x34>)
 8000566:	f7ff ffb1 	bl	80004cc <cli_print>
    cli_print("'1' to: Turn the LED on\r\n");
 800056a:	480a      	ldr	r0, [pc, #40]	@ (8000594 <cli_help+0x38>)
 800056c:	f7ff ffae 	bl	80004cc <cli_print>
    cli_print("'0' to: Turn the LED off\r\n");
 8000570:	4809      	ldr	r0, [pc, #36]	@ (8000598 <cli_help+0x3c>)
 8000572:	f7ff ffab 	bl	80004cc <cli_print>
    cli_print("'s' or 'S' to: Check the LED state\r\n");
 8000576:	4809      	ldr	r0, [pc, #36]	@ (800059c <cli_help+0x40>)
 8000578:	f7ff ffa8 	bl	80004cc <cli_print>
    cli_print("'t' or 'T' to: run the timing function\r\n");
 800057c:	4808      	ldr	r0, [pc, #32]	@ (80005a0 <cli_help+0x44>)
 800057e:	f7ff ffa5 	bl	80004cc <cli_print>
    cli_print("'h' or 'H' to: Show this help message\r\n\x1b[0m");
}
 8000582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cli_print("'h' or 'H' to: Show this help message\r\n\x1b[0m");
 8000586:	4807      	ldr	r0, [pc, #28]	@ (80005a4 <cli_help+0x48>)
 8000588:	f7ff bfa0 	b.w	80004cc <cli_print>
 800058c:	08002de4 	.word	0x08002de4
 8000590:	08002df9 	.word	0x08002df9
 8000594:	08002e14 	.word	0x08002e14
 8000598:	08002e2e 	.word	0x08002e2e
 800059c:	08002e49 	.word	0x08002e49
 80005a0:	08002e6e 	.word	0x08002e6e
 80005a4:	08002e97 	.word	0x08002e97

080005a8 <cli_init>:

void cli_init(void)
{
 80005a8:	b508      	push	{r3, lr}
    cli_print("\x1b[36mENSE452-LAB-4:\r\n");
 80005aa:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <cli_init+0x38>)
 80005ac:	f7ff ff8e 	bl	80004cc <cli_print>
    cli_print("Available Commands:\r\n");
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <cli_init+0x3c>)
 80005b2:	f7ff ff8b 	bl	80004cc <cli_print>
    cli_print("'1' to: Turn the LED on\r\n");
 80005b6:	480c      	ldr	r0, [pc, #48]	@ (80005e8 <cli_init+0x40>)
 80005b8:	f7ff ff88 	bl	80004cc <cli_print>
    cli_print("'0' to: Turn the LED off\r\n");
 80005bc:	480b      	ldr	r0, [pc, #44]	@ (80005ec <cli_init+0x44>)
 80005be:	f7ff ff85 	bl	80004cc <cli_print>
    cli_print("'s' or 'S' to: Check the LED state\r\n");
 80005c2:	480b      	ldr	r0, [pc, #44]	@ (80005f0 <cli_init+0x48>)
 80005c4:	f7ff ff82 	bl	80004cc <cli_print>
    cli_print("'t' or 'T' to: run the timing function\r\n");
 80005c8:	480a      	ldr	r0, [pc, #40]	@ (80005f4 <cli_init+0x4c>)
 80005ca:	f7ff ff7f 	bl	80004cc <cli_print>
    cli_print("'h' or 'H' to: Show this help message\r\n");
 80005ce:	480a      	ldr	r0, [pc, #40]	@ (80005f8 <cli_init+0x50>)
 80005d0:	f7ff ff7c 	bl	80004cc <cli_print>
    cli_print("********************************************\r\n\x1b[0m");
}
 80005d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cli_print("********************************************\r\n\x1b[0m");
 80005d8:	4808      	ldr	r0, [pc, #32]	@ (80005fc <cli_init+0x54>)
 80005da:	f7ff bf77 	b.w	80004cc <cli_print>
 80005de:	bf00      	nop
 80005e0:	08002ec3 	.word	0x08002ec3
 80005e4:	08002dfe 	.word	0x08002dfe
 80005e8:	08002e14 	.word	0x08002e14
 80005ec:	08002e2e 	.word	0x08002e2e
 80005f0:	08002e49 	.word	0x08002e49
 80005f4:	08002e6e 	.word	0x08002e6e
 80005f8:	08002ed9 	.word	0x08002ed9
 80005fc:	08002f01 	.word	0x08002f01

08000600 <cli_process>:

void cli_process(void)
{
 8000600:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t rx_char;

    // Receive one character through UART
    HAL_UART_Receive(&huart2, &rx_char, 1, HAL_MAX_DELAY);
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	2201      	movs	r2, #1
 8000608:	4844      	ldr	r0, [pc, #272]	@ (800071c <cli_process+0x11c>)
 800060a:	f10d 0103 	add.w	r1, sp, #3
 800060e:	f001 f99e 	bl	800194e <HAL_UART_Receive>

    // Echo the received character back to the terminal except for backspace
	if (rx_char != '\b' && rx_char != 127)
 8000612:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000616:	2b08      	cmp	r3, #8
 8000618:	d009      	beq.n	800062e <cli_process+0x2e>
 800061a:	2b7f      	cmp	r3, #127	@ 0x7f
 800061c:	d007      	beq.n	800062e <cli_process+0x2e>
	{
		HAL_UART_Transmit(&huart2, &rx_char, 1, HAL_MAX_DELAY);
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	2201      	movs	r2, #1
 8000624:	483d      	ldr	r0, [pc, #244]	@ (800071c <cli_process+0x11c>)
 8000626:	f10d 0103 	add.w	r1, sp, #3
 800062a:	f001 f942 	bl	80018b2 <HAL_UART_Transmit>
	}

    // Handle backspace
    if (rx_char == '\b' || rx_char == 127)
 800062e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000632:	2b08      	cmp	r3, #8
 8000634:	d001      	beq.n	800063a <cli_process+0x3a>
 8000636:	2b7f      	cmp	r3, #127	@ 0x7f
 8000638:	d113      	bne.n	8000662 <cli_process+0x62>
	{
		if (buffer_index > 0)
 800063a:	4a39      	ldr	r2, [pc, #228]	@ (8000720 <cli_process+0x120>)
 800063c:	6813      	ldr	r3, [r2, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	dd0d      	ble.n	800065e <cli_process+0x5e>
		{
			// Move back in the buffer
			buffer_index--;
			// Null terminate the buffer
			cli_buffer[buffer_index] = '\0';
 8000642:	2100      	movs	r1, #0
			buffer_index--;
 8000644:	3b01      	subs	r3, #1
 8000646:	6013      	str	r3, [r2, #0]
			cli_buffer[buffer_index] = '\0';
 8000648:	4a36      	ldr	r2, [pc, #216]	@ (8000724 <cli_process+0x124>)

			const char backspace_seq[] = "\b \b";
			HAL_UART_Transmit(&huart2, (uint8_t*)backspace_seq, sizeof(backspace_seq) - 1, HAL_MAX_DELAY);
 800064a:	4834      	ldr	r0, [pc, #208]	@ (800071c <cli_process+0x11c>)
			cli_buffer[buffer_index] = '\0';
 800064c:	54d1      	strb	r1, [r2, r3]
			const char backspace_seq[] = "\b \b";
 800064e:	4b36      	ldr	r3, [pc, #216]	@ (8000728 <cli_process+0x128>)
			HAL_UART_Transmit(&huart2, (uint8_t*)backspace_seq, sizeof(backspace_seq) - 1, HAL_MAX_DELAY);
 8000650:	2203      	movs	r2, #3
			const char backspace_seq[] = "\b \b";
 8000652:	9301      	str	r3, [sp, #4]
			HAL_UART_Transmit(&huart2, (uint8_t*)backspace_seq, sizeof(backspace_seq) - 1, HAL_MAX_DELAY);
 8000654:	a901      	add	r1, sp, #4
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	f001 f92a 	bl	80018b2 <HAL_UART_Transmit>
        if (buffer_index >= sizeof(cli_buffer) - 1)
        {
            buffer_index = 0;
        }
    }
}
 800065e:	b003      	add	sp, #12
 8000660:	bd30      	pop	{r4, r5, pc}
    if (rx_char == '\r' || rx_char == '\n')
 8000662:	2b0d      	cmp	r3, #13
 8000664:	d001      	beq.n	800066a <cli_process+0x6a>
 8000666:	2b0a      	cmp	r3, #10
 8000668:	d147      	bne.n	80006fa <cli_process+0xfa>
        cli_buffer[buffer_index] = '\0';
 800066a:	2200      	movs	r2, #0
 800066c:	4d2c      	ldr	r5, [pc, #176]	@ (8000720 <cli_process+0x120>)
 800066e:	4c2d      	ldr	r4, [pc, #180]	@ (8000724 <cli_process+0x124>)
 8000670:	682b      	ldr	r3, [r5, #0]
        if (strcmp(cli_buffer, "1") == 0)
 8000672:	4620      	mov	r0, r4
 8000674:	492d      	ldr	r1, [pc, #180]	@ (800072c <cli_process+0x12c>)
        cli_buffer[buffer_index] = '\0';
 8000676:	54e2      	strb	r2, [r4, r3]
        if (strcmp(cli_buffer, "1") == 0)
 8000678:	f7ff fd68 	bl	800014c <strcmp>
 800067c:	b938      	cbnz	r0, 800068e <cli_process+0x8e>
    if (state)
 800067e:	f7ff ff35 	bl	80004ec <toggle_led.part.0>
        buffer_index = 0;
 8000682:	2300      	movs	r3, #0
        cli_print("> ");
 8000684:	482a      	ldr	r0, [pc, #168]	@ (8000730 <cli_process+0x130>)
        buffer_index = 0;
 8000686:	602b      	str	r3, [r5, #0]
        cli_print("> ");
 8000688:	f7ff ff20 	bl	80004cc <cli_print>
 800068c:	e7e7      	b.n	800065e <cli_process+0x5e>
        else if (strcmp(cli_buffer, "0") == 0)
 800068e:	4620      	mov	r0, r4
 8000690:	4928      	ldr	r1, [pc, #160]	@ (8000734 <cli_process+0x134>)
 8000692:	f7ff fd5b 	bl	800014c <strcmp>
 8000696:	b910      	cbnz	r0, 800069e <cli_process+0x9e>
            toggle_led(0);
 8000698:	f7ff ff38 	bl	800050c <toggle_led>
 800069c:	e7f1      	b.n	8000682 <cli_process+0x82>
        else if (strcmp(cli_buffer, "s") == 0 || strcmp(cli_buffer, "S") == 0)
 800069e:	4620      	mov	r0, r4
 80006a0:	4925      	ldr	r1, [pc, #148]	@ (8000738 <cli_process+0x138>)
 80006a2:	f7ff fd53 	bl	800014c <strcmp>
 80006a6:	b120      	cbz	r0, 80006b2 <cli_process+0xb2>
 80006a8:	4620      	mov	r0, r4
 80006aa:	4924      	ldr	r1, [pc, #144]	@ (800073c <cli_process+0x13c>)
 80006ac:	f7ff fd4e 	bl	800014c <strcmp>
 80006b0:	b910      	cbnz	r0, 80006b8 <cli_process+0xb8>
            query_led();
 80006b2:	f7ff ff3f 	bl	8000534 <query_led>
 80006b6:	e7e4      	b.n	8000682 <cli_process+0x82>
        else if (strcmp(cli_buffer, "t") == 0 || strcmp(cli_buffer, "T") == 0) {
 80006b8:	4620      	mov	r0, r4
 80006ba:	4921      	ldr	r1, [pc, #132]	@ (8000740 <cli_process+0x140>)
 80006bc:	f7ff fd46 	bl	800014c <strcmp>
 80006c0:	b120      	cbz	r0, 80006cc <cli_process+0xcc>
 80006c2:	4620      	mov	r0, r4
 80006c4:	491f      	ldr	r1, [pc, #124]	@ (8000744 <cli_process+0x144>)
 80006c6:	f7ff fd41 	bl	800014c <strcmp>
 80006ca:	b910      	cbnz	r0, 80006d2 <cli_process+0xd2>
            run_timing_tests();
 80006cc:	f000 fa82 	bl	8000bd4 <run_timing_tests>
 80006d0:	e7d7      	b.n	8000682 <cli_process+0x82>
        else if (strcmp(cli_buffer, "h") == 0 || strcmp(cli_buffer, "H") == 0)
 80006d2:	4620      	mov	r0, r4
 80006d4:	491c      	ldr	r1, [pc, #112]	@ (8000748 <cli_process+0x148>)
 80006d6:	f7ff fd39 	bl	800014c <strcmp>
 80006da:	b120      	cbz	r0, 80006e6 <cli_process+0xe6>
 80006dc:	4620      	mov	r0, r4
 80006de:	491b      	ldr	r1, [pc, #108]	@ (800074c <cli_process+0x14c>)
 80006e0:	f7ff fd34 	bl	800014c <strcmp>
 80006e4:	b910      	cbnz	r0, 80006ec <cli_process+0xec>
            cli_help();
 80006e6:	f7ff ff39 	bl	800055c <cli_help>
 80006ea:	e7ca      	b.n	8000682 <cli_process+0x82>
        else if (strlen(cli_buffer) > 0)
 80006ec:	7823      	ldrb	r3, [r4, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0c7      	beq.n	8000682 <cli_process+0x82>
            cli_print("\x1b[31mUnknown command. Type 'H' or 'h' for help.\r\n\x1b[0m");
 80006f2:	4817      	ldr	r0, [pc, #92]	@ (8000750 <cli_process+0x150>)
 80006f4:	f7ff feea 	bl	80004cc <cli_print>
 80006f8:	e7c3      	b.n	8000682 <cli_process+0x82>
    else if (rx_char >= 32 && rx_char <= 126)
 80006fa:	f1a3 0220 	sub.w	r2, r3, #32
 80006fe:	2a5e      	cmp	r2, #94	@ 0x5e
 8000700:	d8ad      	bhi.n	800065e <cli_process+0x5e>
        cli_buffer[buffer_index++] = rx_char;
 8000702:	4a07      	ldr	r2, [pc, #28]	@ (8000720 <cli_process+0x120>)
 8000704:	4c07      	ldr	r4, [pc, #28]	@ (8000724 <cli_process+0x124>)
 8000706:	6810      	ldr	r0, [r2, #0]
 8000708:	1c41      	adds	r1, r0, #1
        if (buffer_index >= sizeof(cli_buffer) - 1)
 800070a:	2962      	cmp	r1, #98	@ 0x62
        cli_buffer[buffer_index++] = rx_char;
 800070c:	5423      	strb	r3, [r4, r0]
            buffer_index = 0;
 800070e:	bf88      	it	hi
 8000710:	2300      	movhi	r3, #0
        cli_buffer[buffer_index++] = rx_char;
 8000712:	6011      	str	r1, [r2, #0]
            buffer_index = 0;
 8000714:	bf88      	it	hi
 8000716:	6013      	strhi	r3, [r2, #0]
 8000718:	e7a1      	b.n	800065e <cli_process+0x5e>
 800071a:	bf00      	nop
 800071c:	20000134 	.word	0x20000134
 8000720:	20000084 	.word	0x20000084
 8000724:	20000088 	.word	0x20000088
 8000728:	00082008 	.word	0x00082008
 800072c:	08002f34 	.word	0x08002f34
 8000730:	08002f78 	.word	0x08002f78
 8000734:	08002f36 	.word	0x08002f36
 8000738:	08002f38 	.word	0x08002f38
 800073c:	08002f3a 	.word	0x08002f3a
 8000740:	08002f3c 	.word	0x08002f3c
 8000744:	08002f3e 	.word	0x08002f3e
 8000748:	08002f40 	.word	0x08002f40
 800074c:	08002f81 	.word	0x08002f81
 8000750:	08002f42 	.word	0x08002f42

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b510      	push	{r4, lr}
 8000756:	b090      	sub	sp, #64	@ 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000758:	2220      	movs	r2, #32
 800075a:	2100      	movs	r1, #0
 800075c:	a807      	add	r0, sp, #28
 800075e:	f001 fab0 	bl	8001cc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000762:	2214      	movs	r2, #20
 8000764:	2100      	movs	r1, #0
 8000766:	a801      	add	r0, sp, #4
 8000768:	f001 faab 	bl	8001cc2 <memset>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000770:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000772:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000776:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000780:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f000 fcbd 	bl	8001100 <HAL_RCC_OscConfig>
 8000786:	b108      	cbz	r0, 800078c <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078a:	e7fe      	b.n	800078a <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079c:	4621      	mov	r1, r4
 800079e:	a801      	add	r0, sp, #4
 80007a0:	f000 fe70 	bl	8001484 <HAL_RCC_ClockConfig>
 80007a4:	b108      	cbz	r0, 80007aa <SystemClock_Config+0x56>
 80007a6:	b672      	cpsid	i
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <SystemClock_Config+0x54>
}
 80007aa:	b010      	add	sp, #64	@ 0x40
 80007ac:	bd10      	pop	{r4, pc}
	...

080007b0 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	2610      	movs	r6, #16
{
 80007b2:	b500      	push	{lr}
 80007b4:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 80007b6:	f000 fb2b 	bl	8000e10 <HAL_Init>
  SystemClock_Config();
 80007ba:	f7ff ffcb 	bl	8000754 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	4632      	mov	r2, r6
 80007c0:	2100      	movs	r1, #0
 80007c2:	eb0d 0006 	add.w	r0, sp, r6
 80007c6:	f001 fa7c 	bl	8001cc2 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	4b3f      	ldr	r3, [pc, #252]	@ (80008c8 <main+0x118>)
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007cc:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d0:	483e      	ldr	r0, [pc, #248]	@ (80008cc <main+0x11c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	4332      	orrs	r2, r6
 80007d4:	619a      	str	r2, [r3, #24]
 80007d6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4032      	ands	r2, r6
 80007dc:	9200      	str	r2, [sp, #0]
 80007de:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e0:	699a      	ldr	r2, [r3, #24]
  huart2.Instance = USART2;
 80007e2:	4c3b      	ldr	r4, [pc, #236]	@ (80008d0 <main+0x120>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e4:	f042 0220 	orr.w	r2, r2, #32
 80007e8:	619a      	str	r2, [r3, #24]
 80007ea:	699a      	ldr	r2, [r3, #24]
 80007ec:	f002 0220 	and.w	r2, r2, #32
 80007f0:	9201      	str	r2, [sp, #4]
 80007f2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f4:	699a      	ldr	r2, [r3, #24]
 80007f6:	f042 0204 	orr.w	r2, r2, #4
 80007fa:	619a      	str	r2, [r3, #24]
 80007fc:	699a      	ldr	r2, [r3, #24]
 80007fe:	f002 0204 	and.w	r2, r2, #4
 8000802:	9202      	str	r2, [sp, #8]
 8000804:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	699a      	ldr	r2, [r3, #24]
 8000808:	f042 0208 	orr.w	r2, r2, #8
 800080c:	619a      	str	r2, [r3, #24]
 800080e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	9303      	str	r3, [sp, #12]
 8000818:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800081a:	f000 fc5f 	bl	80010dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000822:	4b2c      	ldr	r3, [pc, #176]	@ (80008d4 <main+0x124>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000824:	482c      	ldr	r0, [pc, #176]	@ (80008d8 <main+0x128>)
 8000826:	eb0d 0106 	add.w	r1, sp, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000830:	f000 fb76 	bl	8000f20 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2120      	movs	r1, #32
 8000836:	2301      	movs	r3, #1
 8000838:	e9cd 1304 	strd	r1, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2302      	movs	r3, #2
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083e:	4823      	ldr	r0, [pc, #140]	@ (80008cc <main+0x11c>)
 8000840:	eb0d 0106 	add.w	r1, sp, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000848:	f000 fb6a 	bl	8000f20 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800084c:	462a      	mov	r2, r5
 800084e:	4629      	mov	r1, r5
 8000850:	2028      	movs	r0, #40	@ 0x28
 8000852:	f000 fb13 	bl	8000e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000856:	2028      	movs	r0, #40	@ 0x28
 8000858:	f000 fb40 	bl	8000edc <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 115200;
 800085c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000860:	481e      	ldr	r0, [pc, #120]	@ (80008dc <main+0x12c>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000862:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart2.Init.BaudRate = 115200;
 8000866:	e9c4 0300 	strd	r0, r3, [r4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800086a:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086c:	4620      	mov	r0, r4
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	e9c4 3505 	strd	r3, r5, [r4, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000872:	6125      	str	r5, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	61e5      	str	r5, [r4, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000876:	f000 ffed 	bl	8001854 <HAL_UART_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	b108      	cbz	r0, 8000882 <main+0xd2>
 800087e:	b672      	cpsid	i
  while (1)
 8000880:	e7fe      	b.n	8000880 <main+0xd0>
  htim2.Instance = TIM2;
 8000882:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000886:	4816      	ldr	r0, [pc, #88]	@ (80008e0 <main+0x130>)
  htim2.Init.Prescaler = 0;
 8000888:	e9c0 2300 	strd	r2, r3, [r0]
  htim2.Init.Period = 0xFFFF;
 800088c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000890:	6086      	str	r6, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000896:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000898:	f000 ff16 	bl	80016c8 <HAL_TIM_Base_Init>
 800089c:	b108      	cbz	r0, 80008a2 <main+0xf2>
 800089e:	b672      	cpsid	i
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <main+0xf0>
  timer_init();
 80008a2:	f000 f973 	bl	8000b8c <timer_init>
  const char clear_screen[] = "\033[2J\033[H";
 80008a6:	4a0f      	ldr	r2, [pc, #60]	@ (80008e4 <main+0x134>)
 80008a8:	ab04      	add	r3, sp, #16
 80008aa:	6810      	ldr	r0, [r2, #0]
 80008ac:	6851      	ldr	r1, [r2, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)clear_screen, sizeof(clear_screen) - 1, HAL_MAX_DELAY);
 80008ae:	2207      	movs	r2, #7
  const char clear_screen[] = "\033[2J\033[H";
 80008b0:	c303      	stmia	r3!, {r0, r1}
  HAL_UART_Transmit(&huart2, (uint8_t*)clear_screen, sizeof(clear_screen) - 1, HAL_MAX_DELAY);
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	a904      	add	r1, sp, #16
 80008b8:	4620      	mov	r0, r4
 80008ba:	f000 fffa 	bl	80018b2 <HAL_UART_Transmit>
  cli_init();
 80008be:	f7ff fe73 	bl	80005a8 <cli_init>
	  cli_process();
 80008c2:	f7ff fe9d 	bl	8000600 <cli_process>
  while (1)
 80008c6:	e7fc      	b.n	80008c2 <main+0x112>
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40010800 	.word	0x40010800
 80008d0:	20000134 	.word	0x20000134
 80008d4:	10110000 	.word	0x10110000
 80008d8:	40011000 	.word	0x40011000
 80008dc:	40004400 	.word	0x40004400
 80008e0:	200000ec 	.word	0x200000ec
 80008e4:	08002f7b 	.word	0x08002f7b

080008e8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <HAL_MspInit+0x3c>)
{
 80008ea:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ec:	699a      	ldr	r2, [r3, #24]
 80008ee:	f042 0201 	orr.w	r2, r2, #1
 80008f2:	619a      	str	r2, [r3, #24]
 80008f4:	699a      	ldr	r2, [r3, #24]
 80008f6:	f002 0201 	and.w	r2, r2, #1
 80008fa:	9200      	str	r2, [sp, #0]
 80008fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	69da      	ldr	r2, [r3, #28]
 8000900:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000904:	61da      	str	r2, [r3, #28]
 8000906:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000908:	4a07      	ldr	r2, [pc, #28]	@ (8000928 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090e:	9301      	str	r3, [sp, #4]
 8000910:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000912:	6853      	ldr	r3, [r2, #4]
 8000914:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000918:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800091c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	b002      	add	sp, #8
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000
 8000928:	40010000 	.word	0x40010000

0800092c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800092c:	6803      	ldr	r3, [r0, #0]
{
 800092e:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8000930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000934:	d10a      	bne.n	800094c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000936:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800093a:	69da      	ldr	r2, [r3, #28]
 800093c:	f042 0201 	orr.w	r2, r2, #1
 8000940:	61da      	str	r2, [r3, #28]
 8000942:	69db      	ldr	r3, [r3, #28]
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800094c:	b002      	add	sp, #8
 800094e:	4770      	bx	lr

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b510      	push	{r4, lr}
 8000952:	4604      	mov	r4, r0
 8000954:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	2210      	movs	r2, #16
 8000958:	2100      	movs	r1, #0
 800095a:	a802      	add	r0, sp, #8
 800095c:	f001 f9b1 	bl	8001cc2 <memset>
  if(huart->Instance==USART2)
 8000960:	6822      	ldr	r2, [r4, #0]
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <HAL_UART_MspInit+0x58>)
 8000964:	429a      	cmp	r2, r3
 8000966:	d11c      	bne.n	80009a2 <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000968:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 800096c:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	480f      	ldr	r0, [pc, #60]	@ (80009ac <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000970:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000974:	61da      	str	r2, [r3, #28]
 8000976:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 800097a:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800097e:	9200      	str	r2, [sp, #0]
 8000980:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	699a      	ldr	r2, [r3, #24]
 8000984:	f042 0204 	orr.w	r2, r2, #4
 8000988:	619a      	str	r2, [r3, #24]
 800098a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	9301      	str	r3, [sp, #4]
 8000994:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f000 fabf 	bl	8000f20 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009a2:	b006      	add	sp, #24
 80009a4:	bd10      	pop	{r4, pc}
 80009a6:	bf00      	nop
 80009a8:	40004400 	.word	0x40004400
 80009ac:	40010800 	.word	0x40010800

080009b0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler>

080009b2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <HardFault_Handler>

080009b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler>

080009b6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler>

080009b8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler>

080009ba <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	4770      	bx	lr

080009bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80009bc:	4770      	bx	lr

080009be <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c0:	f000 ba38 	b.w	8000e34 <HAL_IncTick>

080009c4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009c8:	f000 bb8e 	b.w	80010e8 <HAL_GPIO_EXTI_IRQHandler>

080009cc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80009cc:	2001      	movs	r0, #1
 80009ce:	4770      	bx	lr

080009d0 <_kill>:

int _kill(int pid, int sig)
{
 80009d0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009d2:	f001 f9c5 	bl	8001d60 <__errno>
 80009d6:	2316      	movs	r3, #22
 80009d8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80009da:	f04f 30ff 	mov.w	r0, #4294967295
 80009de:	bd08      	pop	{r3, pc}

080009e0 <_exit>:

void _exit (int status)
{
 80009e0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80009e2:	f001 f9bd 	bl	8001d60 <__errno>
 80009e6:	2316      	movs	r3, #22
 80009e8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80009ea:	e7fe      	b.n	80009ea <_exit+0xa>

080009ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009ec:	b570      	push	{r4, r5, r6, lr}
 80009ee:	460d      	mov	r5, r1
 80009f0:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f2:	460e      	mov	r6, r1
 80009f4:	1b73      	subs	r3, r6, r5
 80009f6:	429c      	cmp	r4, r3
 80009f8:	dc01      	bgt.n	80009fe <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80009fa:	4620      	mov	r0, r4
 80009fc:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80009fe:	f3af 8000 	nop.w
 8000a02:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	e7f5      	b.n	80009f4 <_read+0x8>

08000a08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	460d      	mov	r5, r1
 8000a0c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0e:	460e      	mov	r6, r1
 8000a10:	1b73      	subs	r3, r6, r5
 8000a12:	429c      	cmp	r4, r3
 8000a14:	dc01      	bgt.n	8000a1a <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8000a16:	4620      	mov	r0, r4
 8000a18:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8000a1a:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000a1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a22:	e7f5      	b.n	8000a10 <_write+0x8>

08000a24 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	4770      	bx	lr

08000a2a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000a2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8000a2e:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8000a30:	604b      	str	r3, [r1, #4]
}
 8000a32:	4770      	bx	lr

08000a34 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000a34:	2001      	movs	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000a38:	2000      	movs	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a6c <_sbrk+0x30>)
{
 8000a3e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000a40:	6811      	ldr	r1, [r2, #0]
{
 8000a42:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000a44:	b909      	cbnz	r1, 8000a4a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000a46:	490a      	ldr	r1, [pc, #40]	@ (8000a70 <_sbrk+0x34>)
 8000a48:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a4a:	6810      	ldr	r0, [r2, #0]
 8000a4c:	4909      	ldr	r1, [pc, #36]	@ (8000a74 <_sbrk+0x38>)
 8000a4e:	4c0a      	ldr	r4, [pc, #40]	@ (8000a78 <_sbrk+0x3c>)
 8000a50:	4403      	add	r3, r0
 8000a52:	1b09      	subs	r1, r1, r4
 8000a54:	428b      	cmp	r3, r1
 8000a56:	d906      	bls.n	8000a66 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000a58:	f001 f982 	bl	8001d60 <__errno>
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000a64:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000a66:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000a68:	e7fc      	b.n	8000a64 <_sbrk+0x28>
 8000a6a:	bf00      	nop
 8000a6c:	2000017c 	.word	0x2000017c
 8000a70:	20000c30 	.word	0x20000c30
 8000a74:	20005000 	.word	0x20005000
 8000a78:	00000400 	.word	0x00000400

08000a7c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7c:	4770      	bx	lr
	...

08000a80 <add_32bit>:
    }
}

// Operations to measure using pre-generated random values
static void add_32bit(int trial) {
    volatile int32_t c = rand32_a[trial] + rand32_b[trial];
 8000a80:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <add_32bit+0x18>)
 8000a82:	4a06      	ldr	r2, [pc, #24]	@ (8000a9c <add_32bit+0x1c>)
 8000a84:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a88:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
static void add_32bit(int trial) {
 8000a8c:	b082      	sub	sp, #8
    volatile int32_t c = rand32_a[trial] + rand32_b[trial];
 8000a8e:	4413      	add	r3, r2
 8000a90:	9301      	str	r3, [sp, #4]
}
 8000a92:	b002      	add	sp, #8
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000950 	.word	0x20000950
 8000a9c:	200007c0 	.word	0x200007c0

08000aa0 <add_64bit>:

static void add_64bit(int trial) {
 8000aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    volatile int64_t c = rand64_a[trial] + rand64_b[trial];
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <add_64bit+0x28>)
 8000aa4:	4a09      	ldr	r2, [pc, #36]	@ (8000acc <add_64bit+0x2c>)
 8000aa6:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8000aaa:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
 8000aae:	eb02 05c0 	add.w	r5, r2, r0, lsl #3
 8000ab2:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8000ab6:	686d      	ldr	r5, [r5, #4]
 8000ab8:	6864      	ldr	r4, [r4, #4]
 8000aba:	180a      	adds	r2, r1, r0
 8000abc:	eb45 0304 	adc.w	r3, r5, r4
 8000ac0:	e9cd 2300 	strd	r2, r3, [sp]
}
 8000ac4:	b003      	add	sp, #12
 8000ac6:	bd30      	pop	{r4, r5, pc}
 8000ac8:	20000180 	.word	0x20000180
 8000acc:	200004a0 	.word	0x200004a0

08000ad0 <multiply_32bit>:

static void multiply_32bit(int trial) {
    volatile int32_t c = rand32_a[trial] * rand32_b[trial];
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <multiply_32bit+0x18>)
 8000ad2:	4a06      	ldr	r2, [pc, #24]	@ (8000aec <multiply_32bit+0x1c>)
 8000ad4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000ad8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
static void multiply_32bit(int trial) {
 8000adc:	b082      	sub	sp, #8
    volatile int32_t c = rand32_a[trial] * rand32_b[trial];
 8000ade:	4353      	muls	r3, r2
 8000ae0:	9301      	str	r3, [sp, #4]
}
 8000ae2:	b002      	add	sp, #8
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000950 	.word	0x20000950
 8000aec:	200007c0 	.word	0x200007c0

08000af0 <multiply_64bit>:

static void multiply_64bit(int trial) {
 8000af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    volatile int64_t c = rand64_a[trial] * rand64_b[trial];
 8000af2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <multiply_64bit+0x30>)
 8000af4:	4a0b      	ldr	r2, [pc, #44]	@ (8000b24 <multiply_64bit+0x34>)
 8000af6:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8000afa:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8000afe:	6865      	ldr	r5, [r4, #4]
 8000b00:	6849      	ldr	r1, [r1, #4]
 8000b02:	f852 4030 	ldr.w	r4, [r2, r0, lsl #3]
 8000b06:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8000b0a:	4341      	muls	r1, r0
 8000b0c:	fba0 2304 	umull	r2, r3, r0, r4
 8000b10:	fb04 1105 	mla	r1, r4, r5, r1
 8000b14:	440b      	add	r3, r1
 8000b16:	e9cd 2300 	strd	r2, r3, [sp]
}
 8000b1a:	b003      	add	sp, #12
 8000b1c:	bd30      	pop	{r4, r5, pc}
 8000b1e:	bf00      	nop
 8000b20:	200004a0 	.word	0x200004a0
 8000b24:	20000180 	.word	0x20000180

08000b28 <divide_32bit>:

static void divide_32bit(int trial) {
    volatile int32_t c = (rand32_a[trial] != 0) ? rand32_b[trial] / rand32_a[trial] : 0;  // Avoiding division by zero
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <divide_32bit+0x1c>)
static void divide_32bit(int trial) {
 8000b2a:	b082      	sub	sp, #8
    volatile int32_t c = (rand32_a[trial] != 0) ? rand32_b[trial] / rand32_a[trial] : 0;  // Avoiding division by zero
 8000b2c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000b30:	b123      	cbz	r3, 8000b3c <divide_32bit+0x14>
 8000b32:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <divide_32bit+0x20>)
 8000b34:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8000b38:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b3c:	9301      	str	r3, [sp, #4]
}
 8000b3e:	b002      	add	sp, #8
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000950 	.word	0x20000950
 8000b48:	200007c0 	.word	0x200007c0

08000b4c <divide_64bit>:

static void divide_64bit(int trial) {
    volatile int64_t c = (rand64_a[trial] != 0) ? rand64_b[trial] / rand64_a[trial] : 0;  // Avoiding division by zero
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <divide_64bit+0x30>)
static void divide_64bit(int trial) {
 8000b4e:	b513      	push	{r0, r1, r4, lr}
    volatile int64_t c = (rand64_a[trial] != 0) ? rand64_b[trial] / rand64_a[trial] : 0;  // Avoiding division by zero
 8000b50:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8000b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b58:	ea52 0103 	orrs.w	r1, r2, r3
 8000b5c:	ea4f 04c0 	mov.w	r4, r0, lsl #3
 8000b60:	d007      	beq.n	8000b72 <divide_64bit+0x26>
 8000b62:	4907      	ldr	r1, [pc, #28]	@ (8000b80 <divide_64bit+0x34>)
 8000b64:	4421      	add	r1, r4
 8000b66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b6a:	f7ff fb01 	bl	8000170 <__aeabi_ldivmod>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	460b      	mov	r3, r1
 8000b72:	e9cd 2300 	strd	r2, r3, [sp]
}
 8000b76:	b002      	add	sp, #8
 8000b78:	bd10      	pop	{r4, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200004a0 	.word	0x200004a0
 8000b80:	20000180 	.word	0x20000180

08000b84 <copy_8byte_struct>:
// Copy operations for structs
static void copy_8byte_struct(int trial) {
    struct8_t src = {{0}};
    struct8_t dst;
    dst = src;
}
 8000b84:	4770      	bx	lr

08000b86 <copy_1024byte_struct>:
    struct128_t src = {{0}};
    struct128_t dst;
    dst = src;
}

static void copy_1024byte_struct(int trial) {
 8000b86:	4770      	bx	lr

08000b88 <copy_128byte_struct>:
static void copy_128byte_struct(int trial) {
 8000b88:	4770      	bx	lr
	...

08000b8c <timer_init>:
    HAL_TIM_Base_Start(&htim2);
 8000b8c:	4801      	ldr	r0, [pc, #4]	@ (8000b94 <timer_init+0x8>)
 8000b8e:	f000 bd35 	b.w	80015fc <HAL_TIM_Base_Start>
 8000b92:	bf00      	nop
 8000b94:	200000ec 	.word	0x200000ec

08000b98 <timer_stop>:
    uint16_t end_time = __HAL_TIM_GET_COUNTER(&htim2);
 8000b98:	4b02      	ldr	r3, [pc, #8]	@ (8000ba4 <timer_stop+0xc>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        return (0xFFFF - start_time + end_time + 1);
 8000b9e:	1a18      	subs	r0, r3, r0
}
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	4770      	bx	lr
 8000ba4:	200000ec 	.word	0x200000ec

08000ba8 <measure_time>:
    struct1024_t dst;
    dst = src;
}

// Function to measure the time taken by an operation over 100 trials
static uint16_t measure_time(void (*operation)(int)) {
 8000ba8:	b570      	push	{r4, r5, r6, lr}
 8000baa:	4606      	mov	r6, r0
    uint16_t start = timer_start();
    for (int i = 0; i < TRIALS; i++) {
 8000bac:	2400      	movs	r4, #0
    return __HAL_TIM_GET_COUNTER(&htim2);
 8000bae:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <measure_time+0x28>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8000bb4:	b2ad      	uxth	r5, r5
        operation(i);
 8000bb6:	4620      	mov	r0, r4
    for (int i = 0; i < TRIALS; i++) {
 8000bb8:	3401      	adds	r4, #1
        operation(i);
 8000bba:	47b0      	blx	r6
    for (int i = 0; i < TRIALS; i++) {
 8000bbc:	2c64      	cmp	r4, #100	@ 0x64
 8000bbe:	d1fa      	bne.n	8000bb6 <measure_time+0xe>
    }
    return timer_stop(start) / TRIALS;
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	f7ff ffe9 	bl	8000b98 <timer_stop>
 8000bc6:	fbb0 f0f4 	udiv	r0, r0, r4
}
 8000bca:	b280      	uxth	r0, r0
 8000bcc:	bd70      	pop	{r4, r5, r6, pc}
 8000bce:	bf00      	nop
 8000bd0:	200000ec 	.word	0x200000ec

08000bd4 <run_timing_tests>:

void run_timing_tests(void) {
 8000bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bd8:	4d4f      	ldr	r5, [pc, #316]	@ (8000d18 <run_timing_tests+0x144>)
 8000bda:	4e50      	ldr	r6, [pc, #320]	@ (8000d1c <run_timing_tests+0x148>)
 8000bdc:	f8df 8140 	ldr.w	r8, [pc, #320]	@ 8000d20 <run_timing_tests+0x14c>
 8000be0:	4f50      	ldr	r7, [pc, #320]	@ (8000d24 <run_timing_tests+0x150>)
 8000be2:	b09d      	sub	sp, #116	@ 0x74
 8000be4:	f505 79c8 	add.w	r9, r5, #400	@ 0x190
        rand32_a[i] = rand();
 8000be8:	f000 ff08 	bl	80019fc <rand>
 8000bec:	f845 0b04 	str.w	r0, [r5], #4
        rand32_b[i] = rand();
 8000bf0:	f000 ff04 	bl	80019fc <rand>
 8000bf4:	f846 0b04 	str.w	r0, [r6], #4
        rand64_a[i] = ((int64_t)rand() << 32) | rand();
 8000bf8:	f000 ff00 	bl	80019fc <rand>
 8000bfc:	4604      	mov	r4, r0
 8000bfe:	f000 fefd 	bl	80019fc <rand>
 8000c02:	ea44 74e0 	orr.w	r4, r4, r0, asr #31
 8000c06:	e9c8 0400 	strd	r0, r4, [r8]
        rand64_b[i] = ((int64_t)rand() << 32) | rand();
 8000c0a:	f000 fef7 	bl	80019fc <rand>
 8000c0e:	4604      	mov	r4, r0
 8000c10:	f000 fef4 	bl	80019fc <rand>
    for (int i = 0; i < TRIALS; i++) {
 8000c14:	454d      	cmp	r5, r9
        rand64_b[i] = ((int64_t)rand() << 32) | rand();
 8000c16:	ea44 74e0 	orr.w	r4, r4, r0, asr #31
 8000c1a:	e9c7 0400 	strd	r0, r4, [r7]
 8000c1e:	f108 0808 	add.w	r8, r8, #8
 8000c22:	f107 0708 	add.w	r7, r7, #8
    for (int i = 0; i < TRIALS; i++) {
 8000c26:	d1df      	bne.n	8000be8 <run_timing_tests+0x14>
    char buffer[100];

    // Generating random values for all operations
    generate_random_values();

    uint16_t result_32bit_add = measure_time(add_32bit);
 8000c28:	483f      	ldr	r0, [pc, #252]	@ (8000d28 <run_timing_tests+0x154>)
 8000c2a:	f7ff ffbd 	bl	8000ba8 <measure_time>
 8000c2e:	9001      	str	r0, [sp, #4]
    uint16_t result_64bit_add = measure_time(add_64bit);
 8000c30:	483e      	ldr	r0, [pc, #248]	@ (8000d2c <run_timing_tests+0x158>)
 8000c32:	f7ff ffb9 	bl	8000ba8 <measure_time>
 8000c36:	4683      	mov	fp, r0
    uint16_t result_32bit_mul = measure_time(multiply_32bit);
 8000c38:	483d      	ldr	r0, [pc, #244]	@ (8000d30 <run_timing_tests+0x15c>)
 8000c3a:	f7ff ffb5 	bl	8000ba8 <measure_time>
 8000c3e:	4682      	mov	sl, r0
    uint16_t result_64bit_mul = measure_time(multiply_64bit);
 8000c40:	483c      	ldr	r0, [pc, #240]	@ (8000d34 <run_timing_tests+0x160>)
 8000c42:	f7ff ffb1 	bl	8000ba8 <measure_time>
 8000c46:	4681      	mov	r9, r0
    uint16_t result_32bit_div = measure_time(divide_32bit);
 8000c48:	483b      	ldr	r0, [pc, #236]	@ (8000d38 <run_timing_tests+0x164>)
 8000c4a:	f7ff ffad 	bl	8000ba8 <measure_time>
 8000c4e:	4680      	mov	r8, r0
    uint16_t result_64bit_div = measure_time(divide_64bit);
 8000c50:	483a      	ldr	r0, [pc, #232]	@ (8000d3c <run_timing_tests+0x168>)
 8000c52:	f7ff ffa9 	bl	8000ba8 <measure_time>
 8000c56:	4607      	mov	r7, r0
    uint16_t result_copy_8byte = measure_time(copy_8byte_struct);
 8000c58:	4839      	ldr	r0, [pc, #228]	@ (8000d40 <run_timing_tests+0x16c>)
 8000c5a:	f7ff ffa5 	bl	8000ba8 <measure_time>
 8000c5e:	4606      	mov	r6, r0
    uint16_t result_copy_128byte = measure_time(copy_128byte_struct);
 8000c60:	4838      	ldr	r0, [pc, #224]	@ (8000d44 <run_timing_tests+0x170>)
 8000c62:	f7ff ffa1 	bl	8000ba8 <measure_time>
 8000c66:	4605      	mov	r5, r0
    uint16_t result_copy_1024byte = measure_time(copy_1024byte_struct);
 8000c68:	4837      	ldr	r0, [pc, #220]	@ (8000d48 <run_timing_tests+0x174>)
 8000c6a:	f7ff ff9d 	bl	8000ba8 <measure_time>
 8000c6e:	4604      	mov	r4, r0

    cli_print("You asked for the timing test:\r\n");
 8000c70:	4836      	ldr	r0, [pc, #216]	@ (8000d4c <run_timing_tests+0x178>)
 8000c72:	f7ff fc2b 	bl	80004cc <cli_print>

    cli_print("\x1b[33m");
 8000c76:	4836      	ldr	r0, [pc, #216]	@ (8000d50 <run_timing_tests+0x17c>)
 8000c78:	f7ff fc28 	bl	80004cc <cli_print>

    sprintf(buffer, "32-bit Addition: %d ticks\r\n", result_32bit_add);
 8000c7c:	9a01      	ldr	r2, [sp, #4]
 8000c7e:	4935      	ldr	r1, [pc, #212]	@ (8000d54 <run_timing_tests+0x180>)
 8000c80:	a803      	add	r0, sp, #12
 8000c82:	f000 ffbb 	bl	8001bfc <siprintf>
    cli_print(buffer);
 8000c86:	a803      	add	r0, sp, #12
 8000c88:	f7ff fc20 	bl	80004cc <cli_print>

    sprintf(buffer, "64-bit Addition: %d ticks\r\n", result_64bit_add);
 8000c8c:	465a      	mov	r2, fp
 8000c8e:	4932      	ldr	r1, [pc, #200]	@ (8000d58 <run_timing_tests+0x184>)
 8000c90:	a803      	add	r0, sp, #12
 8000c92:	f000 ffb3 	bl	8001bfc <siprintf>
    cli_print(buffer);
 8000c96:	a803      	add	r0, sp, #12
 8000c98:	f7ff fc18 	bl	80004cc <cli_print>

    sprintf(buffer, "32-bit Multiplication: %d ticks\r\n", result_32bit_mul);
 8000c9c:	4652      	mov	r2, sl
 8000c9e:	492f      	ldr	r1, [pc, #188]	@ (8000d5c <run_timing_tests+0x188>)
 8000ca0:	a803      	add	r0, sp, #12
 8000ca2:	f000 ffab 	bl	8001bfc <siprintf>
    cli_print(buffer);
 8000ca6:	a803      	add	r0, sp, #12
 8000ca8:	f7ff fc10 	bl	80004cc <cli_print>

    sprintf(buffer, "64-bit Multiplication: %d ticks\r\n", result_64bit_mul);
 8000cac:	464a      	mov	r2, r9
 8000cae:	492c      	ldr	r1, [pc, #176]	@ (8000d60 <run_timing_tests+0x18c>)
 8000cb0:	a803      	add	r0, sp, #12
 8000cb2:	f000 ffa3 	bl	8001bfc <siprintf>
    cli_print(buffer);
 8000cb6:	a803      	add	r0, sp, #12
 8000cb8:	f7ff fc08 	bl	80004cc <cli_print>

    sprintf(buffer, "32-bit Division: %d ticks\r\n", result_32bit_div);
 8000cbc:	4642      	mov	r2, r8
 8000cbe:	4929      	ldr	r1, [pc, #164]	@ (8000d64 <run_timing_tests+0x190>)
 8000cc0:	a803      	add	r0, sp, #12
 8000cc2:	f000 ff9b 	bl	8001bfc <siprintf>
    cli_print(buffer);
 8000cc6:	a803      	add	r0, sp, #12
 8000cc8:	f7ff fc00 	bl	80004cc <cli_print>

    sprintf(buffer, "64-bit Division: %d ticks\r\n", result_64bit_div);
 8000ccc:	463a      	mov	r2, r7
 8000cce:	4926      	ldr	r1, [pc, #152]	@ (8000d68 <run_timing_tests+0x194>)
 8000cd0:	a803      	add	r0, sp, #12
 8000cd2:	f000 ff93 	bl	8001bfc <siprintf>
    cli_print(buffer);
 8000cd6:	a803      	add	r0, sp, #12
 8000cd8:	f7ff fbf8 	bl	80004cc <cli_print>

    sprintf(buffer, "8-byte Struct Copy: %d ticks\r\n", result_copy_8byte);
 8000cdc:	4632      	mov	r2, r6
 8000cde:	4923      	ldr	r1, [pc, #140]	@ (8000d6c <run_timing_tests+0x198>)
 8000ce0:	a803      	add	r0, sp, #12
 8000ce2:	f000 ff8b 	bl	8001bfc <siprintf>
	cli_print(buffer);
 8000ce6:	a803      	add	r0, sp, #12
 8000ce8:	f7ff fbf0 	bl	80004cc <cli_print>

	sprintf(buffer, "128-byte Struct Copy: %d ticks\r\n", result_copy_128byte);
 8000cec:	462a      	mov	r2, r5
 8000cee:	4920      	ldr	r1, [pc, #128]	@ (8000d70 <run_timing_tests+0x19c>)
 8000cf0:	a803      	add	r0, sp, #12
 8000cf2:	f000 ff83 	bl	8001bfc <siprintf>
	cli_print(buffer);
 8000cf6:	a803      	add	r0, sp, #12
 8000cf8:	f7ff fbe8 	bl	80004cc <cli_print>

	sprintf(buffer, "1024-byte Struct Copy: %d ticks\r\n", result_copy_1024byte);
 8000cfc:	4622      	mov	r2, r4
 8000cfe:	491d      	ldr	r1, [pc, #116]	@ (8000d74 <run_timing_tests+0x1a0>)
 8000d00:	a803      	add	r0, sp, #12
 8000d02:	f000 ff7b 	bl	8001bfc <siprintf>
	cli_print(buffer);
 8000d06:	a803      	add	r0, sp, #12
 8000d08:	f7ff fbe0 	bl	80004cc <cli_print>

	cli_print("\x1b[0m");
 8000d0c:	481a      	ldr	r0, [pc, #104]	@ (8000d78 <run_timing_tests+0x1a4>)
 8000d0e:	f7ff fbdd 	bl	80004cc <cli_print>
}
 8000d12:	b01d      	add	sp, #116	@ 0x74
 8000d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d18:	20000950 	.word	0x20000950
 8000d1c:	200007c0 	.word	0x200007c0
 8000d20:	200004a0 	.word	0x200004a0
 8000d24:	20000180 	.word	0x20000180
 8000d28:	08000a81 	.word	0x08000a81
 8000d2c:	08000aa1 	.word	0x08000aa1
 8000d30:	08000ad1 	.word	0x08000ad1
 8000d34:	08000af1 	.word	0x08000af1
 8000d38:	08000b29 	.word	0x08000b29
 8000d3c:	08000b4d 	.word	0x08000b4d
 8000d40:	08000b85 	.word	0x08000b85
 8000d44:	08000b89 	.word	0x08000b89
 8000d48:	08000b87 	.word	0x08000b87
 8000d4c:	08002f9b 	.word	0x08002f9b
 8000d50:	08002fbc 	.word	0x08002fbc
 8000d54:	08002fc2 	.word	0x08002fc2
 8000d58:	08002fde 	.word	0x08002fde
 8000d5c:	08002ffa 	.word	0x08002ffa
 8000d60:	0800301c 	.word	0x0800301c
 8000d64:	0800303e 	.word	0x0800303e
 8000d68:	0800305a 	.word	0x0800305a
 8000d6c:	08003078 	.word	0x08003078
 8000d70:	08003076 	.word	0x08003076
 8000d74:	08003097 	.word	0x08003097
 8000d78:	08002f2f 	.word	0x08002f2f

08000d7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d7c:	f7ff fe7e 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480b      	ldr	r0, [pc, #44]	@ (8000db0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d82:	490c      	ldr	r1, [pc, #48]	@ (8000db4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d84:	4a0c      	ldr	r2, [pc, #48]	@ (8000db8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a09      	ldr	r2, [pc, #36]	@ (8000dbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d98:	4c09      	ldr	r4, [pc, #36]	@ (8000dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f000 ffe1 	bl	8001d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000daa:	f7ff fd01 	bl	80007b0 <main>
  bx lr
 8000dae:	4770      	bx	lr
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000db8:	080031bc 	.word	0x080031bc
  ldr r2, =_sbss
 8000dbc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dc0:	20000c30 	.word	0x20000c30

08000dc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC1_2_IRQHandler>
	...

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <HAL_InitTick+0x3c>)
{
 8000dcc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dce:	781a      	ldrb	r2, [r3, #0]
 8000dd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e08 <HAL_InitTick+0x40>)
 8000dda:	6810      	ldr	r0, [r2, #0]
 8000ddc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000de0:	f000 f88a 	bl	8000ef8 <HAL_SYSTICK_Config>
 8000de4:	4604      	mov	r4, r0
 8000de6:	b958      	cbnz	r0, 8000e00 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de8:	2d0f      	cmp	r5, #15
 8000dea:	d809      	bhi.n	8000e00 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	4602      	mov	r2, r0
 8000dee:	4629      	mov	r1, r5
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 f842 	bl	8000e7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df8:	4620      	mov	r0, r4
 8000dfa:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <HAL_InitTick+0x44>)
 8000dfc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000dfe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000e00:	2001      	movs	r0, #1
 8000e02:	e7fc      	b.n	8000dfe <HAL_InitTick+0x36>
 8000e04:	20000004 	.word	0x20000004
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000008 	.word	0x20000008

08000e10 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4a07      	ldr	r2, [pc, #28]	@ (8000e30 <HAL_Init+0x20>)
{
 8000e12:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e16:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	f043 0310 	orr.w	r3, r3, #16
 8000e1c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1e:	f000 f81b 	bl	8000e58 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff ffd0 	bl	8000dc8 <HAL_InitTick>
  HAL_MspInit();
 8000e28:	f7ff fd5e 	bl	80008e8 <HAL_MspInit>
}
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	bd08      	pop	{r3, pc}
 8000e30:	40022000 	.word	0x40022000

08000e34 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e34:	4a03      	ldr	r2, [pc, #12]	@ (8000e44 <HAL_IncTick+0x10>)
 8000e36:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <HAL_IncTick+0x14>)
 8000e38:	6811      	ldr	r1, [r2, #0]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	440b      	add	r3, r1
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000ae0 	.word	0x20000ae0
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e4c:	4b01      	ldr	r3, [pc, #4]	@ (8000e54 <HAL_GetTick+0x8>)
 8000e4e:	6818      	ldr	r0, [r3, #0]
}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000ae0 	.word	0x20000ae0

08000e58 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4907      	ldr	r1, [pc, #28]	@ (8000e78 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e5a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e5e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000e66:	0412      	lsls	r2, r2, #16
 8000e68:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000e74:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b15      	ldr	r3, [pc, #84]	@ (8000ed4 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7e:	b530      	push	{r4, r5, lr}
 8000e80:	68dc      	ldr	r4, [r3, #12]
 8000e82:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e86:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	bf28      	it	cs
 8000e90:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e98:	bf94      	ite	ls
 8000e9a:	2400      	movls	r4, #0
 8000e9c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9e:	fa05 f303 	lsl.w	r3, r5, r3
 8000ea2:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea6:	40a5      	lsls	r5, r4
 8000ea8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000eae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	bfac      	ite	ge
 8000eb6:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	4a07      	ldrlt	r2, [pc, #28]	@ (8000ed8 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	bfab      	itete	ge
 8000ec4:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ed2:	bd30      	pop	{r4, r5, pc}
 8000ed4:	e000ed00 	.word	0xe000ed00
 8000ed8:	e000ed14 	.word	0xe000ed14

08000edc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000edc:	2800      	cmp	r0, #0
 8000ede:	db07      	blt.n	8000ef0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	0941      	lsrs	r1, r0, #5
 8000ee4:	4a03      	ldr	r2, [pc, #12]	@ (8000ef4 <HAL_NVIC_EnableIRQ+0x18>)
 8000ee6:	f000 001f 	and.w	r0, r0, #31
 8000eea:	4083      	lsls	r3, r0
 8000eec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e100 	.word	0xe000e100

08000ef8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef8:	3801      	subs	r0, #1
 8000efa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000efe:	d20b      	bcs.n	8000f18 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f00:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	21f0      	movs	r1, #240	@ 0xf0
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f08:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f10:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f12:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f14:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f16:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f18:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f24:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000f26:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f28:	f8df c188 	ldr.w	ip, [pc, #392]	@ 80010b4 <HAL_GPIO_Init+0x194>
 8000f2c:	4b62      	ldr	r3, [pc, #392]	@ (80010b8 <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 8000f2e:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 80010bc <HAL_GPIO_Init+0x19c>
 8000f32:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 80010c0 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f36:	680a      	ldr	r2, [r1, #0]
 8000f38:	fa32 f506 	lsrs.w	r5, r2, r6
 8000f3c:	d102      	bne.n	8000f44 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8000f3e:	b003      	add	sp, #12
 8000f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000f44:	2701      	movs	r7, #1
 8000f46:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f48:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8000f4c:	ea37 0202 	bics.w	r2, r7, r2
 8000f50:	d17a      	bne.n	8001048 <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 8000f52:	684a      	ldr	r2, [r1, #4]
 8000f54:	2a03      	cmp	r2, #3
 8000f56:	d807      	bhi.n	8000f68 <HAL_GPIO_Init+0x48>
 8000f58:	3a01      	subs	r2, #1
 8000f5a:	2a02      	cmp	r2, #2
 8000f5c:	f200 8083 	bhi.w	8001066 <HAL_GPIO_Init+0x146>
 8000f60:	e8df f002 	tbb	[pc, r2]
 8000f64:	9792      	.short	0x9792
 8000f66:	9d          	.byte	0x9d
 8000f67:	00          	.byte	0x00
 8000f68:	2a12      	cmp	r2, #18
 8000f6a:	f000 8095 	beq.w	8001098 <HAL_GPIO_Init+0x178>
 8000f6e:	d86d      	bhi.n	800104c <HAL_GPIO_Init+0x12c>
 8000f70:	2a11      	cmp	r2, #17
 8000f72:	f000 808b 	beq.w	800108c <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f76:	2dff      	cmp	r5, #255	@ 0xff
 8000f78:	bf98      	it	ls
 8000f7a:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f7c:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f80:	bf88      	it	hi
 8000f82:	f100 0904 	addhi.w	r9, r0, #4
 8000f86:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f8a:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f8e:	bf88      	it	hi
 8000f90:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f92:	fa0b fa02 	lsl.w	sl, fp, r2
 8000f96:	ea27 070a 	bic.w	r7, r7, sl
 8000f9a:	fa04 f202 	lsl.w	r2, r4, r2
 8000f9e:	4317      	orrs	r7, r2
 8000fa0:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa4:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8000fa8:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8000fac:	d04c      	beq.n	8001048 <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fae:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8000fb2:	f026 0703 	bic.w	r7, r6, #3
 8000fb6:	f042 0201 	orr.w	r2, r2, #1
 8000fba:	f8cc 2018 	str.w	r2, [ip, #24]
 8000fbe:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8000fc2:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8000fc6:	f002 0201 	and.w	r2, r2, #1
 8000fca:	9201      	str	r2, [sp, #4]
 8000fcc:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fd0:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd4:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fd6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000fda:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fdc:	fa0b fb0a 	lsl.w	fp, fp, sl
 8000fe0:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fe4:	4a37      	ldr	r2, [pc, #220]	@ (80010c4 <HAL_GPIO_Init+0x1a4>)
 8000fe6:	4290      	cmp	r0, r2
 8000fe8:	d05d      	beq.n	80010a6 <HAL_GPIO_Init+0x186>
 8000fea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000fee:	4290      	cmp	r0, r2
 8000ff0:	d05b      	beq.n	80010aa <HAL_GPIO_Init+0x18a>
 8000ff2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000ff6:	4290      	cmp	r0, r2
 8000ff8:	d059      	beq.n	80010ae <HAL_GPIO_Init+0x18e>
 8000ffa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000ffe:	4290      	cmp	r0, r2
 8001000:	bf14      	ite	ne
 8001002:	2204      	movne	r2, #4
 8001004:	2203      	moveq	r2, #3
 8001006:	fa02 f20a 	lsl.w	r2, r2, sl
 800100a:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 800100e:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001010:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001012:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001016:	bf14      	ite	ne
 8001018:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800101a:	43aa      	biceq	r2, r5
 800101c:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800101e:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001020:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001024:	bf14      	ite	ne
 8001026:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001028:	43aa      	biceq	r2, r5
 800102a:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800102c:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800102e:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001032:	bf14      	ite	ne
 8001034:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001036:	43aa      	biceq	r2, r5
 8001038:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 800103a:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103c:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001040:	bf14      	ite	ne
 8001042:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001044:	43aa      	biceq	r2, r5
 8001046:	601a      	str	r2, [r3, #0]
	position++;
 8001048:	3601      	adds	r6, #1
 800104a:	e774      	b.n	8000f36 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 800104c:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 80010c8 <HAL_GPIO_Init+0x1a8>
 8001050:	454a      	cmp	r2, r9
 8001052:	d008      	beq.n	8001066 <HAL_GPIO_Init+0x146>
 8001054:	d810      	bhi.n	8001078 <HAL_GPIO_Init+0x158>
 8001056:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 800105a:	454a      	cmp	r2, r9
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x146>
 800105e:	4572      	cmp	r2, lr
 8001060:	d001      	beq.n	8001066 <HAL_GPIO_Init+0x146>
 8001062:	4542      	cmp	r2, r8
 8001064:	d187      	bne.n	8000f76 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001066:	688a      	ldr	r2, [r1, #8]
 8001068:	b1da      	cbz	r2, 80010a2 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800106a:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800106c:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8001070:	bf0c      	ite	eq
 8001072:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8001074:	6147      	strne	r7, [r0, #20]
 8001076:	e77e      	b.n	8000f76 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8001078:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 80010cc <HAL_GPIO_Init+0x1ac>
 800107c:	454a      	cmp	r2, r9
 800107e:	d0f2      	beq.n	8001066 <HAL_GPIO_Init+0x146>
 8001080:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8001084:	454a      	cmp	r2, r9
 8001086:	e7ed      	b.n	8001064 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001088:	68cc      	ldr	r4, [r1, #12]
          break;
 800108a:	e774      	b.n	8000f76 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800108c:	68cc      	ldr	r4, [r1, #12]
 800108e:	3404      	adds	r4, #4
          break;
 8001090:	e771      	b.n	8000f76 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001092:	68cc      	ldr	r4, [r1, #12]
 8001094:	3408      	adds	r4, #8
          break;
 8001096:	e76e      	b.n	8000f76 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001098:	68cc      	ldr	r4, [r1, #12]
 800109a:	340c      	adds	r4, #12
          break;
 800109c:	e76b      	b.n	8000f76 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 800109e:	2400      	movs	r4, #0
 80010a0:	e769      	b.n	8000f76 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010a2:	2404      	movs	r4, #4
 80010a4:	e767      	b.n	8000f76 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010a6:	2200      	movs	r2, #0
 80010a8:	e7ad      	b.n	8001006 <HAL_GPIO_Init+0xe6>
 80010aa:	2201      	movs	r2, #1
 80010ac:	e7ab      	b.n	8001006 <HAL_GPIO_Init+0xe6>
 80010ae:	2202      	movs	r2, #2
 80010b0:	e7a9      	b.n	8001006 <HAL_GPIO_Init+0xe6>
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010400 	.word	0x40010400
 80010bc:	10210000 	.word	0x10210000
 80010c0:	10110000 	.word	0x10110000
 80010c4:	40010800 	.word	0x40010800
 80010c8:	10220000 	.word	0x10220000
 80010cc:	10310000 	.word	0x10310000

080010d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010d0:	6883      	ldr	r3, [r0, #8]
 80010d2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80010d4:	bf14      	ite	ne
 80010d6:	2001      	movne	r0, #1
 80010d8:	2000      	moveq	r0, #0
 80010da:	4770      	bx	lr

080010dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010dc:	b10a      	cbz	r2, 80010e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010de:	6101      	str	r1, [r0, #16]
  }
}
 80010e0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010e2:	0409      	lsls	r1, r1, #16
 80010e4:	e7fb      	b.n	80010de <HAL_GPIO_WritePin+0x2>

080010e6 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010e6:	4770      	bx	lr

080010e8 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010e8:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80010ea:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010ec:	6951      	ldr	r1, [r2, #20]
 80010ee:	4201      	tst	r1, r0
 80010f0:	d002      	beq.n	80010f8 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010f2:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010f4:	f7ff fff7 	bl	80010e6 <HAL_GPIO_EXTI_Callback>
}
 80010f8:	bd08      	pop	{r3, pc}
 80010fa:	bf00      	nop
 80010fc:	40010400 	.word	0x40010400

08001100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001100:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001104:	4605      	mov	r5, r0
 8001106:	b338      	cbz	r0, 8001158 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001108:	6803      	ldr	r3, [r0, #0]
 800110a:	07db      	lsls	r3, r3, #31
 800110c:	d410      	bmi.n	8001130 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800110e:	682b      	ldr	r3, [r5, #0]
 8001110:	079f      	lsls	r7, r3, #30
 8001112:	d45e      	bmi.n	80011d2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	0719      	lsls	r1, r3, #28
 8001118:	f100 8095 	bmi.w	8001246 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800111c:	682b      	ldr	r3, [r5, #0]
 800111e:	075a      	lsls	r2, r3, #29
 8001120:	f100 80c1 	bmi.w	80012a6 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001124:	69eb      	ldr	r3, [r5, #28]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f040 812c 	bne.w	8001384 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800112c:	2000      	movs	r0, #0
 800112e:	e029      	b.n	8001184 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001130:	4c90      	ldr	r4, [pc, #576]	@ (8001374 <HAL_RCC_OscConfig+0x274>)
 8001132:	6863      	ldr	r3, [r4, #4]
 8001134:	f003 030c 	and.w	r3, r3, #12
 8001138:	2b04      	cmp	r3, #4
 800113a:	d007      	beq.n	800114c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800113c:	6863      	ldr	r3, [r4, #4]
 800113e:	f003 030c 	and.w	r3, r3, #12
 8001142:	2b08      	cmp	r3, #8
 8001144:	d10a      	bne.n	800115c <HAL_RCC_OscConfig+0x5c>
 8001146:	6863      	ldr	r3, [r4, #4]
 8001148:	03de      	lsls	r6, r3, #15
 800114a:	d507      	bpl.n	800115c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	039c      	lsls	r4, r3, #14
 8001150:	d5dd      	bpl.n	800110e <HAL_RCC_OscConfig+0xe>
 8001152:	686b      	ldr	r3, [r5, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1da      	bne.n	800110e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8001158:	2001      	movs	r0, #1
 800115a:	e013      	b.n	8001184 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115c:	686b      	ldr	r3, [r5, #4]
 800115e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001162:	d112      	bne.n	800118a <HAL_RCC_OscConfig+0x8a>
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800116a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800116c:	f7ff fe6e 	bl	8000e4c <HAL_GetTick>
 8001170:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	0398      	lsls	r0, r3, #14
 8001176:	d4ca      	bmi.n	800110e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001178:	f7ff fe68 	bl	8000e4c <HAL_GetTick>
 800117c:	1b80      	subs	r0, r0, r6
 800117e:	2864      	cmp	r0, #100	@ 0x64
 8001180:	d9f7      	bls.n	8001172 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001182:	2003      	movs	r0, #3
}
 8001184:	b002      	add	sp, #8
 8001186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800118a:	b99b      	cbnz	r3, 80011b4 <HAL_RCC_OscConfig+0xb4>
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001192:	6023      	str	r3, [r4, #0]
 8001194:	6823      	ldr	r3, [r4, #0]
 8001196:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800119a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800119c:	f7ff fe56 	bl	8000e4c <HAL_GetTick>
 80011a0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	0399      	lsls	r1, r3, #14
 80011a6:	d5b2      	bpl.n	800110e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fe50 	bl	8000e4c <HAL_GetTick>
 80011ac:	1b80      	subs	r0, r0, r6
 80011ae:	2864      	cmp	r0, #100	@ 0x64
 80011b0:	d9f7      	bls.n	80011a2 <HAL_RCC_OscConfig+0xa2>
 80011b2:	e7e6      	b.n	8001182 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	d103      	bne.n	80011c4 <HAL_RCC_OscConfig+0xc4>
 80011bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011c0:	6023      	str	r3, [r4, #0]
 80011c2:	e7cf      	b.n	8001164 <HAL_RCC_OscConfig+0x64>
 80011c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011c8:	6023      	str	r3, [r4, #0]
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011d0:	e7cb      	b.n	800116a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011d2:	4c68      	ldr	r4, [pc, #416]	@ (8001374 <HAL_RCC_OscConfig+0x274>)
 80011d4:	6863      	ldr	r3, [r4, #4]
 80011d6:	f013 0f0c 	tst.w	r3, #12
 80011da:	d007      	beq.n	80011ec <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011dc:	6863      	ldr	r3, [r4, #4]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b08      	cmp	r3, #8
 80011e4:	d110      	bne.n	8001208 <HAL_RCC_OscConfig+0x108>
 80011e6:	6863      	ldr	r3, [r4, #4]
 80011e8:	03da      	lsls	r2, r3, #15
 80011ea:	d40d      	bmi.n	8001208 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	079b      	lsls	r3, r3, #30
 80011f0:	d502      	bpl.n	80011f8 <HAL_RCC_OscConfig+0xf8>
 80011f2:	692b      	ldr	r3, [r5, #16]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d1af      	bne.n	8001158 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f8:	6823      	ldr	r3, [r4, #0]
 80011fa:	696a      	ldr	r2, [r5, #20]
 80011fc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001200:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001204:	6023      	str	r3, [r4, #0]
 8001206:	e785      	b.n	8001114 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001208:	692a      	ldr	r2, [r5, #16]
 800120a:	4b5b      	ldr	r3, [pc, #364]	@ (8001378 <HAL_RCC_OscConfig+0x278>)
 800120c:	b16a      	cbz	r2, 800122a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800120e:	2201      	movs	r2, #1
 8001210:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001212:	f7ff fe1b 	bl	8000e4c <HAL_GetTick>
 8001216:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	079f      	lsls	r7, r3, #30
 800121c:	d4ec      	bmi.n	80011f8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121e:	f7ff fe15 	bl	8000e4c <HAL_GetTick>
 8001222:	1b80      	subs	r0, r0, r6
 8001224:	2802      	cmp	r0, #2
 8001226:	d9f7      	bls.n	8001218 <HAL_RCC_OscConfig+0x118>
 8001228:	e7ab      	b.n	8001182 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800122a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800122c:	f7ff fe0e 	bl	8000e4c <HAL_GetTick>
 8001230:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	6823      	ldr	r3, [r4, #0]
 8001234:	0798      	lsls	r0, r3, #30
 8001236:	f57f af6d 	bpl.w	8001114 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123a:	f7ff fe07 	bl	8000e4c <HAL_GetTick>
 800123e:	1b80      	subs	r0, r0, r6
 8001240:	2802      	cmp	r0, #2
 8001242:	d9f6      	bls.n	8001232 <HAL_RCC_OscConfig+0x132>
 8001244:	e79d      	b.n	8001182 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001246:	69aa      	ldr	r2, [r5, #24]
 8001248:	4e4a      	ldr	r6, [pc, #296]	@ (8001374 <HAL_RCC_OscConfig+0x274>)
 800124a:	4b4b      	ldr	r3, [pc, #300]	@ (8001378 <HAL_RCC_OscConfig+0x278>)
 800124c:	b1e2      	cbz	r2, 8001288 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800124e:	2201      	movs	r2, #1
 8001250:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001254:	f7ff fdfa 	bl	8000e4c <HAL_GetTick>
 8001258:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800125c:	079b      	lsls	r3, r3, #30
 800125e:	d50d      	bpl.n	800127c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001260:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001264:	4b45      	ldr	r3, [pc, #276]	@ (800137c <HAL_RCC_OscConfig+0x27c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	fbb3 f3f2 	udiv	r3, r3, r2
 800126c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800126e:	bf00      	nop
  }
  while (Delay --);
 8001270:	9b01      	ldr	r3, [sp, #4]
 8001272:	1e5a      	subs	r2, r3, #1
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f9      	bne.n	800126e <HAL_RCC_OscConfig+0x16e>
 800127a:	e74f      	b.n	800111c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127c:	f7ff fde6 	bl	8000e4c <HAL_GetTick>
 8001280:	1b00      	subs	r0, r0, r4
 8001282:	2802      	cmp	r0, #2
 8001284:	d9e9      	bls.n	800125a <HAL_RCC_OscConfig+0x15a>
 8001286:	e77c      	b.n	8001182 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001288:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800128c:	f7ff fdde 	bl	8000e4c <HAL_GetTick>
 8001290:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001292:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001294:	079f      	lsls	r7, r3, #30
 8001296:	f57f af41 	bpl.w	800111c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800129a:	f7ff fdd7 	bl	8000e4c <HAL_GetTick>
 800129e:	1b00      	subs	r0, r0, r4
 80012a0:	2802      	cmp	r0, #2
 80012a2:	d9f6      	bls.n	8001292 <HAL_RCC_OscConfig+0x192>
 80012a4:	e76d      	b.n	8001182 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a6:	4c33      	ldr	r4, [pc, #204]	@ (8001374 <HAL_RCC_OscConfig+0x274>)
 80012a8:	69e3      	ldr	r3, [r4, #28]
 80012aa:	00d8      	lsls	r0, r3, #3
 80012ac:	d424      	bmi.n	80012f8 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80012ae:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b0:	69e3      	ldr	r3, [r4, #28]
 80012b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b6:	61e3      	str	r3, [r4, #28]
 80012b8:	69e3      	ldr	r3, [r4, #28]
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c2:	4e2f      	ldr	r6, [pc, #188]	@ (8001380 <HAL_RCC_OscConfig+0x280>)
 80012c4:	6833      	ldr	r3, [r6, #0]
 80012c6:	05d9      	lsls	r1, r3, #23
 80012c8:	d518      	bpl.n	80012fc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ca:	68eb      	ldr	r3, [r5, #12]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d126      	bne.n	800131e <HAL_RCC_OscConfig+0x21e>
 80012d0:	6a23      	ldr	r3, [r4, #32]
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80012d8:	f7ff fdb8 	bl	8000e4c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012dc:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80012e0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e2:	6a23      	ldr	r3, [r4, #32]
 80012e4:	079b      	lsls	r3, r3, #30
 80012e6:	d53f      	bpl.n	8001368 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80012e8:	2f00      	cmp	r7, #0
 80012ea:	f43f af1b 	beq.w	8001124 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ee:	69e3      	ldr	r3, [r4, #28]
 80012f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012f4:	61e3      	str	r3, [r4, #28]
 80012f6:	e715      	b.n	8001124 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80012f8:	2700      	movs	r7, #0
 80012fa:	e7e2      	b.n	80012c2 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012fc:	6833      	ldr	r3, [r6, #0]
 80012fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001302:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001304:	f7ff fda2 	bl	8000e4c <HAL_GetTick>
 8001308:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	6833      	ldr	r3, [r6, #0]
 800130c:	05da      	lsls	r2, r3, #23
 800130e:	d4dc      	bmi.n	80012ca <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001310:	f7ff fd9c 	bl	8000e4c <HAL_GetTick>
 8001314:	eba0 0008 	sub.w	r0, r0, r8
 8001318:	2864      	cmp	r0, #100	@ 0x64
 800131a:	d9f6      	bls.n	800130a <HAL_RCC_OscConfig+0x20a>
 800131c:	e731      	b.n	8001182 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131e:	b9ab      	cbnz	r3, 800134c <HAL_RCC_OscConfig+0x24c>
 8001320:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001322:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001326:	f023 0301 	bic.w	r3, r3, #1
 800132a:	6223      	str	r3, [r4, #32]
 800132c:	6a23      	ldr	r3, [r4, #32]
 800132e:	f023 0304 	bic.w	r3, r3, #4
 8001332:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001334:	f7ff fd8a 	bl	8000e4c <HAL_GetTick>
 8001338:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133a:	6a23      	ldr	r3, [r4, #32]
 800133c:	0798      	lsls	r0, r3, #30
 800133e:	d5d3      	bpl.n	80012e8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001340:	f7ff fd84 	bl	8000e4c <HAL_GetTick>
 8001344:	1b80      	subs	r0, r0, r6
 8001346:	4540      	cmp	r0, r8
 8001348:	d9f7      	bls.n	800133a <HAL_RCC_OscConfig+0x23a>
 800134a:	e71a      	b.n	8001182 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134c:	2b05      	cmp	r3, #5
 800134e:	6a23      	ldr	r3, [r4, #32]
 8001350:	d103      	bne.n	800135a <HAL_RCC_OscConfig+0x25a>
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6223      	str	r3, [r4, #32]
 8001358:	e7ba      	b.n	80012d0 <HAL_RCC_OscConfig+0x1d0>
 800135a:	f023 0301 	bic.w	r3, r3, #1
 800135e:	6223      	str	r3, [r4, #32]
 8001360:	6a23      	ldr	r3, [r4, #32]
 8001362:	f023 0304 	bic.w	r3, r3, #4
 8001366:	e7b6      	b.n	80012d6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001368:	f7ff fd70 	bl	8000e4c <HAL_GetTick>
 800136c:	1b80      	subs	r0, r0, r6
 800136e:	4540      	cmp	r0, r8
 8001370:	d9b7      	bls.n	80012e2 <HAL_RCC_OscConfig+0x1e2>
 8001372:	e706      	b.n	8001182 <HAL_RCC_OscConfig+0x82>
 8001374:	40021000 	.word	0x40021000
 8001378:	42420000 	.word	0x42420000
 800137c:	20000000 	.word	0x20000000
 8001380:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001384:	4c2a      	ldr	r4, [pc, #168]	@ (8001430 <HAL_RCC_OscConfig+0x330>)
 8001386:	6862      	ldr	r2, [r4, #4]
 8001388:	f002 020c 	and.w	r2, r2, #12
 800138c:	2a08      	cmp	r2, #8
 800138e:	d03e      	beq.n	800140e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001390:	2200      	movs	r2, #0
 8001392:	2b02      	cmp	r3, #2
 8001394:	4b27      	ldr	r3, [pc, #156]	@ (8001434 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8001396:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001398:	d12c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800139a:	f7ff fd57 	bl	8000e4c <HAL_GetTick>
 800139e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a0:	6823      	ldr	r3, [r4, #0]
 80013a2:	0199      	lsls	r1, r3, #6
 80013a4:	d420      	bmi.n	80013e8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013a6:	6a2b      	ldr	r3, [r5, #32]
 80013a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013ac:	d105      	bne.n	80013ba <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013ae:	6862      	ldr	r2, [r4, #4]
 80013b0:	68a9      	ldr	r1, [r5, #8]
 80013b2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80013b6:	430a      	orrs	r2, r1
 80013b8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ba:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80013bc:	6862      	ldr	r2, [r4, #4]
 80013be:	430b      	orrs	r3, r1
 80013c0:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 80013c4:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80013c6:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80013ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001434 <HAL_RCC_OscConfig+0x334>)
 80013cc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80013ce:	f7ff fd3d 	bl	8000e4c <HAL_GetTick>
 80013d2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	019a      	lsls	r2, r3, #6
 80013d8:	f53f aea8 	bmi.w	800112c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013dc:	f7ff fd36 	bl	8000e4c <HAL_GetTick>
 80013e0:	1b40      	subs	r0, r0, r5
 80013e2:	2802      	cmp	r0, #2
 80013e4:	d9f6      	bls.n	80013d4 <HAL_RCC_OscConfig+0x2d4>
 80013e6:	e6cc      	b.n	8001182 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e8:	f7ff fd30 	bl	8000e4c <HAL_GetTick>
 80013ec:	1b80      	subs	r0, r0, r6
 80013ee:	2802      	cmp	r0, #2
 80013f0:	d9d6      	bls.n	80013a0 <HAL_RCC_OscConfig+0x2a0>
 80013f2:	e6c6      	b.n	8001182 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80013f4:	f7ff fd2a 	bl	8000e4c <HAL_GetTick>
 80013f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	019b      	lsls	r3, r3, #6
 80013fe:	f57f ae95 	bpl.w	800112c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001402:	f7ff fd23 	bl	8000e4c <HAL_GetTick>
 8001406:	1b40      	subs	r0, r0, r5
 8001408:	2802      	cmp	r0, #2
 800140a:	d9f6      	bls.n	80013fa <HAL_RCC_OscConfig+0x2fa>
 800140c:	e6b9      	b.n	8001182 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800140e:	2b01      	cmp	r3, #1
 8001410:	f43f aea2 	beq.w	8001158 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8001414:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001416:	6a2b      	ldr	r3, [r5, #32]
 8001418:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 800141c:	429a      	cmp	r2, r3
 800141e:	f47f ae9b 	bne.w	8001158 <HAL_RCC_OscConfig+0x58>
 8001422:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001424:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001428:	1ac0      	subs	r0, r0, r3
 800142a:	bf18      	it	ne
 800142c:	2001      	movne	r0, #1
 800142e:	e6a9      	b.n	8001184 <HAL_RCC_OscConfig+0x84>
 8001430:	40021000 	.word	0x40021000
 8001434:	42420000 	.word	0x42420000

08001438 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001438:	4a0d      	ldr	r2, [pc, #52]	@ (8001470 <HAL_RCC_GetSysClockFreq+0x38>)
 800143a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800143c:	f003 010c 	and.w	r1, r3, #12
 8001440:	2908      	cmp	r1, #8
 8001442:	d112      	bne.n	800146a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001444:	480b      	ldr	r0, [pc, #44]	@ (8001474 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001446:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800144a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800144c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800144e:	d509      	bpl.n	8001464 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001450:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001452:	4a09      	ldr	r2, [pc, #36]	@ (8001478 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001454:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001458:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800145a:	4a08      	ldr	r2, [pc, #32]	@ (800147c <HAL_RCC_GetSysClockFreq+0x44>)
 800145c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800145e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001462:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_RCC_GetSysClockFreq+0x48>)
 8001466:	4358      	muls	r0, r3
 8001468:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800146a:	4803      	ldr	r0, [pc, #12]	@ (8001478 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	080030bb 	.word	0x080030bb
 8001478:	007a1200 	.word	0x007a1200
 800147c:	080030b9 	.word	0x080030b9
 8001480:	003d0900 	.word	0x003d0900

08001484 <HAL_RCC_ClockConfig>:
{
 8001484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001488:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800148a:	4604      	mov	r4, r0
 800148c:	b910      	cbnz	r0, 8001494 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800148e:	2001      	movs	r0, #1
}
 8001490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001494:	4a44      	ldr	r2, [pc, #272]	@ (80015a8 <HAL_RCC_ClockConfig+0x124>)
 8001496:	6813      	ldr	r3, [r2, #0]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	428b      	cmp	r3, r1
 800149e:	d328      	bcc.n	80014f2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a0:	6821      	ldr	r1, [r4, #0]
 80014a2:	078e      	lsls	r6, r1, #30
 80014a4:	d430      	bmi.n	8001508 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a6:	07ca      	lsls	r2, r1, #31
 80014a8:	d443      	bmi.n	8001532 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014aa:	4a3f      	ldr	r2, [pc, #252]	@ (80015a8 <HAL_RCC_ClockConfig+0x124>)
 80014ac:	6813      	ldr	r3, [r2, #0]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	42ab      	cmp	r3, r5
 80014b4:	d865      	bhi.n	8001582 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b6:	6822      	ldr	r2, [r4, #0]
 80014b8:	4d3c      	ldr	r5, [pc, #240]	@ (80015ac <HAL_RCC_ClockConfig+0x128>)
 80014ba:	f012 0f04 	tst.w	r2, #4
 80014be:	d16c      	bne.n	800159a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c0:	0713      	lsls	r3, r2, #28
 80014c2:	d506      	bpl.n	80014d2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014c4:	686b      	ldr	r3, [r5, #4]
 80014c6:	6922      	ldr	r2, [r4, #16]
 80014c8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80014cc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014d0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014d2:	f7ff ffb1 	bl	8001438 <HAL_RCC_GetSysClockFreq>
 80014d6:	686b      	ldr	r3, [r5, #4]
 80014d8:	4a35      	ldr	r2, [pc, #212]	@ (80015b0 <HAL_RCC_ClockConfig+0x12c>)
 80014da:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014de:	5cd3      	ldrb	r3, [r2, r3]
 80014e0:	40d8      	lsrs	r0, r3
 80014e2:	4b34      	ldr	r3, [pc, #208]	@ (80015b4 <HAL_RCC_ClockConfig+0x130>)
 80014e4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80014e6:	4b34      	ldr	r3, [pc, #208]	@ (80015b8 <HAL_RCC_ClockConfig+0x134>)
 80014e8:	6818      	ldr	r0, [r3, #0]
 80014ea:	f7ff fc6d 	bl	8000dc8 <HAL_InitTick>
  return HAL_OK;
 80014ee:	2000      	movs	r0, #0
 80014f0:	e7ce      	b.n	8001490 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f2:	6813      	ldr	r3, [r2, #0]
 80014f4:	f023 0307 	bic.w	r3, r3, #7
 80014f8:	430b      	orrs	r3, r1
 80014fa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fc:	6813      	ldr	r3, [r2, #0]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	428b      	cmp	r3, r1
 8001504:	d1c3      	bne.n	800148e <HAL_RCC_ClockConfig+0xa>
 8001506:	e7cb      	b.n	80014a0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001508:	4b28      	ldr	r3, [pc, #160]	@ (80015ac <HAL_RCC_ClockConfig+0x128>)
 800150a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800150e:	bf1e      	ittt	ne
 8001510:	685a      	ldrne	r2, [r3, #4]
 8001512:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8001516:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001518:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800151a:	bf42      	ittt	mi
 800151c:	685a      	ldrmi	r2, [r3, #4]
 800151e:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8001522:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	68a0      	ldr	r0, [r4, #8]
 8001528:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800152c:	4302      	orrs	r2, r0
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	e7b9      	b.n	80014a6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001532:	6862      	ldr	r2, [r4, #4]
 8001534:	4e1d      	ldr	r6, [pc, #116]	@ (80015ac <HAL_RCC_ClockConfig+0x128>)
 8001536:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001538:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153a:	d11a      	bne.n	8001572 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001540:	d0a5      	beq.n	800148e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001542:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001544:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001548:	f023 0303 	bic.w	r3, r3, #3
 800154c:	4313      	orrs	r3, r2
 800154e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001550:	f7ff fc7c 	bl	8000e4c <HAL_GetTick>
 8001554:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001556:	6873      	ldr	r3, [r6, #4]
 8001558:	6862      	ldr	r2, [r4, #4]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001562:	d0a2      	beq.n	80014aa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001564:	f7ff fc72 	bl	8000e4c <HAL_GetTick>
 8001568:	1bc0      	subs	r0, r0, r7
 800156a:	4540      	cmp	r0, r8
 800156c:	d9f3      	bls.n	8001556 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800156e:	2003      	movs	r0, #3
 8001570:	e78e      	b.n	8001490 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001572:	2a02      	cmp	r2, #2
 8001574:	d102      	bne.n	800157c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001576:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800157a:	e7e1      	b.n	8001540 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157c:	f013 0f02 	tst.w	r3, #2
 8001580:	e7de      	b.n	8001540 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	6813      	ldr	r3, [r2, #0]
 8001584:	f023 0307 	bic.w	r3, r3, #7
 8001588:	432b      	orrs	r3, r5
 800158a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800158c:	6813      	ldr	r3, [r2, #0]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	42ab      	cmp	r3, r5
 8001594:	f47f af7b 	bne.w	800148e <HAL_RCC_ClockConfig+0xa>
 8001598:	e78d      	b.n	80014b6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800159a:	686b      	ldr	r3, [r5, #4]
 800159c:	68e1      	ldr	r1, [r4, #12]
 800159e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80015a2:	430b      	orrs	r3, r1
 80015a4:	606b      	str	r3, [r5, #4]
 80015a6:	e78b      	b.n	80014c0 <HAL_RCC_ClockConfig+0x3c>
 80015a8:	40022000 	.word	0x40022000
 80015ac:	40021000 	.word	0x40021000
 80015b0:	08002f8b 	.word	0x08002f8b
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000008 	.word	0x20000008

080015bc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015bc:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80015c6:	5cd3      	ldrb	r3, [r2, r3]
 80015c8:	4a03      	ldr	r2, [pc, #12]	@ (80015d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015ca:	6810      	ldr	r0, [r2, #0]
}
 80015cc:	40d8      	lsrs	r0, r3
 80015ce:	4770      	bx	lr
 80015d0:	40021000 	.word	0x40021000
 80015d4:	08002f83 	.word	0x08002f83
 80015d8:	20000000 	.word	0x20000000

080015dc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015dc:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80015de:	4a05      	ldr	r2, [pc, #20]	@ (80015f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80015e6:	5cd3      	ldrb	r3, [r2, r3]
 80015e8:	4a03      	ldr	r2, [pc, #12]	@ (80015f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015ea:	6810      	ldr	r0, [r2, #0]
}
 80015ec:	40d8      	lsrs	r0, r3
 80015ee:	4770      	bx	lr
 80015f0:	40021000 	.word	0x40021000
 80015f4:	08002f83 	.word	0x08002f83
 80015f8:	20000000 	.word	0x20000000

080015fc <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015fc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001600:	2b01      	cmp	r3, #1
 8001602:	d11c      	bne.n	800163e <HAL_TIM_Base_Start+0x42>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001604:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001606:	4a0f      	ldr	r2, [pc, #60]	@ (8001644 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001608:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800160c:	6803      	ldr	r3, [r0, #0]
 800160e:	4293      	cmp	r3, r2
 8001610:	d00a      	beq.n	8001628 <HAL_TIM_Base_Start+0x2c>
 8001612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001616:	d007      	beq.n	8001628 <HAL_TIM_Base_Start+0x2c>
 8001618:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800161c:	4293      	cmp	r3, r2
 800161e:	d003      	beq.n	8001628 <HAL_TIM_Base_Start+0x2c>
 8001620:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001624:	4293      	cmp	r3, r2
 8001626:	d104      	bne.n	8001632 <HAL_TIM_Base_Start+0x36>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800162e:	2a06      	cmp	r2, #6
 8001630:	d003      	beq.n	800163a <HAL_TIM_Base_Start+0x3e>
    {
      __HAL_TIM_ENABLE(htim);
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	f042 0201 	orr.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800163a:	2000      	movs	r0, #0
 800163c:	4770      	bx	lr
    return HAL_ERROR;
 800163e:	2001      	movs	r0, #1
}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40012c00 	.word	0x40012c00

08001648 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001648:	4a1e      	ldr	r2, [pc, #120]	@ (80016c4 <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 800164a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800164c:	4290      	cmp	r0, r2
 800164e:	d00a      	beq.n	8001666 <TIM_Base_SetConfig+0x1e>
 8001650:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001654:	d007      	beq.n	8001666 <TIM_Base_SetConfig+0x1e>
 8001656:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800165a:	4290      	cmp	r0, r2
 800165c:	d003      	beq.n	8001666 <TIM_Base_SetConfig+0x1e>
 800165e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001662:	4290      	cmp	r0, r2
 8001664:	d115      	bne.n	8001692 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001666:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800166c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800166e:	4a15      	ldr	r2, [pc, #84]	@ (80016c4 <TIM_Base_SetConfig+0x7c>)
 8001670:	4290      	cmp	r0, r2
 8001672:	d00a      	beq.n	800168a <TIM_Base_SetConfig+0x42>
 8001674:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001678:	d007      	beq.n	800168a <TIM_Base_SetConfig+0x42>
 800167a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800167e:	4290      	cmp	r0, r2
 8001680:	d003      	beq.n	800168a <TIM_Base_SetConfig+0x42>
 8001682:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001686:	4290      	cmp	r0, r2
 8001688:	d103      	bne.n	8001692 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800168a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800168c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001690:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001692:	694a      	ldr	r2, [r1, #20]
 8001694:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001698:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800169a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800169c:	688b      	ldr	r3, [r1, #8]
 800169e:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80016a0:	680b      	ldr	r3, [r1, #0]
 80016a2:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016a4:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <TIM_Base_SetConfig+0x7c>)
 80016a6:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80016a8:	bf04      	itt	eq
 80016aa:	690b      	ldreq	r3, [r1, #16]
 80016ac:	6303      	streq	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80016ae:	2301      	movs	r3, #1
 80016b0:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80016b2:	6903      	ldr	r3, [r0, #16]
 80016b4:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80016b6:	bf42      	ittt	mi
 80016b8:	6903      	ldrmi	r3, [r0, #16]
 80016ba:	f023 0301 	bicmi.w	r3, r3, #1
 80016be:	6103      	strmi	r3, [r0, #16]
  }
}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40012c00 	.word	0x40012c00

080016c8 <HAL_TIM_Base_Init>:
{
 80016c8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80016ca:	4604      	mov	r4, r0
 80016cc:	b330      	cbz	r0, 800171c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80016ce:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80016d2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80016d6:	b91b      	cbnz	r3, 80016e0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80016d8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80016dc:	f7ff f926 	bl	800092c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80016e0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016e2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80016e4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016e8:	1d21      	adds	r1, r4, #4
 80016ea:	f7ff ffad 	bl	8001648 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016ee:	2301      	movs	r3, #1
  return HAL_OK;
 80016f0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016f2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016f6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80016fa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80016fe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001702:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001706:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800170a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800170e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001712:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001716:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800171a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800171c:	2001      	movs	r0, #1
 800171e:	e7fc      	b.n	800171a <HAL_TIM_Base_Init+0x52>

08001720 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001720:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001722:	f102 030c 	add.w	r3, r2, #12
 8001726:	e853 3f00 	ldrex	r3, [r3]
 800172a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800172e:	320c      	adds	r2, #12
 8001730:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8001734:	6802      	ldr	r2, [r0, #0]
 8001736:	2900      	cmp	r1, #0
 8001738:	d1f2      	bne.n	8001720 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800173a:	f102 0314 	add.w	r3, r2, #20
 800173e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001742:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001746:	f102 0c14 	add.w	ip, r2, #20
 800174a:	e84c 3100 	strex	r1, r3, [ip]
 800174e:	2900      	cmp	r1, #0
 8001750:	d1f3      	bne.n	800173a <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001752:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001754:	2b01      	cmp	r3, #1
 8001756:	d10b      	bne.n	8001770 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001758:	f102 030c 	add.w	r3, r2, #12
 800175c:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001760:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001764:	f102 0c0c 	add.w	ip, r2, #12
 8001768:	e84c 3100 	strex	r1, r3, [ip]
 800176c:	2900      	cmp	r1, #0
 800176e:	d1f3      	bne.n	8001758 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001770:	2320      	movs	r3, #32
 8001772:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001776:	2300      	movs	r3, #0
 8001778:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800177a:	4770      	bx	lr

0800177c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800177c:	b510      	push	{r4, lr}
 800177e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001780:	6803      	ldr	r3, [r0, #0]
 8001782:	68c1      	ldr	r1, [r0, #12]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800178a:	430a      	orrs	r2, r1
 800178c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800178e:	6882      	ldr	r2, [r0, #8]
 8001790:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001792:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001794:	4302      	orrs	r2, r0
 8001796:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001798:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 800179c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017a0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80017a2:	430a      	orrs	r2, r1
 80017a4:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	69a1      	ldr	r1, [r4, #24]
 80017aa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80017ae:	430a      	orrs	r2, r1
 80017b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80017b2:	4a0e      	ldr	r2, [pc, #56]	@ (80017ec <UART_SetConfig+0x70>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d115      	bne.n	80017e4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80017b8:	f7ff ff10 	bl	80015dc <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017bc:	2319      	movs	r3, #25
 80017be:	4343      	muls	r3, r0
 80017c0:	6862      	ldr	r2, [r4, #4]
 80017c2:	6820      	ldr	r0, [r4, #0]
 80017c4:	0092      	lsls	r2, r2, #2
 80017c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80017ca:	2264      	movs	r2, #100	@ 0x64
 80017cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80017d0:	fb02 3311 	mls	r3, r2, r1, r3
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	3332      	adds	r3, #50	@ 0x32
 80017d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80017dc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80017e0:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80017e2:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80017e4:	f7ff feea 	bl	80015bc <HAL_RCC_GetPCLK1Freq>
 80017e8:	e7e8      	b.n	80017bc <UART_SetConfig+0x40>
 80017ea:	bf00      	nop
 80017ec:	40013800 	.word	0x40013800

080017f0 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80017f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017f2:	4605      	mov	r5, r0
 80017f4:	460c      	mov	r4, r1
 80017f6:	4617      	mov	r7, r2
 80017f8:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017fa:	682a      	ldr	r2, [r5, #0]
 80017fc:	6813      	ldr	r3, [r2, #0]
 80017fe:	ea34 0303 	bics.w	r3, r4, r3
 8001802:	d101      	bne.n	8001808 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8001804:	2000      	movs	r0, #0
 8001806:	e021      	b.n	800184c <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8001808:	1c70      	adds	r0, r6, #1
 800180a:	d0f7      	beq.n	80017fc <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800180c:	f7ff fb1e 	bl	8000e4c <HAL_GetTick>
 8001810:	1bc0      	subs	r0, r0, r7
 8001812:	4286      	cmp	r6, r0
 8001814:	d31c      	bcc.n	8001850 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 8001816:	b1de      	cbz	r6, 8001850 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001818:	682b      	ldr	r3, [r5, #0]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	0751      	lsls	r1, r2, #29
 800181e:	d5ec      	bpl.n	80017fa <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8001820:	2c80      	cmp	r4, #128	@ 0x80
 8001822:	d0ea      	beq.n	80017fa <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8001824:	2c40      	cmp	r4, #64	@ 0x40
 8001826:	d0e8      	beq.n	80017fa <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	0712      	lsls	r2, r2, #28
 800182c:	d5e5      	bpl.n	80017fa <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800182e:	2400      	movs	r4, #0
 8001830:	9401      	str	r4, [sp, #4]
 8001832:	681a      	ldr	r2, [r3, #0]
          UART_EndRxTransfer(huart);
 8001834:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001836:	9201      	str	r2, [sp, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800183e:	f7ff ff6f 	bl	8001720 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001842:	2308      	movs	r3, #8
          return HAL_ERROR;
 8001844:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001846:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8001848:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
}
 800184c:	b003      	add	sp, #12
 800184e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8001850:	2003      	movs	r0, #3
 8001852:	e7fb      	b.n	800184c <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

08001854 <HAL_UART_Init>:
{
 8001854:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001856:	4604      	mov	r4, r0
 8001858:	b348      	cbz	r0, 80018ae <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 800185a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800185e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001862:	b91b      	cbnz	r3, 800186c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001864:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001868:	f7ff f872 	bl	8000950 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800186c:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800186e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001870:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001874:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001876:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001878:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800187c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800187e:	f7ff ff7d 	bl	800177c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001882:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001884:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800188c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001894:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800189c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800189e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018a0:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80018a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80018a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80018aa:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80018ac:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018ae:	2001      	movs	r0, #1
 80018b0:	e7fc      	b.n	80018ac <HAL_UART_Init+0x58>

080018b2 <HAL_UART_Transmit>:
{
 80018b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018b6:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80018b8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80018bc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80018be:	2b20      	cmp	r3, #32
{
 80018c0:	460e      	mov	r6, r1
 80018c2:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80018c4:	d13f      	bne.n	8001946 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 80018c6:	2900      	cmp	r1, #0
 80018c8:	d03f      	beq.n	800194a <HAL_UART_Transmit+0x98>
 80018ca:	2a00      	cmp	r2, #0
 80018cc:	d03d      	beq.n	800194a <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018ce:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018d0:	2500      	movs	r5, #0
 80018d2:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018d4:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80018d8:	f7ff fab8 	bl	8000e4c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018dc:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80018de:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize = Size;
 80018e4:	84a7      	strh	r7, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80018e6:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018e8:	d103      	bne.n	80018f2 <HAL_UART_Transmit+0x40>
 80018ea:	6923      	ldr	r3, [r4, #16]
 80018ec:	b90b      	cbnz	r3, 80018f2 <HAL_UART_Transmit+0x40>
 80018ee:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80018f0:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80018f2:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	b953      	cbnz	r3, 800190e <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018f8:	4643      	mov	r3, r8
 80018fa:	464a      	mov	r2, r9
 80018fc:	2140      	movs	r1, #64	@ 0x40
 80018fe:	4620      	mov	r0, r4
 8001900:	f7ff ff76 	bl	80017f0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001904:	2320      	movs	r3, #32
 8001906:	b950      	cbnz	r0, 800191e <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8001908:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800190c:	e00a      	b.n	8001924 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800190e:	4643      	mov	r3, r8
 8001910:	464a      	mov	r2, r9
 8001912:	2180      	movs	r1, #128	@ 0x80
 8001914:	4620      	mov	r0, r4
 8001916:	f7ff ff6b 	bl	80017f0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800191a:	b128      	cbz	r0, 8001928 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 800191c:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800191e:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8001920:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 8001924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001928:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800192a:	b94e      	cbnz	r6, 8001940 <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800192c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001930:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001934:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001936:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 8001938:	3901      	subs	r1, #1
 800193a:	b289      	uxth	r1, r1
 800193c:	84e1      	strh	r1, [r4, #38]	@ 0x26
 800193e:	e7d8      	b.n	80018f2 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001940:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001944:	e7f6      	b.n	8001934 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001946:	2002      	movs	r0, #2
 8001948:	e7ec      	b.n	8001924 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 800194a:	2001      	movs	r0, #1
 800194c:	e7ea      	b.n	8001924 <HAL_UART_Transmit+0x72>

0800194e <HAL_UART_Receive>:
{
 800194e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001952:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001954:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
{
 8001958:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800195a:	2b20      	cmp	r3, #32
{
 800195c:	460e      	mov	r6, r1
 800195e:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001960:	d148      	bne.n	80019f4 <HAL_UART_Receive+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8001962:	2900      	cmp	r1, #0
 8001964:	d048      	beq.n	80019f8 <HAL_UART_Receive+0xaa>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d046      	beq.n	80019f8 <HAL_UART_Receive+0xaa>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800196a:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800196c:	2500      	movs	r5, #0
 800196e:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001970:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001974:	6305      	str	r5, [r0, #48]	@ 0x30
    tickstart = HAL_GetTick();
 8001976:	f7ff fa69 	bl	8000e4c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800197a:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800197c:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800197e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->RxXferSize = Size;
 8001982:	f8a4 902c 	strh.w	r9, [r4, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001986:	f8a4 902e 	strh.w	r9, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800198a:	d103      	bne.n	8001994 <HAL_UART_Receive+0x46>
 800198c:	6923      	ldr	r3, [r4, #16]
 800198e:	b90b      	cbnz	r3, 8001994 <HAL_UART_Receive+0x46>
 8001990:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001992:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 8001994:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
 8001996:	b280      	uxth	r0, r0
 8001998:	b918      	cbnz	r0, 80019a2 <HAL_UART_Receive+0x54>
    huart->RxState = HAL_UART_STATE_READY;
 800199a:	2320      	movs	r3, #32
 800199c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    return HAL_OK;
 80019a0:	e00a      	b.n	80019b8 <HAL_UART_Receive+0x6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80019a2:	463b      	mov	r3, r7
 80019a4:	4642      	mov	r2, r8
 80019a6:	2120      	movs	r1, #32
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7ff ff21 	bl	80017f0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80019ae:	b128      	cbz	r0, 80019bc <HAL_UART_Receive+0x6e>
        huart->RxState = HAL_UART_STATE_READY;
 80019b0:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80019b2:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 80019b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 80019b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80019bc:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 80019be:	b94e      	cbnz	r6, 80019d4 <HAL_UART_Receive+0x86>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019c6:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 80019ca:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 80019d2:	e7df      	b.n	8001994 <HAL_UART_Receive+0x46>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80019d4:	68a2      	ldr	r2, [r4, #8]
 80019d6:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 80019da:	d002      	beq.n	80019e2 <HAL_UART_Receive+0x94>
 80019dc:	b932      	cbnz	r2, 80019ec <HAL_UART_Receive+0x9e>
 80019de:	6922      	ldr	r2, [r4, #16]
 80019e0:	b922      	cbnz	r2, 80019ec <HAL_UART_Receive+0x9e>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80019e2:	6859      	ldr	r1, [r3, #4]
 80019e4:	b2c9      	uxtb	r1, r1
 80019e6:	f806 1b01 	strb.w	r1, [r6], #1
        pdata8bits++;
 80019ea:	e7ee      	b.n	80019ca <HAL_UART_Receive+0x7c>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80019ec:	6859      	ldr	r1, [r3, #4]
 80019ee:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80019f2:	e7f8      	b.n	80019e6 <HAL_UART_Receive+0x98>
    return HAL_BUSY;
 80019f4:	2002      	movs	r0, #2
 80019f6:	e7df      	b.n	80019b8 <HAL_UART_Receive+0x6a>
      return  HAL_ERROR;
 80019f8:	2001      	movs	r0, #1
 80019fa:	e7dd      	b.n	80019b8 <HAL_UART_Receive+0x6a>

080019fc <rand>:
 80019fc:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <rand+0x5c>)
 80019fe:	b510      	push	{r4, lr}
 8001a00:	681c      	ldr	r4, [r3, #0]
 8001a02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a04:	b9b3      	cbnz	r3, 8001a34 <rand+0x38>
 8001a06:	2018      	movs	r0, #24
 8001a08:	f000 fa3e 	bl	8001e88 <malloc>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	6320      	str	r0, [r4, #48]	@ 0x30
 8001a10:	b920      	cbnz	r0, 8001a1c <rand+0x20>
 8001a12:	2152      	movs	r1, #82	@ 0x52
 8001a14:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <rand+0x60>)
 8001a16:	4812      	ldr	r0, [pc, #72]	@ (8001a60 <rand+0x64>)
 8001a18:	f000 f9d0 	bl	8001dbc <__assert_func>
 8001a1c:	4911      	ldr	r1, [pc, #68]	@ (8001a64 <rand+0x68>)
 8001a1e:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <rand+0x6c>)
 8001a20:	e9c0 1300 	strd	r1, r3, [r0]
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <rand+0x70>)
 8001a26:	2100      	movs	r1, #0
 8001a28:	6083      	str	r3, [r0, #8]
 8001a2a:	230b      	movs	r3, #11
 8001a2c:	8183      	strh	r3, [r0, #12]
 8001a2e:	2001      	movs	r0, #1
 8001a30:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001a34:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001a36:	480e      	ldr	r0, [pc, #56]	@ (8001a70 <rand+0x74>)
 8001a38:	690b      	ldr	r3, [r1, #16]
 8001a3a:	694c      	ldr	r4, [r1, #20]
 8001a3c:	4358      	muls	r0, r3
 8001a3e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a74 <rand+0x78>)
 8001a40:	fb02 0004 	mla	r0, r2, r4, r0
 8001a44:	fba3 3202 	umull	r3, r2, r3, r2
 8001a48:	3301      	adds	r3, #1
 8001a4a:	eb40 0002 	adc.w	r0, r0, r2
 8001a4e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8001a52:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001a56:	bd10      	pop	{r4, pc}
 8001a58:	20000018 	.word	0x20000018
 8001a5c:	080030cb 	.word	0x080030cb
 8001a60:	080030e2 	.word	0x080030e2
 8001a64:	abcd330e 	.word	0xabcd330e
 8001a68:	e66d1234 	.word	0xe66d1234
 8001a6c:	0005deec 	.word	0x0005deec
 8001a70:	5851f42d 	.word	0x5851f42d
 8001a74:	4c957f2d 	.word	0x4c957f2d

08001a78 <std>:
 8001a78:	2300      	movs	r3, #0
 8001a7a:	b510      	push	{r4, lr}
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8001a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a86:	6083      	str	r3, [r0, #8]
 8001a88:	8181      	strh	r1, [r0, #12]
 8001a8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8001a8c:	81c2      	strh	r2, [r0, #14]
 8001a8e:	6183      	str	r3, [r0, #24]
 8001a90:	4619      	mov	r1, r3
 8001a92:	2208      	movs	r2, #8
 8001a94:	305c      	adds	r0, #92	@ 0x5c
 8001a96:	f000 f914 	bl	8001cc2 <memset>
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <std+0x58>)
 8001a9c:	6224      	str	r4, [r4, #32]
 8001a9e:	6263      	str	r3, [r4, #36]	@ 0x24
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad4 <std+0x5c>)
 8001aa2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <std+0x60>)
 8001aa6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <std+0x64>)
 8001aaa:	6323      	str	r3, [r4, #48]	@ 0x30
 8001aac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <std+0x68>)
 8001aae:	429c      	cmp	r4, r3
 8001ab0:	d006      	beq.n	8001ac0 <std+0x48>
 8001ab2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001ab6:	4294      	cmp	r4, r2
 8001ab8:	d002      	beq.n	8001ac0 <std+0x48>
 8001aba:	33d0      	adds	r3, #208	@ 0xd0
 8001abc:	429c      	cmp	r4, r3
 8001abe:	d105      	bne.n	8001acc <std+0x54>
 8001ac0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ac8:	f000 b974 	b.w	8001db4 <__retarget_lock_init_recursive>
 8001acc:	bd10      	pop	{r4, pc}
 8001ace:	bf00      	nop
 8001ad0:	08001c3d 	.word	0x08001c3d
 8001ad4:	08001c5f 	.word	0x08001c5f
 8001ad8:	08001c97 	.word	0x08001c97
 8001adc:	08001cbb 	.word	0x08001cbb
 8001ae0:	20000ae4 	.word	0x20000ae4

08001ae4 <stdio_exit_handler>:
 8001ae4:	4a02      	ldr	r2, [pc, #8]	@ (8001af0 <stdio_exit_handler+0xc>)
 8001ae6:	4903      	ldr	r1, [pc, #12]	@ (8001af4 <stdio_exit_handler+0x10>)
 8001ae8:	4803      	ldr	r0, [pc, #12]	@ (8001af8 <stdio_exit_handler+0x14>)
 8001aea:	f000 b869 	b.w	8001bc0 <_fwalk_sglue>
 8001aee:	bf00      	nop
 8001af0:	2000000c 	.word	0x2000000c
 8001af4:	080026c9 	.word	0x080026c9
 8001af8:	2000001c 	.word	0x2000001c

08001afc <cleanup_stdio>:
 8001afc:	6841      	ldr	r1, [r0, #4]
 8001afe:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <cleanup_stdio+0x34>)
 8001b00:	b510      	push	{r4, lr}
 8001b02:	4299      	cmp	r1, r3
 8001b04:	4604      	mov	r4, r0
 8001b06:	d001      	beq.n	8001b0c <cleanup_stdio+0x10>
 8001b08:	f000 fdde 	bl	80026c8 <_fflush_r>
 8001b0c:	68a1      	ldr	r1, [r4, #8]
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <cleanup_stdio+0x38>)
 8001b10:	4299      	cmp	r1, r3
 8001b12:	d002      	beq.n	8001b1a <cleanup_stdio+0x1e>
 8001b14:	4620      	mov	r0, r4
 8001b16:	f000 fdd7 	bl	80026c8 <_fflush_r>
 8001b1a:	68e1      	ldr	r1, [r4, #12]
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <cleanup_stdio+0x3c>)
 8001b1e:	4299      	cmp	r1, r3
 8001b20:	d004      	beq.n	8001b2c <cleanup_stdio+0x30>
 8001b22:	4620      	mov	r0, r4
 8001b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b28:	f000 bdce 	b.w	80026c8 <_fflush_r>
 8001b2c:	bd10      	pop	{r4, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000ae4 	.word	0x20000ae4
 8001b34:	20000b4c 	.word	0x20000b4c
 8001b38:	20000bb4 	.word	0x20000bb4

08001b3c <global_stdio_init.part.0>:
 8001b3c:	b510      	push	{r4, lr}
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b6c <global_stdio_init.part.0+0x30>)
 8001b40:	4c0b      	ldr	r4, [pc, #44]	@ (8001b70 <global_stdio_init.part.0+0x34>)
 8001b42:	4a0c      	ldr	r2, [pc, #48]	@ (8001b74 <global_stdio_init.part.0+0x38>)
 8001b44:	4620      	mov	r0, r4
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	2104      	movs	r1, #4
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f7ff ff94 	bl	8001a78 <std>
 8001b50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001b54:	2201      	movs	r2, #1
 8001b56:	2109      	movs	r1, #9
 8001b58:	f7ff ff8e 	bl	8001a78 <std>
 8001b5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001b60:	2202      	movs	r2, #2
 8001b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b66:	2112      	movs	r1, #18
 8001b68:	f7ff bf86 	b.w	8001a78 <std>
 8001b6c:	20000c1c 	.word	0x20000c1c
 8001b70:	20000ae4 	.word	0x20000ae4
 8001b74:	08001ae5 	.word	0x08001ae5

08001b78 <__sfp_lock_acquire>:
 8001b78:	4801      	ldr	r0, [pc, #4]	@ (8001b80 <__sfp_lock_acquire+0x8>)
 8001b7a:	f000 b91c 	b.w	8001db6 <__retarget_lock_acquire_recursive>
 8001b7e:	bf00      	nop
 8001b80:	20000c25 	.word	0x20000c25

08001b84 <__sfp_lock_release>:
 8001b84:	4801      	ldr	r0, [pc, #4]	@ (8001b8c <__sfp_lock_release+0x8>)
 8001b86:	f000 b917 	b.w	8001db8 <__retarget_lock_release_recursive>
 8001b8a:	bf00      	nop
 8001b8c:	20000c25 	.word	0x20000c25

08001b90 <__sinit>:
 8001b90:	b510      	push	{r4, lr}
 8001b92:	4604      	mov	r4, r0
 8001b94:	f7ff fff0 	bl	8001b78 <__sfp_lock_acquire>
 8001b98:	6a23      	ldr	r3, [r4, #32]
 8001b9a:	b11b      	cbz	r3, 8001ba4 <__sinit+0x14>
 8001b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ba0:	f7ff bff0 	b.w	8001b84 <__sfp_lock_release>
 8001ba4:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <__sinit+0x28>)
 8001ba6:	6223      	str	r3, [r4, #32]
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <__sinit+0x2c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f5      	bne.n	8001b9c <__sinit+0xc>
 8001bb0:	f7ff ffc4 	bl	8001b3c <global_stdio_init.part.0>
 8001bb4:	e7f2      	b.n	8001b9c <__sinit+0xc>
 8001bb6:	bf00      	nop
 8001bb8:	08001afd 	.word	0x08001afd
 8001bbc:	20000c1c 	.word	0x20000c1c

08001bc0 <_fwalk_sglue>:
 8001bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bc4:	4607      	mov	r7, r0
 8001bc6:	4688      	mov	r8, r1
 8001bc8:	4614      	mov	r4, r2
 8001bca:	2600      	movs	r6, #0
 8001bcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001bd0:	f1b9 0901 	subs.w	r9, r9, #1
 8001bd4:	d505      	bpl.n	8001be2 <_fwalk_sglue+0x22>
 8001bd6:	6824      	ldr	r4, [r4, #0]
 8001bd8:	2c00      	cmp	r4, #0
 8001bda:	d1f7      	bne.n	8001bcc <_fwalk_sglue+0xc>
 8001bdc:	4630      	mov	r0, r6
 8001bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001be2:	89ab      	ldrh	r3, [r5, #12]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d907      	bls.n	8001bf8 <_fwalk_sglue+0x38>
 8001be8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001bec:	3301      	adds	r3, #1
 8001bee:	d003      	beq.n	8001bf8 <_fwalk_sglue+0x38>
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	4638      	mov	r0, r7
 8001bf4:	47c0      	blx	r8
 8001bf6:	4306      	orrs	r6, r0
 8001bf8:	3568      	adds	r5, #104	@ 0x68
 8001bfa:	e7e9      	b.n	8001bd0 <_fwalk_sglue+0x10>

08001bfc <siprintf>:
 8001bfc:	b40e      	push	{r1, r2, r3}
 8001bfe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001c02:	b500      	push	{lr}
 8001c04:	b09c      	sub	sp, #112	@ 0x70
 8001c06:	ab1d      	add	r3, sp, #116	@ 0x74
 8001c08:	9002      	str	r0, [sp, #8]
 8001c0a:	9006      	str	r0, [sp, #24]
 8001c0c:	9107      	str	r1, [sp, #28]
 8001c0e:	9104      	str	r1, [sp, #16]
 8001c10:	4808      	ldr	r0, [pc, #32]	@ (8001c34 <siprintf+0x38>)
 8001c12:	4909      	ldr	r1, [pc, #36]	@ (8001c38 <siprintf+0x3c>)
 8001c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c18:	9105      	str	r1, [sp, #20]
 8001c1a:	6800      	ldr	r0, [r0, #0]
 8001c1c:	a902      	add	r1, sp, #8
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	f000 fa44 	bl	80020ac <_svfiprintf_r>
 8001c24:	2200      	movs	r2, #0
 8001c26:	9b02      	ldr	r3, [sp, #8]
 8001c28:	701a      	strb	r2, [r3, #0]
 8001c2a:	b01c      	add	sp, #112	@ 0x70
 8001c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c30:	b003      	add	sp, #12
 8001c32:	4770      	bx	lr
 8001c34:	20000018 	.word	0x20000018
 8001c38:	ffff0208 	.word	0xffff0208

08001c3c <__sread>:
 8001c3c:	b510      	push	{r4, lr}
 8001c3e:	460c      	mov	r4, r1
 8001c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c44:	f000 f868 	bl	8001d18 <_read_r>
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	bfab      	itete	ge
 8001c4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001c4e:	89a3      	ldrhlt	r3, [r4, #12]
 8001c50:	181b      	addge	r3, r3, r0
 8001c52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001c56:	bfac      	ite	ge
 8001c58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001c5a:	81a3      	strhlt	r3, [r4, #12]
 8001c5c:	bd10      	pop	{r4, pc}

08001c5e <__swrite>:
 8001c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c62:	461f      	mov	r7, r3
 8001c64:	898b      	ldrh	r3, [r1, #12]
 8001c66:	4605      	mov	r5, r0
 8001c68:	05db      	lsls	r3, r3, #23
 8001c6a:	460c      	mov	r4, r1
 8001c6c:	4616      	mov	r6, r2
 8001c6e:	d505      	bpl.n	8001c7c <__swrite+0x1e>
 8001c70:	2302      	movs	r3, #2
 8001c72:	2200      	movs	r2, #0
 8001c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c78:	f000 f83c 	bl	8001cf4 <_lseek_r>
 8001c7c:	89a3      	ldrh	r3, [r4, #12]
 8001c7e:	4632      	mov	r2, r6
 8001c80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c84:	81a3      	strh	r3, [r4, #12]
 8001c86:	4628      	mov	r0, r5
 8001c88:	463b      	mov	r3, r7
 8001c8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c92:	f000 b853 	b.w	8001d3c <_write_r>

08001c96 <__sseek>:
 8001c96:	b510      	push	{r4, lr}
 8001c98:	460c      	mov	r4, r1
 8001c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c9e:	f000 f829 	bl	8001cf4 <_lseek_r>
 8001ca2:	1c43      	adds	r3, r0, #1
 8001ca4:	89a3      	ldrh	r3, [r4, #12]
 8001ca6:	bf15      	itete	ne
 8001ca8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001caa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001cae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001cb2:	81a3      	strheq	r3, [r4, #12]
 8001cb4:	bf18      	it	ne
 8001cb6:	81a3      	strhne	r3, [r4, #12]
 8001cb8:	bd10      	pop	{r4, pc}

08001cba <__sclose>:
 8001cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cbe:	f000 b809 	b.w	8001cd4 <_close_r>

08001cc2 <memset>:
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4402      	add	r2, r0
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d100      	bne.n	8001ccc <memset+0xa>
 8001cca:	4770      	bx	lr
 8001ccc:	f803 1b01 	strb.w	r1, [r3], #1
 8001cd0:	e7f9      	b.n	8001cc6 <memset+0x4>
	...

08001cd4 <_close_r>:
 8001cd4:	b538      	push	{r3, r4, r5, lr}
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	4d05      	ldr	r5, [pc, #20]	@ (8001cf0 <_close_r+0x1c>)
 8001cda:	4604      	mov	r4, r0
 8001cdc:	4608      	mov	r0, r1
 8001cde:	602b      	str	r3, [r5, #0]
 8001ce0:	f7fe fea0 	bl	8000a24 <_close>
 8001ce4:	1c43      	adds	r3, r0, #1
 8001ce6:	d102      	bne.n	8001cee <_close_r+0x1a>
 8001ce8:	682b      	ldr	r3, [r5, #0]
 8001cea:	b103      	cbz	r3, 8001cee <_close_r+0x1a>
 8001cec:	6023      	str	r3, [r4, #0]
 8001cee:	bd38      	pop	{r3, r4, r5, pc}
 8001cf0:	20000c20 	.word	0x20000c20

08001cf4 <_lseek_r>:
 8001cf4:	b538      	push	{r3, r4, r5, lr}
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	4608      	mov	r0, r1
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	4d05      	ldr	r5, [pc, #20]	@ (8001d14 <_lseek_r+0x20>)
 8001d00:	602a      	str	r2, [r5, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	f7fe fe98 	bl	8000a38 <_lseek>
 8001d08:	1c43      	adds	r3, r0, #1
 8001d0a:	d102      	bne.n	8001d12 <_lseek_r+0x1e>
 8001d0c:	682b      	ldr	r3, [r5, #0]
 8001d0e:	b103      	cbz	r3, 8001d12 <_lseek_r+0x1e>
 8001d10:	6023      	str	r3, [r4, #0]
 8001d12:	bd38      	pop	{r3, r4, r5, pc}
 8001d14:	20000c20 	.word	0x20000c20

08001d18 <_read_r>:
 8001d18:	b538      	push	{r3, r4, r5, lr}
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	2200      	movs	r2, #0
 8001d22:	4d05      	ldr	r5, [pc, #20]	@ (8001d38 <_read_r+0x20>)
 8001d24:	602a      	str	r2, [r5, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	f7fe fe60 	bl	80009ec <_read>
 8001d2c:	1c43      	adds	r3, r0, #1
 8001d2e:	d102      	bne.n	8001d36 <_read_r+0x1e>
 8001d30:	682b      	ldr	r3, [r5, #0]
 8001d32:	b103      	cbz	r3, 8001d36 <_read_r+0x1e>
 8001d34:	6023      	str	r3, [r4, #0]
 8001d36:	bd38      	pop	{r3, r4, r5, pc}
 8001d38:	20000c20 	.word	0x20000c20

08001d3c <_write_r>:
 8001d3c:	b538      	push	{r3, r4, r5, lr}
 8001d3e:	4604      	mov	r4, r0
 8001d40:	4608      	mov	r0, r1
 8001d42:	4611      	mov	r1, r2
 8001d44:	2200      	movs	r2, #0
 8001d46:	4d05      	ldr	r5, [pc, #20]	@ (8001d5c <_write_r+0x20>)
 8001d48:	602a      	str	r2, [r5, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	f7fe fe5c 	bl	8000a08 <_write>
 8001d50:	1c43      	adds	r3, r0, #1
 8001d52:	d102      	bne.n	8001d5a <_write_r+0x1e>
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	b103      	cbz	r3, 8001d5a <_write_r+0x1e>
 8001d58:	6023      	str	r3, [r4, #0]
 8001d5a:	bd38      	pop	{r3, r4, r5, pc}
 8001d5c:	20000c20 	.word	0x20000c20

08001d60 <__errno>:
 8001d60:	4b01      	ldr	r3, [pc, #4]	@ (8001d68 <__errno+0x8>)
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000018 	.word	0x20000018

08001d6c <__libc_init_array>:
 8001d6c:	b570      	push	{r4, r5, r6, lr}
 8001d6e:	2600      	movs	r6, #0
 8001d70:	4d0c      	ldr	r5, [pc, #48]	@ (8001da4 <__libc_init_array+0x38>)
 8001d72:	4c0d      	ldr	r4, [pc, #52]	@ (8001da8 <__libc_init_array+0x3c>)
 8001d74:	1b64      	subs	r4, r4, r5
 8001d76:	10a4      	asrs	r4, r4, #2
 8001d78:	42a6      	cmp	r6, r4
 8001d7a:	d109      	bne.n	8001d90 <__libc_init_array+0x24>
 8001d7c:	f000 fffc 	bl	8002d78 <_init>
 8001d80:	2600      	movs	r6, #0
 8001d82:	4d0a      	ldr	r5, [pc, #40]	@ (8001dac <__libc_init_array+0x40>)
 8001d84:	4c0a      	ldr	r4, [pc, #40]	@ (8001db0 <__libc_init_array+0x44>)
 8001d86:	1b64      	subs	r4, r4, r5
 8001d88:	10a4      	asrs	r4, r4, #2
 8001d8a:	42a6      	cmp	r6, r4
 8001d8c:	d105      	bne.n	8001d9a <__libc_init_array+0x2e>
 8001d8e:	bd70      	pop	{r4, r5, r6, pc}
 8001d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d94:	4798      	blx	r3
 8001d96:	3601      	adds	r6, #1
 8001d98:	e7ee      	b.n	8001d78 <__libc_init_array+0xc>
 8001d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d9e:	4798      	blx	r3
 8001da0:	3601      	adds	r6, #1
 8001da2:	e7f2      	b.n	8001d8a <__libc_init_array+0x1e>
 8001da4:	080031b4 	.word	0x080031b4
 8001da8:	080031b4 	.word	0x080031b4
 8001dac:	080031b4 	.word	0x080031b4
 8001db0:	080031b8 	.word	0x080031b8

08001db4 <__retarget_lock_init_recursive>:
 8001db4:	4770      	bx	lr

08001db6 <__retarget_lock_acquire_recursive>:
 8001db6:	4770      	bx	lr

08001db8 <__retarget_lock_release_recursive>:
 8001db8:	4770      	bx	lr
	...

08001dbc <__assert_func>:
 8001dbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001dbe:	4614      	mov	r4, r2
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <__assert_func+0x2c>)
 8001dc4:	4605      	mov	r5, r0
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68d8      	ldr	r0, [r3, #12]
 8001dca:	b954      	cbnz	r4, 8001de2 <__assert_func+0x26>
 8001dcc:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <__assert_func+0x30>)
 8001dce:	461c      	mov	r4, r3
 8001dd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001dd4:	9100      	str	r1, [sp, #0]
 8001dd6:	462b      	mov	r3, r5
 8001dd8:	4905      	ldr	r1, [pc, #20]	@ (8001df0 <__assert_func+0x34>)
 8001dda:	f000 fc9d 	bl	8002718 <fiprintf>
 8001dde:	f000 fcf3 	bl	80027c8 <abort>
 8001de2:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <__assert_func+0x38>)
 8001de4:	e7f4      	b.n	8001dd0 <__assert_func+0x14>
 8001de6:	bf00      	nop
 8001de8:	20000018 	.word	0x20000018
 8001dec:	08002ed8 	.word	0x08002ed8
 8001df0:	08003147 	.word	0x08003147
 8001df4:	0800313a 	.word	0x0800313a

08001df8 <_free_r>:
 8001df8:	b538      	push	{r3, r4, r5, lr}
 8001dfa:	4605      	mov	r5, r0
 8001dfc:	2900      	cmp	r1, #0
 8001dfe:	d040      	beq.n	8001e82 <_free_r+0x8a>
 8001e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e04:	1f0c      	subs	r4, r1, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bfb8      	it	lt
 8001e0a:	18e4      	addlt	r4, r4, r3
 8001e0c:	f000 f8e6 	bl	8001fdc <__malloc_lock>
 8001e10:	4a1c      	ldr	r2, [pc, #112]	@ (8001e84 <_free_r+0x8c>)
 8001e12:	6813      	ldr	r3, [r2, #0]
 8001e14:	b933      	cbnz	r3, 8001e24 <_free_r+0x2c>
 8001e16:	6063      	str	r3, [r4, #4]
 8001e18:	6014      	str	r4, [r2, #0]
 8001e1a:	4628      	mov	r0, r5
 8001e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e20:	f000 b8e2 	b.w	8001fe8 <__malloc_unlock>
 8001e24:	42a3      	cmp	r3, r4
 8001e26:	d908      	bls.n	8001e3a <_free_r+0x42>
 8001e28:	6820      	ldr	r0, [r4, #0]
 8001e2a:	1821      	adds	r1, r4, r0
 8001e2c:	428b      	cmp	r3, r1
 8001e2e:	bf01      	itttt	eq
 8001e30:	6819      	ldreq	r1, [r3, #0]
 8001e32:	685b      	ldreq	r3, [r3, #4]
 8001e34:	1809      	addeq	r1, r1, r0
 8001e36:	6021      	streq	r1, [r4, #0]
 8001e38:	e7ed      	b.n	8001e16 <_free_r+0x1e>
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	b10b      	cbz	r3, 8001e44 <_free_r+0x4c>
 8001e40:	42a3      	cmp	r3, r4
 8001e42:	d9fa      	bls.n	8001e3a <_free_r+0x42>
 8001e44:	6811      	ldr	r1, [r2, #0]
 8001e46:	1850      	adds	r0, r2, r1
 8001e48:	42a0      	cmp	r0, r4
 8001e4a:	d10b      	bne.n	8001e64 <_free_r+0x6c>
 8001e4c:	6820      	ldr	r0, [r4, #0]
 8001e4e:	4401      	add	r1, r0
 8001e50:	1850      	adds	r0, r2, r1
 8001e52:	4283      	cmp	r3, r0
 8001e54:	6011      	str	r1, [r2, #0]
 8001e56:	d1e0      	bne.n	8001e1a <_free_r+0x22>
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4408      	add	r0, r1
 8001e5e:	6010      	str	r0, [r2, #0]
 8001e60:	6053      	str	r3, [r2, #4]
 8001e62:	e7da      	b.n	8001e1a <_free_r+0x22>
 8001e64:	d902      	bls.n	8001e6c <_free_r+0x74>
 8001e66:	230c      	movs	r3, #12
 8001e68:	602b      	str	r3, [r5, #0]
 8001e6a:	e7d6      	b.n	8001e1a <_free_r+0x22>
 8001e6c:	6820      	ldr	r0, [r4, #0]
 8001e6e:	1821      	adds	r1, r4, r0
 8001e70:	428b      	cmp	r3, r1
 8001e72:	bf01      	itttt	eq
 8001e74:	6819      	ldreq	r1, [r3, #0]
 8001e76:	685b      	ldreq	r3, [r3, #4]
 8001e78:	1809      	addeq	r1, r1, r0
 8001e7a:	6021      	streq	r1, [r4, #0]
 8001e7c:	6063      	str	r3, [r4, #4]
 8001e7e:	6054      	str	r4, [r2, #4]
 8001e80:	e7cb      	b.n	8001e1a <_free_r+0x22>
 8001e82:	bd38      	pop	{r3, r4, r5, pc}
 8001e84:	20000c2c 	.word	0x20000c2c

08001e88 <malloc>:
 8001e88:	4b02      	ldr	r3, [pc, #8]	@ (8001e94 <malloc+0xc>)
 8001e8a:	4601      	mov	r1, r0
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	f000 b825 	b.w	8001edc <_malloc_r>
 8001e92:	bf00      	nop
 8001e94:	20000018 	.word	0x20000018

08001e98 <sbrk_aligned>:
 8001e98:	b570      	push	{r4, r5, r6, lr}
 8001e9a:	4e0f      	ldr	r6, [pc, #60]	@ (8001ed8 <sbrk_aligned+0x40>)
 8001e9c:	460c      	mov	r4, r1
 8001e9e:	6831      	ldr	r1, [r6, #0]
 8001ea0:	4605      	mov	r5, r0
 8001ea2:	b911      	cbnz	r1, 8001eaa <sbrk_aligned+0x12>
 8001ea4:	f000 fc64 	bl	8002770 <_sbrk_r>
 8001ea8:	6030      	str	r0, [r6, #0]
 8001eaa:	4621      	mov	r1, r4
 8001eac:	4628      	mov	r0, r5
 8001eae:	f000 fc5f 	bl	8002770 <_sbrk_r>
 8001eb2:	1c43      	adds	r3, r0, #1
 8001eb4:	d103      	bne.n	8001ebe <sbrk_aligned+0x26>
 8001eb6:	f04f 34ff 	mov.w	r4, #4294967295
 8001eba:	4620      	mov	r0, r4
 8001ebc:	bd70      	pop	{r4, r5, r6, pc}
 8001ebe:	1cc4      	adds	r4, r0, #3
 8001ec0:	f024 0403 	bic.w	r4, r4, #3
 8001ec4:	42a0      	cmp	r0, r4
 8001ec6:	d0f8      	beq.n	8001eba <sbrk_aligned+0x22>
 8001ec8:	1a21      	subs	r1, r4, r0
 8001eca:	4628      	mov	r0, r5
 8001ecc:	f000 fc50 	bl	8002770 <_sbrk_r>
 8001ed0:	3001      	adds	r0, #1
 8001ed2:	d1f2      	bne.n	8001eba <sbrk_aligned+0x22>
 8001ed4:	e7ef      	b.n	8001eb6 <sbrk_aligned+0x1e>
 8001ed6:	bf00      	nop
 8001ed8:	20000c28 	.word	0x20000c28

08001edc <_malloc_r>:
 8001edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ee0:	1ccd      	adds	r5, r1, #3
 8001ee2:	f025 0503 	bic.w	r5, r5, #3
 8001ee6:	3508      	adds	r5, #8
 8001ee8:	2d0c      	cmp	r5, #12
 8001eea:	bf38      	it	cc
 8001eec:	250c      	movcc	r5, #12
 8001eee:	2d00      	cmp	r5, #0
 8001ef0:	4606      	mov	r6, r0
 8001ef2:	db01      	blt.n	8001ef8 <_malloc_r+0x1c>
 8001ef4:	42a9      	cmp	r1, r5
 8001ef6:	d904      	bls.n	8001f02 <_malloc_r+0x26>
 8001ef8:	230c      	movs	r3, #12
 8001efa:	6033      	str	r3, [r6, #0]
 8001efc:	2000      	movs	r0, #0
 8001efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001fd8 <_malloc_r+0xfc>
 8001f06:	f000 f869 	bl	8001fdc <__malloc_lock>
 8001f0a:	f8d8 3000 	ldr.w	r3, [r8]
 8001f0e:	461c      	mov	r4, r3
 8001f10:	bb44      	cbnz	r4, 8001f64 <_malloc_r+0x88>
 8001f12:	4629      	mov	r1, r5
 8001f14:	4630      	mov	r0, r6
 8001f16:	f7ff ffbf 	bl	8001e98 <sbrk_aligned>
 8001f1a:	1c43      	adds	r3, r0, #1
 8001f1c:	4604      	mov	r4, r0
 8001f1e:	d158      	bne.n	8001fd2 <_malloc_r+0xf6>
 8001f20:	f8d8 4000 	ldr.w	r4, [r8]
 8001f24:	4627      	mov	r7, r4
 8001f26:	2f00      	cmp	r7, #0
 8001f28:	d143      	bne.n	8001fb2 <_malloc_r+0xd6>
 8001f2a:	2c00      	cmp	r4, #0
 8001f2c:	d04b      	beq.n	8001fc6 <_malloc_r+0xea>
 8001f2e:	6823      	ldr	r3, [r4, #0]
 8001f30:	4639      	mov	r1, r7
 8001f32:	4630      	mov	r0, r6
 8001f34:	eb04 0903 	add.w	r9, r4, r3
 8001f38:	f000 fc1a 	bl	8002770 <_sbrk_r>
 8001f3c:	4581      	cmp	r9, r0
 8001f3e:	d142      	bne.n	8001fc6 <_malloc_r+0xea>
 8001f40:	6821      	ldr	r1, [r4, #0]
 8001f42:	4630      	mov	r0, r6
 8001f44:	1a6d      	subs	r5, r5, r1
 8001f46:	4629      	mov	r1, r5
 8001f48:	f7ff ffa6 	bl	8001e98 <sbrk_aligned>
 8001f4c:	3001      	adds	r0, #1
 8001f4e:	d03a      	beq.n	8001fc6 <_malloc_r+0xea>
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	442b      	add	r3, r5
 8001f54:	6023      	str	r3, [r4, #0]
 8001f56:	f8d8 3000 	ldr.w	r3, [r8]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	bb62      	cbnz	r2, 8001fb8 <_malloc_r+0xdc>
 8001f5e:	f8c8 7000 	str.w	r7, [r8]
 8001f62:	e00f      	b.n	8001f84 <_malloc_r+0xa8>
 8001f64:	6822      	ldr	r2, [r4, #0]
 8001f66:	1b52      	subs	r2, r2, r5
 8001f68:	d420      	bmi.n	8001fac <_malloc_r+0xd0>
 8001f6a:	2a0b      	cmp	r2, #11
 8001f6c:	d917      	bls.n	8001f9e <_malloc_r+0xc2>
 8001f6e:	1961      	adds	r1, r4, r5
 8001f70:	42a3      	cmp	r3, r4
 8001f72:	6025      	str	r5, [r4, #0]
 8001f74:	bf18      	it	ne
 8001f76:	6059      	strne	r1, [r3, #4]
 8001f78:	6863      	ldr	r3, [r4, #4]
 8001f7a:	bf08      	it	eq
 8001f7c:	f8c8 1000 	streq.w	r1, [r8]
 8001f80:	5162      	str	r2, [r4, r5]
 8001f82:	604b      	str	r3, [r1, #4]
 8001f84:	4630      	mov	r0, r6
 8001f86:	f000 f82f 	bl	8001fe8 <__malloc_unlock>
 8001f8a:	f104 000b 	add.w	r0, r4, #11
 8001f8e:	1d23      	adds	r3, r4, #4
 8001f90:	f020 0007 	bic.w	r0, r0, #7
 8001f94:	1ac2      	subs	r2, r0, r3
 8001f96:	bf1c      	itt	ne
 8001f98:	1a1b      	subne	r3, r3, r0
 8001f9a:	50a3      	strne	r3, [r4, r2]
 8001f9c:	e7af      	b.n	8001efe <_malloc_r+0x22>
 8001f9e:	6862      	ldr	r2, [r4, #4]
 8001fa0:	42a3      	cmp	r3, r4
 8001fa2:	bf0c      	ite	eq
 8001fa4:	f8c8 2000 	streq.w	r2, [r8]
 8001fa8:	605a      	strne	r2, [r3, #4]
 8001faa:	e7eb      	b.n	8001f84 <_malloc_r+0xa8>
 8001fac:	4623      	mov	r3, r4
 8001fae:	6864      	ldr	r4, [r4, #4]
 8001fb0:	e7ae      	b.n	8001f10 <_malloc_r+0x34>
 8001fb2:	463c      	mov	r4, r7
 8001fb4:	687f      	ldr	r7, [r7, #4]
 8001fb6:	e7b6      	b.n	8001f26 <_malloc_r+0x4a>
 8001fb8:	461a      	mov	r2, r3
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	42a3      	cmp	r3, r4
 8001fbe:	d1fb      	bne.n	8001fb8 <_malloc_r+0xdc>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	6053      	str	r3, [r2, #4]
 8001fc4:	e7de      	b.n	8001f84 <_malloc_r+0xa8>
 8001fc6:	230c      	movs	r3, #12
 8001fc8:	4630      	mov	r0, r6
 8001fca:	6033      	str	r3, [r6, #0]
 8001fcc:	f000 f80c 	bl	8001fe8 <__malloc_unlock>
 8001fd0:	e794      	b.n	8001efc <_malloc_r+0x20>
 8001fd2:	6005      	str	r5, [r0, #0]
 8001fd4:	e7d6      	b.n	8001f84 <_malloc_r+0xa8>
 8001fd6:	bf00      	nop
 8001fd8:	20000c2c 	.word	0x20000c2c

08001fdc <__malloc_lock>:
 8001fdc:	4801      	ldr	r0, [pc, #4]	@ (8001fe4 <__malloc_lock+0x8>)
 8001fde:	f7ff beea 	b.w	8001db6 <__retarget_lock_acquire_recursive>
 8001fe2:	bf00      	nop
 8001fe4:	20000c24 	.word	0x20000c24

08001fe8 <__malloc_unlock>:
 8001fe8:	4801      	ldr	r0, [pc, #4]	@ (8001ff0 <__malloc_unlock+0x8>)
 8001fea:	f7ff bee5 	b.w	8001db8 <__retarget_lock_release_recursive>
 8001fee:	bf00      	nop
 8001ff0:	20000c24 	.word	0x20000c24

08001ff4 <__ssputs_r>:
 8001ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ff8:	461f      	mov	r7, r3
 8001ffa:	688e      	ldr	r6, [r1, #8]
 8001ffc:	4682      	mov	sl, r0
 8001ffe:	42be      	cmp	r6, r7
 8002000:	460c      	mov	r4, r1
 8002002:	4690      	mov	r8, r2
 8002004:	680b      	ldr	r3, [r1, #0]
 8002006:	d82d      	bhi.n	8002064 <__ssputs_r+0x70>
 8002008:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800200c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002010:	d026      	beq.n	8002060 <__ssputs_r+0x6c>
 8002012:	6965      	ldr	r5, [r4, #20]
 8002014:	6909      	ldr	r1, [r1, #16]
 8002016:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800201a:	eba3 0901 	sub.w	r9, r3, r1
 800201e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002022:	1c7b      	adds	r3, r7, #1
 8002024:	444b      	add	r3, r9
 8002026:	106d      	asrs	r5, r5, #1
 8002028:	429d      	cmp	r5, r3
 800202a:	bf38      	it	cc
 800202c:	461d      	movcc	r5, r3
 800202e:	0553      	lsls	r3, r2, #21
 8002030:	d527      	bpl.n	8002082 <__ssputs_r+0x8e>
 8002032:	4629      	mov	r1, r5
 8002034:	f7ff ff52 	bl	8001edc <_malloc_r>
 8002038:	4606      	mov	r6, r0
 800203a:	b360      	cbz	r0, 8002096 <__ssputs_r+0xa2>
 800203c:	464a      	mov	r2, r9
 800203e:	6921      	ldr	r1, [r4, #16]
 8002040:	f000 fbb4 	bl	80027ac <memcpy>
 8002044:	89a3      	ldrh	r3, [r4, #12]
 8002046:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800204a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800204e:	81a3      	strh	r3, [r4, #12]
 8002050:	6126      	str	r6, [r4, #16]
 8002052:	444e      	add	r6, r9
 8002054:	6026      	str	r6, [r4, #0]
 8002056:	463e      	mov	r6, r7
 8002058:	6165      	str	r5, [r4, #20]
 800205a:	eba5 0509 	sub.w	r5, r5, r9
 800205e:	60a5      	str	r5, [r4, #8]
 8002060:	42be      	cmp	r6, r7
 8002062:	d900      	bls.n	8002066 <__ssputs_r+0x72>
 8002064:	463e      	mov	r6, r7
 8002066:	4632      	mov	r2, r6
 8002068:	4641      	mov	r1, r8
 800206a:	6820      	ldr	r0, [r4, #0]
 800206c:	f000 fb66 	bl	800273c <memmove>
 8002070:	2000      	movs	r0, #0
 8002072:	68a3      	ldr	r3, [r4, #8]
 8002074:	1b9b      	subs	r3, r3, r6
 8002076:	60a3      	str	r3, [r4, #8]
 8002078:	6823      	ldr	r3, [r4, #0]
 800207a:	4433      	add	r3, r6
 800207c:	6023      	str	r3, [r4, #0]
 800207e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002082:	462a      	mov	r2, r5
 8002084:	f000 fba7 	bl	80027d6 <_realloc_r>
 8002088:	4606      	mov	r6, r0
 800208a:	2800      	cmp	r0, #0
 800208c:	d1e0      	bne.n	8002050 <__ssputs_r+0x5c>
 800208e:	4650      	mov	r0, sl
 8002090:	6921      	ldr	r1, [r4, #16]
 8002092:	f7ff feb1 	bl	8001df8 <_free_r>
 8002096:	230c      	movs	r3, #12
 8002098:	f8ca 3000 	str.w	r3, [sl]
 800209c:	89a3      	ldrh	r3, [r4, #12]
 800209e:	f04f 30ff 	mov.w	r0, #4294967295
 80020a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020a6:	81a3      	strh	r3, [r4, #12]
 80020a8:	e7e9      	b.n	800207e <__ssputs_r+0x8a>
	...

080020ac <_svfiprintf_r>:
 80020ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020b0:	4698      	mov	r8, r3
 80020b2:	898b      	ldrh	r3, [r1, #12]
 80020b4:	4607      	mov	r7, r0
 80020b6:	061b      	lsls	r3, r3, #24
 80020b8:	460d      	mov	r5, r1
 80020ba:	4614      	mov	r4, r2
 80020bc:	b09d      	sub	sp, #116	@ 0x74
 80020be:	d510      	bpl.n	80020e2 <_svfiprintf_r+0x36>
 80020c0:	690b      	ldr	r3, [r1, #16]
 80020c2:	b973      	cbnz	r3, 80020e2 <_svfiprintf_r+0x36>
 80020c4:	2140      	movs	r1, #64	@ 0x40
 80020c6:	f7ff ff09 	bl	8001edc <_malloc_r>
 80020ca:	6028      	str	r0, [r5, #0]
 80020cc:	6128      	str	r0, [r5, #16]
 80020ce:	b930      	cbnz	r0, 80020de <_svfiprintf_r+0x32>
 80020d0:	230c      	movs	r3, #12
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	b01d      	add	sp, #116	@ 0x74
 80020da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020de:	2340      	movs	r3, #64	@ 0x40
 80020e0:	616b      	str	r3, [r5, #20]
 80020e2:	2300      	movs	r3, #0
 80020e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80020e6:	2320      	movs	r3, #32
 80020e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80020ec:	2330      	movs	r3, #48	@ 0x30
 80020ee:	f04f 0901 	mov.w	r9, #1
 80020f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80020f6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002290 <_svfiprintf_r+0x1e4>
 80020fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80020fe:	4623      	mov	r3, r4
 8002100:	469a      	mov	sl, r3
 8002102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002106:	b10a      	cbz	r2, 800210c <_svfiprintf_r+0x60>
 8002108:	2a25      	cmp	r2, #37	@ 0x25
 800210a:	d1f9      	bne.n	8002100 <_svfiprintf_r+0x54>
 800210c:	ebba 0b04 	subs.w	fp, sl, r4
 8002110:	d00b      	beq.n	800212a <_svfiprintf_r+0x7e>
 8002112:	465b      	mov	r3, fp
 8002114:	4622      	mov	r2, r4
 8002116:	4629      	mov	r1, r5
 8002118:	4638      	mov	r0, r7
 800211a:	f7ff ff6b 	bl	8001ff4 <__ssputs_r>
 800211e:	3001      	adds	r0, #1
 8002120:	f000 80a7 	beq.w	8002272 <_svfiprintf_r+0x1c6>
 8002124:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002126:	445a      	add	r2, fp
 8002128:	9209      	str	r2, [sp, #36]	@ 0x24
 800212a:	f89a 3000 	ldrb.w	r3, [sl]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 809f 	beq.w	8002272 <_svfiprintf_r+0x1c6>
 8002134:	2300      	movs	r3, #0
 8002136:	f04f 32ff 	mov.w	r2, #4294967295
 800213a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800213e:	f10a 0a01 	add.w	sl, sl, #1
 8002142:	9304      	str	r3, [sp, #16]
 8002144:	9307      	str	r3, [sp, #28]
 8002146:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800214a:	931a      	str	r3, [sp, #104]	@ 0x68
 800214c:	4654      	mov	r4, sl
 800214e:	2205      	movs	r2, #5
 8002150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002154:	484e      	ldr	r0, [pc, #312]	@ (8002290 <_svfiprintf_r+0x1e4>)
 8002156:	f000 fb1b 	bl	8002790 <memchr>
 800215a:	9a04      	ldr	r2, [sp, #16]
 800215c:	b9d8      	cbnz	r0, 8002196 <_svfiprintf_r+0xea>
 800215e:	06d0      	lsls	r0, r2, #27
 8002160:	bf44      	itt	mi
 8002162:	2320      	movmi	r3, #32
 8002164:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002168:	0711      	lsls	r1, r2, #28
 800216a:	bf44      	itt	mi
 800216c:	232b      	movmi	r3, #43	@ 0x2b
 800216e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002172:	f89a 3000 	ldrb.w	r3, [sl]
 8002176:	2b2a      	cmp	r3, #42	@ 0x2a
 8002178:	d015      	beq.n	80021a6 <_svfiprintf_r+0xfa>
 800217a:	4654      	mov	r4, sl
 800217c:	2000      	movs	r0, #0
 800217e:	f04f 0c0a 	mov.w	ip, #10
 8002182:	9a07      	ldr	r2, [sp, #28]
 8002184:	4621      	mov	r1, r4
 8002186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800218a:	3b30      	subs	r3, #48	@ 0x30
 800218c:	2b09      	cmp	r3, #9
 800218e:	d94b      	bls.n	8002228 <_svfiprintf_r+0x17c>
 8002190:	b1b0      	cbz	r0, 80021c0 <_svfiprintf_r+0x114>
 8002192:	9207      	str	r2, [sp, #28]
 8002194:	e014      	b.n	80021c0 <_svfiprintf_r+0x114>
 8002196:	eba0 0308 	sub.w	r3, r0, r8
 800219a:	fa09 f303 	lsl.w	r3, r9, r3
 800219e:	4313      	orrs	r3, r2
 80021a0:	46a2      	mov	sl, r4
 80021a2:	9304      	str	r3, [sp, #16]
 80021a4:	e7d2      	b.n	800214c <_svfiprintf_r+0xa0>
 80021a6:	9b03      	ldr	r3, [sp, #12]
 80021a8:	1d19      	adds	r1, r3, #4
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	9103      	str	r1, [sp, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bfbb      	ittet	lt
 80021b2:	425b      	neglt	r3, r3
 80021b4:	f042 0202 	orrlt.w	r2, r2, #2
 80021b8:	9307      	strge	r3, [sp, #28]
 80021ba:	9307      	strlt	r3, [sp, #28]
 80021bc:	bfb8      	it	lt
 80021be:	9204      	strlt	r2, [sp, #16]
 80021c0:	7823      	ldrb	r3, [r4, #0]
 80021c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80021c4:	d10a      	bne.n	80021dc <_svfiprintf_r+0x130>
 80021c6:	7863      	ldrb	r3, [r4, #1]
 80021c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80021ca:	d132      	bne.n	8002232 <_svfiprintf_r+0x186>
 80021cc:	9b03      	ldr	r3, [sp, #12]
 80021ce:	3402      	adds	r4, #2
 80021d0:	1d1a      	adds	r2, r3, #4
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	9203      	str	r2, [sp, #12]
 80021d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80021da:	9305      	str	r3, [sp, #20]
 80021dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002294 <_svfiprintf_r+0x1e8>
 80021e0:	2203      	movs	r2, #3
 80021e2:	4650      	mov	r0, sl
 80021e4:	7821      	ldrb	r1, [r4, #0]
 80021e6:	f000 fad3 	bl	8002790 <memchr>
 80021ea:	b138      	cbz	r0, 80021fc <_svfiprintf_r+0x150>
 80021ec:	2240      	movs	r2, #64	@ 0x40
 80021ee:	9b04      	ldr	r3, [sp, #16]
 80021f0:	eba0 000a 	sub.w	r0, r0, sl
 80021f4:	4082      	lsls	r2, r0
 80021f6:	4313      	orrs	r3, r2
 80021f8:	3401      	adds	r4, #1
 80021fa:	9304      	str	r3, [sp, #16]
 80021fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002200:	2206      	movs	r2, #6
 8002202:	4825      	ldr	r0, [pc, #148]	@ (8002298 <_svfiprintf_r+0x1ec>)
 8002204:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002208:	f000 fac2 	bl	8002790 <memchr>
 800220c:	2800      	cmp	r0, #0
 800220e:	d036      	beq.n	800227e <_svfiprintf_r+0x1d2>
 8002210:	4b22      	ldr	r3, [pc, #136]	@ (800229c <_svfiprintf_r+0x1f0>)
 8002212:	bb1b      	cbnz	r3, 800225c <_svfiprintf_r+0x1b0>
 8002214:	9b03      	ldr	r3, [sp, #12]
 8002216:	3307      	adds	r3, #7
 8002218:	f023 0307 	bic.w	r3, r3, #7
 800221c:	3308      	adds	r3, #8
 800221e:	9303      	str	r3, [sp, #12]
 8002220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002222:	4433      	add	r3, r6
 8002224:	9309      	str	r3, [sp, #36]	@ 0x24
 8002226:	e76a      	b.n	80020fe <_svfiprintf_r+0x52>
 8002228:	460c      	mov	r4, r1
 800222a:	2001      	movs	r0, #1
 800222c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002230:	e7a8      	b.n	8002184 <_svfiprintf_r+0xd8>
 8002232:	2300      	movs	r3, #0
 8002234:	f04f 0c0a 	mov.w	ip, #10
 8002238:	4619      	mov	r1, r3
 800223a:	3401      	adds	r4, #1
 800223c:	9305      	str	r3, [sp, #20]
 800223e:	4620      	mov	r0, r4
 8002240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002244:	3a30      	subs	r2, #48	@ 0x30
 8002246:	2a09      	cmp	r2, #9
 8002248:	d903      	bls.n	8002252 <_svfiprintf_r+0x1a6>
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0c6      	beq.n	80021dc <_svfiprintf_r+0x130>
 800224e:	9105      	str	r1, [sp, #20]
 8002250:	e7c4      	b.n	80021dc <_svfiprintf_r+0x130>
 8002252:	4604      	mov	r4, r0
 8002254:	2301      	movs	r3, #1
 8002256:	fb0c 2101 	mla	r1, ip, r1, r2
 800225a:	e7f0      	b.n	800223e <_svfiprintf_r+0x192>
 800225c:	ab03      	add	r3, sp, #12
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	462a      	mov	r2, r5
 8002262:	4638      	mov	r0, r7
 8002264:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <_svfiprintf_r+0x1f4>)
 8002266:	a904      	add	r1, sp, #16
 8002268:	f3af 8000 	nop.w
 800226c:	1c42      	adds	r2, r0, #1
 800226e:	4606      	mov	r6, r0
 8002270:	d1d6      	bne.n	8002220 <_svfiprintf_r+0x174>
 8002272:	89ab      	ldrh	r3, [r5, #12]
 8002274:	065b      	lsls	r3, r3, #25
 8002276:	f53f af2d 	bmi.w	80020d4 <_svfiprintf_r+0x28>
 800227a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800227c:	e72c      	b.n	80020d8 <_svfiprintf_r+0x2c>
 800227e:	ab03      	add	r3, sp, #12
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	462a      	mov	r2, r5
 8002284:	4638      	mov	r0, r7
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <_svfiprintf_r+0x1f4>)
 8002288:	a904      	add	r1, sp, #16
 800228a:	f000 f87d 	bl	8002388 <_printf_i>
 800228e:	e7ed      	b.n	800226c <_svfiprintf_r+0x1c0>
 8002290:	08003176 	.word	0x08003176
 8002294:	0800317c 	.word	0x0800317c
 8002298:	08003180 	.word	0x08003180
 800229c:	00000000 	.word	0x00000000
 80022a0:	08001ff5 	.word	0x08001ff5

080022a4 <_printf_common>:
 80022a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022a8:	4616      	mov	r6, r2
 80022aa:	4698      	mov	r8, r3
 80022ac:	688a      	ldr	r2, [r1, #8]
 80022ae:	690b      	ldr	r3, [r1, #16]
 80022b0:	4607      	mov	r7, r0
 80022b2:	4293      	cmp	r3, r2
 80022b4:	bfb8      	it	lt
 80022b6:	4613      	movlt	r3, r2
 80022b8:	6033      	str	r3, [r6, #0]
 80022ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80022be:	460c      	mov	r4, r1
 80022c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80022c4:	b10a      	cbz	r2, 80022ca <_printf_common+0x26>
 80022c6:	3301      	adds	r3, #1
 80022c8:	6033      	str	r3, [r6, #0]
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	0699      	lsls	r1, r3, #26
 80022ce:	bf42      	ittt	mi
 80022d0:	6833      	ldrmi	r3, [r6, #0]
 80022d2:	3302      	addmi	r3, #2
 80022d4:	6033      	strmi	r3, [r6, #0]
 80022d6:	6825      	ldr	r5, [r4, #0]
 80022d8:	f015 0506 	ands.w	r5, r5, #6
 80022dc:	d106      	bne.n	80022ec <_printf_common+0x48>
 80022de:	f104 0a19 	add.w	sl, r4, #25
 80022e2:	68e3      	ldr	r3, [r4, #12]
 80022e4:	6832      	ldr	r2, [r6, #0]
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	42ab      	cmp	r3, r5
 80022ea:	dc2b      	bgt.n	8002344 <_printf_common+0xa0>
 80022ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80022f0:	6822      	ldr	r2, [r4, #0]
 80022f2:	3b00      	subs	r3, #0
 80022f4:	bf18      	it	ne
 80022f6:	2301      	movne	r3, #1
 80022f8:	0692      	lsls	r2, r2, #26
 80022fa:	d430      	bmi.n	800235e <_printf_common+0xba>
 80022fc:	4641      	mov	r1, r8
 80022fe:	4638      	mov	r0, r7
 8002300:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002304:	47c8      	blx	r9
 8002306:	3001      	adds	r0, #1
 8002308:	d023      	beq.n	8002352 <_printf_common+0xae>
 800230a:	6823      	ldr	r3, [r4, #0]
 800230c:	6922      	ldr	r2, [r4, #16]
 800230e:	f003 0306 	and.w	r3, r3, #6
 8002312:	2b04      	cmp	r3, #4
 8002314:	bf14      	ite	ne
 8002316:	2500      	movne	r5, #0
 8002318:	6833      	ldreq	r3, [r6, #0]
 800231a:	f04f 0600 	mov.w	r6, #0
 800231e:	bf08      	it	eq
 8002320:	68e5      	ldreq	r5, [r4, #12]
 8002322:	f104 041a 	add.w	r4, r4, #26
 8002326:	bf08      	it	eq
 8002328:	1aed      	subeq	r5, r5, r3
 800232a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800232e:	bf08      	it	eq
 8002330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002334:	4293      	cmp	r3, r2
 8002336:	bfc4      	itt	gt
 8002338:	1a9b      	subgt	r3, r3, r2
 800233a:	18ed      	addgt	r5, r5, r3
 800233c:	42b5      	cmp	r5, r6
 800233e:	d11a      	bne.n	8002376 <_printf_common+0xd2>
 8002340:	2000      	movs	r0, #0
 8002342:	e008      	b.n	8002356 <_printf_common+0xb2>
 8002344:	2301      	movs	r3, #1
 8002346:	4652      	mov	r2, sl
 8002348:	4641      	mov	r1, r8
 800234a:	4638      	mov	r0, r7
 800234c:	47c8      	blx	r9
 800234e:	3001      	adds	r0, #1
 8002350:	d103      	bne.n	800235a <_printf_common+0xb6>
 8002352:	f04f 30ff 	mov.w	r0, #4294967295
 8002356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800235a:	3501      	adds	r5, #1
 800235c:	e7c1      	b.n	80022e2 <_printf_common+0x3e>
 800235e:	2030      	movs	r0, #48	@ 0x30
 8002360:	18e1      	adds	r1, r4, r3
 8002362:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800236c:	4422      	add	r2, r4
 800236e:	3302      	adds	r3, #2
 8002370:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002374:	e7c2      	b.n	80022fc <_printf_common+0x58>
 8002376:	2301      	movs	r3, #1
 8002378:	4622      	mov	r2, r4
 800237a:	4641      	mov	r1, r8
 800237c:	4638      	mov	r0, r7
 800237e:	47c8      	blx	r9
 8002380:	3001      	adds	r0, #1
 8002382:	d0e6      	beq.n	8002352 <_printf_common+0xae>
 8002384:	3601      	adds	r6, #1
 8002386:	e7d9      	b.n	800233c <_printf_common+0x98>

08002388 <_printf_i>:
 8002388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800238c:	7e0f      	ldrb	r7, [r1, #24]
 800238e:	4691      	mov	r9, r2
 8002390:	2f78      	cmp	r7, #120	@ 0x78
 8002392:	4680      	mov	r8, r0
 8002394:	460c      	mov	r4, r1
 8002396:	469a      	mov	sl, r3
 8002398:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800239a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800239e:	d807      	bhi.n	80023b0 <_printf_i+0x28>
 80023a0:	2f62      	cmp	r7, #98	@ 0x62
 80023a2:	d80a      	bhi.n	80023ba <_printf_i+0x32>
 80023a4:	2f00      	cmp	r7, #0
 80023a6:	f000 80d3 	beq.w	8002550 <_printf_i+0x1c8>
 80023aa:	2f58      	cmp	r7, #88	@ 0x58
 80023ac:	f000 80ba 	beq.w	8002524 <_printf_i+0x19c>
 80023b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80023b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80023b8:	e03a      	b.n	8002430 <_printf_i+0xa8>
 80023ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80023be:	2b15      	cmp	r3, #21
 80023c0:	d8f6      	bhi.n	80023b0 <_printf_i+0x28>
 80023c2:	a101      	add	r1, pc, #4	@ (adr r1, 80023c8 <_printf_i+0x40>)
 80023c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80023c8:	08002421 	.word	0x08002421
 80023cc:	08002435 	.word	0x08002435
 80023d0:	080023b1 	.word	0x080023b1
 80023d4:	080023b1 	.word	0x080023b1
 80023d8:	080023b1 	.word	0x080023b1
 80023dc:	080023b1 	.word	0x080023b1
 80023e0:	08002435 	.word	0x08002435
 80023e4:	080023b1 	.word	0x080023b1
 80023e8:	080023b1 	.word	0x080023b1
 80023ec:	080023b1 	.word	0x080023b1
 80023f0:	080023b1 	.word	0x080023b1
 80023f4:	08002537 	.word	0x08002537
 80023f8:	0800245f 	.word	0x0800245f
 80023fc:	080024f1 	.word	0x080024f1
 8002400:	080023b1 	.word	0x080023b1
 8002404:	080023b1 	.word	0x080023b1
 8002408:	08002559 	.word	0x08002559
 800240c:	080023b1 	.word	0x080023b1
 8002410:	0800245f 	.word	0x0800245f
 8002414:	080023b1 	.word	0x080023b1
 8002418:	080023b1 	.word	0x080023b1
 800241c:	080024f9 	.word	0x080024f9
 8002420:	6833      	ldr	r3, [r6, #0]
 8002422:	1d1a      	adds	r2, r3, #4
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6032      	str	r2, [r6, #0]
 8002428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800242c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002430:	2301      	movs	r3, #1
 8002432:	e09e      	b.n	8002572 <_printf_i+0x1ea>
 8002434:	6833      	ldr	r3, [r6, #0]
 8002436:	6820      	ldr	r0, [r4, #0]
 8002438:	1d19      	adds	r1, r3, #4
 800243a:	6031      	str	r1, [r6, #0]
 800243c:	0606      	lsls	r6, r0, #24
 800243e:	d501      	bpl.n	8002444 <_printf_i+0xbc>
 8002440:	681d      	ldr	r5, [r3, #0]
 8002442:	e003      	b.n	800244c <_printf_i+0xc4>
 8002444:	0645      	lsls	r5, r0, #25
 8002446:	d5fb      	bpl.n	8002440 <_printf_i+0xb8>
 8002448:	f9b3 5000 	ldrsh.w	r5, [r3]
 800244c:	2d00      	cmp	r5, #0
 800244e:	da03      	bge.n	8002458 <_printf_i+0xd0>
 8002450:	232d      	movs	r3, #45	@ 0x2d
 8002452:	426d      	negs	r5, r5
 8002454:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002458:	230a      	movs	r3, #10
 800245a:	4859      	ldr	r0, [pc, #356]	@ (80025c0 <_printf_i+0x238>)
 800245c:	e011      	b.n	8002482 <_printf_i+0xfa>
 800245e:	6821      	ldr	r1, [r4, #0]
 8002460:	6833      	ldr	r3, [r6, #0]
 8002462:	0608      	lsls	r0, r1, #24
 8002464:	f853 5b04 	ldr.w	r5, [r3], #4
 8002468:	d402      	bmi.n	8002470 <_printf_i+0xe8>
 800246a:	0649      	lsls	r1, r1, #25
 800246c:	bf48      	it	mi
 800246e:	b2ad      	uxthmi	r5, r5
 8002470:	2f6f      	cmp	r7, #111	@ 0x6f
 8002472:	6033      	str	r3, [r6, #0]
 8002474:	bf14      	ite	ne
 8002476:	230a      	movne	r3, #10
 8002478:	2308      	moveq	r3, #8
 800247a:	4851      	ldr	r0, [pc, #324]	@ (80025c0 <_printf_i+0x238>)
 800247c:	2100      	movs	r1, #0
 800247e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002482:	6866      	ldr	r6, [r4, #4]
 8002484:	2e00      	cmp	r6, #0
 8002486:	bfa8      	it	ge
 8002488:	6821      	ldrge	r1, [r4, #0]
 800248a:	60a6      	str	r6, [r4, #8]
 800248c:	bfa4      	itt	ge
 800248e:	f021 0104 	bicge.w	r1, r1, #4
 8002492:	6021      	strge	r1, [r4, #0]
 8002494:	b90d      	cbnz	r5, 800249a <_printf_i+0x112>
 8002496:	2e00      	cmp	r6, #0
 8002498:	d04b      	beq.n	8002532 <_printf_i+0x1aa>
 800249a:	4616      	mov	r6, r2
 800249c:	fbb5 f1f3 	udiv	r1, r5, r3
 80024a0:	fb03 5711 	mls	r7, r3, r1, r5
 80024a4:	5dc7      	ldrb	r7, [r0, r7]
 80024a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80024aa:	462f      	mov	r7, r5
 80024ac:	42bb      	cmp	r3, r7
 80024ae:	460d      	mov	r5, r1
 80024b0:	d9f4      	bls.n	800249c <_printf_i+0x114>
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d10b      	bne.n	80024ce <_printf_i+0x146>
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	07df      	lsls	r7, r3, #31
 80024ba:	d508      	bpl.n	80024ce <_printf_i+0x146>
 80024bc:	6923      	ldr	r3, [r4, #16]
 80024be:	6861      	ldr	r1, [r4, #4]
 80024c0:	4299      	cmp	r1, r3
 80024c2:	bfde      	ittt	le
 80024c4:	2330      	movle	r3, #48	@ 0x30
 80024c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80024ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80024ce:	1b92      	subs	r2, r2, r6
 80024d0:	6122      	str	r2, [r4, #16]
 80024d2:	464b      	mov	r3, r9
 80024d4:	4621      	mov	r1, r4
 80024d6:	4640      	mov	r0, r8
 80024d8:	f8cd a000 	str.w	sl, [sp]
 80024dc:	aa03      	add	r2, sp, #12
 80024de:	f7ff fee1 	bl	80022a4 <_printf_common>
 80024e2:	3001      	adds	r0, #1
 80024e4:	d14a      	bne.n	800257c <_printf_i+0x1f4>
 80024e6:	f04f 30ff 	mov.w	r0, #4294967295
 80024ea:	b004      	add	sp, #16
 80024ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	f043 0320 	orr.w	r3, r3, #32
 80024f6:	6023      	str	r3, [r4, #0]
 80024f8:	2778      	movs	r7, #120	@ 0x78
 80024fa:	4832      	ldr	r0, [pc, #200]	@ (80025c4 <_printf_i+0x23c>)
 80024fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	6831      	ldr	r1, [r6, #0]
 8002504:	061f      	lsls	r7, r3, #24
 8002506:	f851 5b04 	ldr.w	r5, [r1], #4
 800250a:	d402      	bmi.n	8002512 <_printf_i+0x18a>
 800250c:	065f      	lsls	r7, r3, #25
 800250e:	bf48      	it	mi
 8002510:	b2ad      	uxthmi	r5, r5
 8002512:	6031      	str	r1, [r6, #0]
 8002514:	07d9      	lsls	r1, r3, #31
 8002516:	bf44      	itt	mi
 8002518:	f043 0320 	orrmi.w	r3, r3, #32
 800251c:	6023      	strmi	r3, [r4, #0]
 800251e:	b11d      	cbz	r5, 8002528 <_printf_i+0x1a0>
 8002520:	2310      	movs	r3, #16
 8002522:	e7ab      	b.n	800247c <_printf_i+0xf4>
 8002524:	4826      	ldr	r0, [pc, #152]	@ (80025c0 <_printf_i+0x238>)
 8002526:	e7e9      	b.n	80024fc <_printf_i+0x174>
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	f023 0320 	bic.w	r3, r3, #32
 800252e:	6023      	str	r3, [r4, #0]
 8002530:	e7f6      	b.n	8002520 <_printf_i+0x198>
 8002532:	4616      	mov	r6, r2
 8002534:	e7bd      	b.n	80024b2 <_printf_i+0x12a>
 8002536:	6833      	ldr	r3, [r6, #0]
 8002538:	6825      	ldr	r5, [r4, #0]
 800253a:	1d18      	adds	r0, r3, #4
 800253c:	6961      	ldr	r1, [r4, #20]
 800253e:	6030      	str	r0, [r6, #0]
 8002540:	062e      	lsls	r6, r5, #24
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	d501      	bpl.n	800254a <_printf_i+0x1c2>
 8002546:	6019      	str	r1, [r3, #0]
 8002548:	e002      	b.n	8002550 <_printf_i+0x1c8>
 800254a:	0668      	lsls	r0, r5, #25
 800254c:	d5fb      	bpl.n	8002546 <_printf_i+0x1be>
 800254e:	8019      	strh	r1, [r3, #0]
 8002550:	2300      	movs	r3, #0
 8002552:	4616      	mov	r6, r2
 8002554:	6123      	str	r3, [r4, #16]
 8002556:	e7bc      	b.n	80024d2 <_printf_i+0x14a>
 8002558:	6833      	ldr	r3, [r6, #0]
 800255a:	2100      	movs	r1, #0
 800255c:	1d1a      	adds	r2, r3, #4
 800255e:	6032      	str	r2, [r6, #0]
 8002560:	681e      	ldr	r6, [r3, #0]
 8002562:	6862      	ldr	r2, [r4, #4]
 8002564:	4630      	mov	r0, r6
 8002566:	f000 f913 	bl	8002790 <memchr>
 800256a:	b108      	cbz	r0, 8002570 <_printf_i+0x1e8>
 800256c:	1b80      	subs	r0, r0, r6
 800256e:	6060      	str	r0, [r4, #4]
 8002570:	6863      	ldr	r3, [r4, #4]
 8002572:	6123      	str	r3, [r4, #16]
 8002574:	2300      	movs	r3, #0
 8002576:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800257a:	e7aa      	b.n	80024d2 <_printf_i+0x14a>
 800257c:	4632      	mov	r2, r6
 800257e:	4649      	mov	r1, r9
 8002580:	4640      	mov	r0, r8
 8002582:	6923      	ldr	r3, [r4, #16]
 8002584:	47d0      	blx	sl
 8002586:	3001      	adds	r0, #1
 8002588:	d0ad      	beq.n	80024e6 <_printf_i+0x15e>
 800258a:	6823      	ldr	r3, [r4, #0]
 800258c:	079b      	lsls	r3, r3, #30
 800258e:	d413      	bmi.n	80025b8 <_printf_i+0x230>
 8002590:	68e0      	ldr	r0, [r4, #12]
 8002592:	9b03      	ldr	r3, [sp, #12]
 8002594:	4298      	cmp	r0, r3
 8002596:	bfb8      	it	lt
 8002598:	4618      	movlt	r0, r3
 800259a:	e7a6      	b.n	80024ea <_printf_i+0x162>
 800259c:	2301      	movs	r3, #1
 800259e:	4632      	mov	r2, r6
 80025a0:	4649      	mov	r1, r9
 80025a2:	4640      	mov	r0, r8
 80025a4:	47d0      	blx	sl
 80025a6:	3001      	adds	r0, #1
 80025a8:	d09d      	beq.n	80024e6 <_printf_i+0x15e>
 80025aa:	3501      	adds	r5, #1
 80025ac:	68e3      	ldr	r3, [r4, #12]
 80025ae:	9903      	ldr	r1, [sp, #12]
 80025b0:	1a5b      	subs	r3, r3, r1
 80025b2:	42ab      	cmp	r3, r5
 80025b4:	dcf2      	bgt.n	800259c <_printf_i+0x214>
 80025b6:	e7eb      	b.n	8002590 <_printf_i+0x208>
 80025b8:	2500      	movs	r5, #0
 80025ba:	f104 0619 	add.w	r6, r4, #25
 80025be:	e7f5      	b.n	80025ac <_printf_i+0x224>
 80025c0:	08003187 	.word	0x08003187
 80025c4:	08003198 	.word	0x08003198

080025c8 <__sflush_r>:
 80025c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ce:	0716      	lsls	r6, r2, #28
 80025d0:	4605      	mov	r5, r0
 80025d2:	460c      	mov	r4, r1
 80025d4:	d454      	bmi.n	8002680 <__sflush_r+0xb8>
 80025d6:	684b      	ldr	r3, [r1, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	dc02      	bgt.n	80025e2 <__sflush_r+0x1a>
 80025dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	dd48      	ble.n	8002674 <__sflush_r+0xac>
 80025e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80025e4:	2e00      	cmp	r6, #0
 80025e6:	d045      	beq.n	8002674 <__sflush_r+0xac>
 80025e8:	2300      	movs	r3, #0
 80025ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80025ee:	682f      	ldr	r7, [r5, #0]
 80025f0:	6a21      	ldr	r1, [r4, #32]
 80025f2:	602b      	str	r3, [r5, #0]
 80025f4:	d030      	beq.n	8002658 <__sflush_r+0x90>
 80025f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80025f8:	89a3      	ldrh	r3, [r4, #12]
 80025fa:	0759      	lsls	r1, r3, #29
 80025fc:	d505      	bpl.n	800260a <__sflush_r+0x42>
 80025fe:	6863      	ldr	r3, [r4, #4]
 8002600:	1ad2      	subs	r2, r2, r3
 8002602:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002604:	b10b      	cbz	r3, 800260a <__sflush_r+0x42>
 8002606:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002608:	1ad2      	subs	r2, r2, r3
 800260a:	2300      	movs	r3, #0
 800260c:	4628      	mov	r0, r5
 800260e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002610:	6a21      	ldr	r1, [r4, #32]
 8002612:	47b0      	blx	r6
 8002614:	1c43      	adds	r3, r0, #1
 8002616:	89a3      	ldrh	r3, [r4, #12]
 8002618:	d106      	bne.n	8002628 <__sflush_r+0x60>
 800261a:	6829      	ldr	r1, [r5, #0]
 800261c:	291d      	cmp	r1, #29
 800261e:	d82b      	bhi.n	8002678 <__sflush_r+0xb0>
 8002620:	4a28      	ldr	r2, [pc, #160]	@ (80026c4 <__sflush_r+0xfc>)
 8002622:	410a      	asrs	r2, r1
 8002624:	07d6      	lsls	r6, r2, #31
 8002626:	d427      	bmi.n	8002678 <__sflush_r+0xb0>
 8002628:	2200      	movs	r2, #0
 800262a:	6062      	str	r2, [r4, #4]
 800262c:	6922      	ldr	r2, [r4, #16]
 800262e:	04d9      	lsls	r1, r3, #19
 8002630:	6022      	str	r2, [r4, #0]
 8002632:	d504      	bpl.n	800263e <__sflush_r+0x76>
 8002634:	1c42      	adds	r2, r0, #1
 8002636:	d101      	bne.n	800263c <__sflush_r+0x74>
 8002638:	682b      	ldr	r3, [r5, #0]
 800263a:	b903      	cbnz	r3, 800263e <__sflush_r+0x76>
 800263c:	6560      	str	r0, [r4, #84]	@ 0x54
 800263e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002640:	602f      	str	r7, [r5, #0]
 8002642:	b1b9      	cbz	r1, 8002674 <__sflush_r+0xac>
 8002644:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002648:	4299      	cmp	r1, r3
 800264a:	d002      	beq.n	8002652 <__sflush_r+0x8a>
 800264c:	4628      	mov	r0, r5
 800264e:	f7ff fbd3 	bl	8001df8 <_free_r>
 8002652:	2300      	movs	r3, #0
 8002654:	6363      	str	r3, [r4, #52]	@ 0x34
 8002656:	e00d      	b.n	8002674 <__sflush_r+0xac>
 8002658:	2301      	movs	r3, #1
 800265a:	4628      	mov	r0, r5
 800265c:	47b0      	blx	r6
 800265e:	4602      	mov	r2, r0
 8002660:	1c50      	adds	r0, r2, #1
 8002662:	d1c9      	bne.n	80025f8 <__sflush_r+0x30>
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0c6      	beq.n	80025f8 <__sflush_r+0x30>
 800266a:	2b1d      	cmp	r3, #29
 800266c:	d001      	beq.n	8002672 <__sflush_r+0xaa>
 800266e:	2b16      	cmp	r3, #22
 8002670:	d11d      	bne.n	80026ae <__sflush_r+0xe6>
 8002672:	602f      	str	r7, [r5, #0]
 8002674:	2000      	movs	r0, #0
 8002676:	e021      	b.n	80026bc <__sflush_r+0xf4>
 8002678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800267c:	b21b      	sxth	r3, r3
 800267e:	e01a      	b.n	80026b6 <__sflush_r+0xee>
 8002680:	690f      	ldr	r7, [r1, #16]
 8002682:	2f00      	cmp	r7, #0
 8002684:	d0f6      	beq.n	8002674 <__sflush_r+0xac>
 8002686:	0793      	lsls	r3, r2, #30
 8002688:	bf18      	it	ne
 800268a:	2300      	movne	r3, #0
 800268c:	680e      	ldr	r6, [r1, #0]
 800268e:	bf08      	it	eq
 8002690:	694b      	ldreq	r3, [r1, #20]
 8002692:	1bf6      	subs	r6, r6, r7
 8002694:	600f      	str	r7, [r1, #0]
 8002696:	608b      	str	r3, [r1, #8]
 8002698:	2e00      	cmp	r6, #0
 800269a:	ddeb      	ble.n	8002674 <__sflush_r+0xac>
 800269c:	4633      	mov	r3, r6
 800269e:	463a      	mov	r2, r7
 80026a0:	4628      	mov	r0, r5
 80026a2:	6a21      	ldr	r1, [r4, #32]
 80026a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80026a8:	47e0      	blx	ip
 80026aa:	2800      	cmp	r0, #0
 80026ac:	dc07      	bgt.n	80026be <__sflush_r+0xf6>
 80026ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026b6:	f04f 30ff 	mov.w	r0, #4294967295
 80026ba:	81a3      	strh	r3, [r4, #12]
 80026bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026be:	4407      	add	r7, r0
 80026c0:	1a36      	subs	r6, r6, r0
 80026c2:	e7e9      	b.n	8002698 <__sflush_r+0xd0>
 80026c4:	dfbffffe 	.word	0xdfbffffe

080026c8 <_fflush_r>:
 80026c8:	b538      	push	{r3, r4, r5, lr}
 80026ca:	690b      	ldr	r3, [r1, #16]
 80026cc:	4605      	mov	r5, r0
 80026ce:	460c      	mov	r4, r1
 80026d0:	b913      	cbnz	r3, 80026d8 <_fflush_r+0x10>
 80026d2:	2500      	movs	r5, #0
 80026d4:	4628      	mov	r0, r5
 80026d6:	bd38      	pop	{r3, r4, r5, pc}
 80026d8:	b118      	cbz	r0, 80026e2 <_fflush_r+0x1a>
 80026da:	6a03      	ldr	r3, [r0, #32]
 80026dc:	b90b      	cbnz	r3, 80026e2 <_fflush_r+0x1a>
 80026de:	f7ff fa57 	bl	8001b90 <__sinit>
 80026e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f3      	beq.n	80026d2 <_fflush_r+0xa>
 80026ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80026ec:	07d0      	lsls	r0, r2, #31
 80026ee:	d404      	bmi.n	80026fa <_fflush_r+0x32>
 80026f0:	0599      	lsls	r1, r3, #22
 80026f2:	d402      	bmi.n	80026fa <_fflush_r+0x32>
 80026f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80026f6:	f7ff fb5e 	bl	8001db6 <__retarget_lock_acquire_recursive>
 80026fa:	4628      	mov	r0, r5
 80026fc:	4621      	mov	r1, r4
 80026fe:	f7ff ff63 	bl	80025c8 <__sflush_r>
 8002702:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002704:	4605      	mov	r5, r0
 8002706:	07da      	lsls	r2, r3, #31
 8002708:	d4e4      	bmi.n	80026d4 <_fflush_r+0xc>
 800270a:	89a3      	ldrh	r3, [r4, #12]
 800270c:	059b      	lsls	r3, r3, #22
 800270e:	d4e1      	bmi.n	80026d4 <_fflush_r+0xc>
 8002710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002712:	f7ff fb51 	bl	8001db8 <__retarget_lock_release_recursive>
 8002716:	e7dd      	b.n	80026d4 <_fflush_r+0xc>

08002718 <fiprintf>:
 8002718:	b40e      	push	{r1, r2, r3}
 800271a:	b503      	push	{r0, r1, lr}
 800271c:	4601      	mov	r1, r0
 800271e:	ab03      	add	r3, sp, #12
 8002720:	4805      	ldr	r0, [pc, #20]	@ (8002738 <fiprintf+0x20>)
 8002722:	f853 2b04 	ldr.w	r2, [r3], #4
 8002726:	6800      	ldr	r0, [r0, #0]
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	f000 f8a9 	bl	8002880 <_vfiprintf_r>
 800272e:	b002      	add	sp, #8
 8002730:	f85d eb04 	ldr.w	lr, [sp], #4
 8002734:	b003      	add	sp, #12
 8002736:	4770      	bx	lr
 8002738:	20000018 	.word	0x20000018

0800273c <memmove>:
 800273c:	4288      	cmp	r0, r1
 800273e:	b510      	push	{r4, lr}
 8002740:	eb01 0402 	add.w	r4, r1, r2
 8002744:	d902      	bls.n	800274c <memmove+0x10>
 8002746:	4284      	cmp	r4, r0
 8002748:	4623      	mov	r3, r4
 800274a:	d807      	bhi.n	800275c <memmove+0x20>
 800274c:	1e43      	subs	r3, r0, #1
 800274e:	42a1      	cmp	r1, r4
 8002750:	d008      	beq.n	8002764 <memmove+0x28>
 8002752:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002756:	f803 2f01 	strb.w	r2, [r3, #1]!
 800275a:	e7f8      	b.n	800274e <memmove+0x12>
 800275c:	4601      	mov	r1, r0
 800275e:	4402      	add	r2, r0
 8002760:	428a      	cmp	r2, r1
 8002762:	d100      	bne.n	8002766 <memmove+0x2a>
 8002764:	bd10      	pop	{r4, pc}
 8002766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800276a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800276e:	e7f7      	b.n	8002760 <memmove+0x24>

08002770 <_sbrk_r>:
 8002770:	b538      	push	{r3, r4, r5, lr}
 8002772:	2300      	movs	r3, #0
 8002774:	4d05      	ldr	r5, [pc, #20]	@ (800278c <_sbrk_r+0x1c>)
 8002776:	4604      	mov	r4, r0
 8002778:	4608      	mov	r0, r1
 800277a:	602b      	str	r3, [r5, #0]
 800277c:	f7fe f95e 	bl	8000a3c <_sbrk>
 8002780:	1c43      	adds	r3, r0, #1
 8002782:	d102      	bne.n	800278a <_sbrk_r+0x1a>
 8002784:	682b      	ldr	r3, [r5, #0]
 8002786:	b103      	cbz	r3, 800278a <_sbrk_r+0x1a>
 8002788:	6023      	str	r3, [r4, #0]
 800278a:	bd38      	pop	{r3, r4, r5, pc}
 800278c:	20000c20 	.word	0x20000c20

08002790 <memchr>:
 8002790:	4603      	mov	r3, r0
 8002792:	b510      	push	{r4, lr}
 8002794:	b2c9      	uxtb	r1, r1
 8002796:	4402      	add	r2, r0
 8002798:	4293      	cmp	r3, r2
 800279a:	4618      	mov	r0, r3
 800279c:	d101      	bne.n	80027a2 <memchr+0x12>
 800279e:	2000      	movs	r0, #0
 80027a0:	e003      	b.n	80027aa <memchr+0x1a>
 80027a2:	7804      	ldrb	r4, [r0, #0]
 80027a4:	3301      	adds	r3, #1
 80027a6:	428c      	cmp	r4, r1
 80027a8:	d1f6      	bne.n	8002798 <memchr+0x8>
 80027aa:	bd10      	pop	{r4, pc}

080027ac <memcpy>:
 80027ac:	440a      	add	r2, r1
 80027ae:	4291      	cmp	r1, r2
 80027b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80027b4:	d100      	bne.n	80027b8 <memcpy+0xc>
 80027b6:	4770      	bx	lr
 80027b8:	b510      	push	{r4, lr}
 80027ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027be:	4291      	cmp	r1, r2
 80027c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80027c4:	d1f9      	bne.n	80027ba <memcpy+0xe>
 80027c6:	bd10      	pop	{r4, pc}

080027c8 <abort>:
 80027c8:	2006      	movs	r0, #6
 80027ca:	b508      	push	{r3, lr}
 80027cc:	f000 fa2c 	bl	8002c28 <raise>
 80027d0:	2001      	movs	r0, #1
 80027d2:	f7fe f905 	bl	80009e0 <_exit>

080027d6 <_realloc_r>:
 80027d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027da:	4680      	mov	r8, r0
 80027dc:	4615      	mov	r5, r2
 80027de:	460c      	mov	r4, r1
 80027e0:	b921      	cbnz	r1, 80027ec <_realloc_r+0x16>
 80027e2:	4611      	mov	r1, r2
 80027e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027e8:	f7ff bb78 	b.w	8001edc <_malloc_r>
 80027ec:	b92a      	cbnz	r2, 80027fa <_realloc_r+0x24>
 80027ee:	f7ff fb03 	bl	8001df8 <_free_r>
 80027f2:	2400      	movs	r4, #0
 80027f4:	4620      	mov	r0, r4
 80027f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027fa:	f000 fa31 	bl	8002c60 <_malloc_usable_size_r>
 80027fe:	4285      	cmp	r5, r0
 8002800:	4606      	mov	r6, r0
 8002802:	d802      	bhi.n	800280a <_realloc_r+0x34>
 8002804:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002808:	d8f4      	bhi.n	80027f4 <_realloc_r+0x1e>
 800280a:	4629      	mov	r1, r5
 800280c:	4640      	mov	r0, r8
 800280e:	f7ff fb65 	bl	8001edc <_malloc_r>
 8002812:	4607      	mov	r7, r0
 8002814:	2800      	cmp	r0, #0
 8002816:	d0ec      	beq.n	80027f2 <_realloc_r+0x1c>
 8002818:	42b5      	cmp	r5, r6
 800281a:	462a      	mov	r2, r5
 800281c:	4621      	mov	r1, r4
 800281e:	bf28      	it	cs
 8002820:	4632      	movcs	r2, r6
 8002822:	f7ff ffc3 	bl	80027ac <memcpy>
 8002826:	4621      	mov	r1, r4
 8002828:	4640      	mov	r0, r8
 800282a:	f7ff fae5 	bl	8001df8 <_free_r>
 800282e:	463c      	mov	r4, r7
 8002830:	e7e0      	b.n	80027f4 <_realloc_r+0x1e>

08002832 <__sfputc_r>:
 8002832:	6893      	ldr	r3, [r2, #8]
 8002834:	b410      	push	{r4}
 8002836:	3b01      	subs	r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	6093      	str	r3, [r2, #8]
 800283c:	da07      	bge.n	800284e <__sfputc_r+0x1c>
 800283e:	6994      	ldr	r4, [r2, #24]
 8002840:	42a3      	cmp	r3, r4
 8002842:	db01      	blt.n	8002848 <__sfputc_r+0x16>
 8002844:	290a      	cmp	r1, #10
 8002846:	d102      	bne.n	800284e <__sfputc_r+0x1c>
 8002848:	bc10      	pop	{r4}
 800284a:	f000 b931 	b.w	8002ab0 <__swbuf_r>
 800284e:	6813      	ldr	r3, [r2, #0]
 8002850:	1c58      	adds	r0, r3, #1
 8002852:	6010      	str	r0, [r2, #0]
 8002854:	7019      	strb	r1, [r3, #0]
 8002856:	4608      	mov	r0, r1
 8002858:	bc10      	pop	{r4}
 800285a:	4770      	bx	lr

0800285c <__sfputs_r>:
 800285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285e:	4606      	mov	r6, r0
 8002860:	460f      	mov	r7, r1
 8002862:	4614      	mov	r4, r2
 8002864:	18d5      	adds	r5, r2, r3
 8002866:	42ac      	cmp	r4, r5
 8002868:	d101      	bne.n	800286e <__sfputs_r+0x12>
 800286a:	2000      	movs	r0, #0
 800286c:	e007      	b.n	800287e <__sfputs_r+0x22>
 800286e:	463a      	mov	r2, r7
 8002870:	4630      	mov	r0, r6
 8002872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002876:	f7ff ffdc 	bl	8002832 <__sfputc_r>
 800287a:	1c43      	adds	r3, r0, #1
 800287c:	d1f3      	bne.n	8002866 <__sfputs_r+0xa>
 800287e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002880 <_vfiprintf_r>:
 8002880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002884:	460d      	mov	r5, r1
 8002886:	4614      	mov	r4, r2
 8002888:	4698      	mov	r8, r3
 800288a:	4606      	mov	r6, r0
 800288c:	b09d      	sub	sp, #116	@ 0x74
 800288e:	b118      	cbz	r0, 8002898 <_vfiprintf_r+0x18>
 8002890:	6a03      	ldr	r3, [r0, #32]
 8002892:	b90b      	cbnz	r3, 8002898 <_vfiprintf_r+0x18>
 8002894:	f7ff f97c 	bl	8001b90 <__sinit>
 8002898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800289a:	07d9      	lsls	r1, r3, #31
 800289c:	d405      	bmi.n	80028aa <_vfiprintf_r+0x2a>
 800289e:	89ab      	ldrh	r3, [r5, #12]
 80028a0:	059a      	lsls	r2, r3, #22
 80028a2:	d402      	bmi.n	80028aa <_vfiprintf_r+0x2a>
 80028a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80028a6:	f7ff fa86 	bl	8001db6 <__retarget_lock_acquire_recursive>
 80028aa:	89ab      	ldrh	r3, [r5, #12]
 80028ac:	071b      	lsls	r3, r3, #28
 80028ae:	d501      	bpl.n	80028b4 <_vfiprintf_r+0x34>
 80028b0:	692b      	ldr	r3, [r5, #16]
 80028b2:	b99b      	cbnz	r3, 80028dc <_vfiprintf_r+0x5c>
 80028b4:	4629      	mov	r1, r5
 80028b6:	4630      	mov	r0, r6
 80028b8:	f000 f938 	bl	8002b2c <__swsetup_r>
 80028bc:	b170      	cbz	r0, 80028dc <_vfiprintf_r+0x5c>
 80028be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80028c0:	07dc      	lsls	r4, r3, #31
 80028c2:	d504      	bpl.n	80028ce <_vfiprintf_r+0x4e>
 80028c4:	f04f 30ff 	mov.w	r0, #4294967295
 80028c8:	b01d      	add	sp, #116	@ 0x74
 80028ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028ce:	89ab      	ldrh	r3, [r5, #12]
 80028d0:	0598      	lsls	r0, r3, #22
 80028d2:	d4f7      	bmi.n	80028c4 <_vfiprintf_r+0x44>
 80028d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80028d6:	f7ff fa6f 	bl	8001db8 <__retarget_lock_release_recursive>
 80028da:	e7f3      	b.n	80028c4 <_vfiprintf_r+0x44>
 80028dc:	2300      	movs	r3, #0
 80028de:	9309      	str	r3, [sp, #36]	@ 0x24
 80028e0:	2320      	movs	r3, #32
 80028e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80028e6:	2330      	movs	r3, #48	@ 0x30
 80028e8:	f04f 0901 	mov.w	r9, #1
 80028ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80028f0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002a9c <_vfiprintf_r+0x21c>
 80028f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80028f8:	4623      	mov	r3, r4
 80028fa:	469a      	mov	sl, r3
 80028fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002900:	b10a      	cbz	r2, 8002906 <_vfiprintf_r+0x86>
 8002902:	2a25      	cmp	r2, #37	@ 0x25
 8002904:	d1f9      	bne.n	80028fa <_vfiprintf_r+0x7a>
 8002906:	ebba 0b04 	subs.w	fp, sl, r4
 800290a:	d00b      	beq.n	8002924 <_vfiprintf_r+0xa4>
 800290c:	465b      	mov	r3, fp
 800290e:	4622      	mov	r2, r4
 8002910:	4629      	mov	r1, r5
 8002912:	4630      	mov	r0, r6
 8002914:	f7ff ffa2 	bl	800285c <__sfputs_r>
 8002918:	3001      	adds	r0, #1
 800291a:	f000 80a7 	beq.w	8002a6c <_vfiprintf_r+0x1ec>
 800291e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002920:	445a      	add	r2, fp
 8002922:	9209      	str	r2, [sp, #36]	@ 0x24
 8002924:	f89a 3000 	ldrb.w	r3, [sl]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 809f 	beq.w	8002a6c <_vfiprintf_r+0x1ec>
 800292e:	2300      	movs	r3, #0
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002938:	f10a 0a01 	add.w	sl, sl, #1
 800293c:	9304      	str	r3, [sp, #16]
 800293e:	9307      	str	r3, [sp, #28]
 8002940:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002944:	931a      	str	r3, [sp, #104]	@ 0x68
 8002946:	4654      	mov	r4, sl
 8002948:	2205      	movs	r2, #5
 800294a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800294e:	4853      	ldr	r0, [pc, #332]	@ (8002a9c <_vfiprintf_r+0x21c>)
 8002950:	f7ff ff1e 	bl	8002790 <memchr>
 8002954:	9a04      	ldr	r2, [sp, #16]
 8002956:	b9d8      	cbnz	r0, 8002990 <_vfiprintf_r+0x110>
 8002958:	06d1      	lsls	r1, r2, #27
 800295a:	bf44      	itt	mi
 800295c:	2320      	movmi	r3, #32
 800295e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002962:	0713      	lsls	r3, r2, #28
 8002964:	bf44      	itt	mi
 8002966:	232b      	movmi	r3, #43	@ 0x2b
 8002968:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800296c:	f89a 3000 	ldrb.w	r3, [sl]
 8002970:	2b2a      	cmp	r3, #42	@ 0x2a
 8002972:	d015      	beq.n	80029a0 <_vfiprintf_r+0x120>
 8002974:	4654      	mov	r4, sl
 8002976:	2000      	movs	r0, #0
 8002978:	f04f 0c0a 	mov.w	ip, #10
 800297c:	9a07      	ldr	r2, [sp, #28]
 800297e:	4621      	mov	r1, r4
 8002980:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002984:	3b30      	subs	r3, #48	@ 0x30
 8002986:	2b09      	cmp	r3, #9
 8002988:	d94b      	bls.n	8002a22 <_vfiprintf_r+0x1a2>
 800298a:	b1b0      	cbz	r0, 80029ba <_vfiprintf_r+0x13a>
 800298c:	9207      	str	r2, [sp, #28]
 800298e:	e014      	b.n	80029ba <_vfiprintf_r+0x13a>
 8002990:	eba0 0308 	sub.w	r3, r0, r8
 8002994:	fa09 f303 	lsl.w	r3, r9, r3
 8002998:	4313      	orrs	r3, r2
 800299a:	46a2      	mov	sl, r4
 800299c:	9304      	str	r3, [sp, #16]
 800299e:	e7d2      	b.n	8002946 <_vfiprintf_r+0xc6>
 80029a0:	9b03      	ldr	r3, [sp, #12]
 80029a2:	1d19      	adds	r1, r3, #4
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	9103      	str	r1, [sp, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bfbb      	ittet	lt
 80029ac:	425b      	neglt	r3, r3
 80029ae:	f042 0202 	orrlt.w	r2, r2, #2
 80029b2:	9307      	strge	r3, [sp, #28]
 80029b4:	9307      	strlt	r3, [sp, #28]
 80029b6:	bfb8      	it	lt
 80029b8:	9204      	strlt	r2, [sp, #16]
 80029ba:	7823      	ldrb	r3, [r4, #0]
 80029bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80029be:	d10a      	bne.n	80029d6 <_vfiprintf_r+0x156>
 80029c0:	7863      	ldrb	r3, [r4, #1]
 80029c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80029c4:	d132      	bne.n	8002a2c <_vfiprintf_r+0x1ac>
 80029c6:	9b03      	ldr	r3, [sp, #12]
 80029c8:	3402      	adds	r4, #2
 80029ca:	1d1a      	adds	r2, r3, #4
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	9203      	str	r2, [sp, #12]
 80029d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80029d4:	9305      	str	r3, [sp, #20]
 80029d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002aa0 <_vfiprintf_r+0x220>
 80029da:	2203      	movs	r2, #3
 80029dc:	4650      	mov	r0, sl
 80029de:	7821      	ldrb	r1, [r4, #0]
 80029e0:	f7ff fed6 	bl	8002790 <memchr>
 80029e4:	b138      	cbz	r0, 80029f6 <_vfiprintf_r+0x176>
 80029e6:	2240      	movs	r2, #64	@ 0x40
 80029e8:	9b04      	ldr	r3, [sp, #16]
 80029ea:	eba0 000a 	sub.w	r0, r0, sl
 80029ee:	4082      	lsls	r2, r0
 80029f0:	4313      	orrs	r3, r2
 80029f2:	3401      	adds	r4, #1
 80029f4:	9304      	str	r3, [sp, #16]
 80029f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029fa:	2206      	movs	r2, #6
 80029fc:	4829      	ldr	r0, [pc, #164]	@ (8002aa4 <_vfiprintf_r+0x224>)
 80029fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002a02:	f7ff fec5 	bl	8002790 <memchr>
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d03f      	beq.n	8002a8a <_vfiprintf_r+0x20a>
 8002a0a:	4b27      	ldr	r3, [pc, #156]	@ (8002aa8 <_vfiprintf_r+0x228>)
 8002a0c:	bb1b      	cbnz	r3, 8002a56 <_vfiprintf_r+0x1d6>
 8002a0e:	9b03      	ldr	r3, [sp, #12]
 8002a10:	3307      	adds	r3, #7
 8002a12:	f023 0307 	bic.w	r3, r3, #7
 8002a16:	3308      	adds	r3, #8
 8002a18:	9303      	str	r3, [sp, #12]
 8002a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a1c:	443b      	add	r3, r7
 8002a1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a20:	e76a      	b.n	80028f8 <_vfiprintf_r+0x78>
 8002a22:	460c      	mov	r4, r1
 8002a24:	2001      	movs	r0, #1
 8002a26:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a2a:	e7a8      	b.n	800297e <_vfiprintf_r+0xfe>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f04f 0c0a 	mov.w	ip, #10
 8002a32:	4619      	mov	r1, r3
 8002a34:	3401      	adds	r4, #1
 8002a36:	9305      	str	r3, [sp, #20]
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a3e:	3a30      	subs	r2, #48	@ 0x30
 8002a40:	2a09      	cmp	r2, #9
 8002a42:	d903      	bls.n	8002a4c <_vfiprintf_r+0x1cc>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0c6      	beq.n	80029d6 <_vfiprintf_r+0x156>
 8002a48:	9105      	str	r1, [sp, #20]
 8002a4a:	e7c4      	b.n	80029d6 <_vfiprintf_r+0x156>
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	2301      	movs	r3, #1
 8002a50:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a54:	e7f0      	b.n	8002a38 <_vfiprintf_r+0x1b8>
 8002a56:	ab03      	add	r3, sp, #12
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	462a      	mov	r2, r5
 8002a5c:	4630      	mov	r0, r6
 8002a5e:	4b13      	ldr	r3, [pc, #76]	@ (8002aac <_vfiprintf_r+0x22c>)
 8002a60:	a904      	add	r1, sp, #16
 8002a62:	f3af 8000 	nop.w
 8002a66:	4607      	mov	r7, r0
 8002a68:	1c78      	adds	r0, r7, #1
 8002a6a:	d1d6      	bne.n	8002a1a <_vfiprintf_r+0x19a>
 8002a6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002a6e:	07d9      	lsls	r1, r3, #31
 8002a70:	d405      	bmi.n	8002a7e <_vfiprintf_r+0x1fe>
 8002a72:	89ab      	ldrh	r3, [r5, #12]
 8002a74:	059a      	lsls	r2, r3, #22
 8002a76:	d402      	bmi.n	8002a7e <_vfiprintf_r+0x1fe>
 8002a78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a7a:	f7ff f99d 	bl	8001db8 <__retarget_lock_release_recursive>
 8002a7e:	89ab      	ldrh	r3, [r5, #12]
 8002a80:	065b      	lsls	r3, r3, #25
 8002a82:	f53f af1f 	bmi.w	80028c4 <_vfiprintf_r+0x44>
 8002a86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002a88:	e71e      	b.n	80028c8 <_vfiprintf_r+0x48>
 8002a8a:	ab03      	add	r3, sp, #12
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	462a      	mov	r2, r5
 8002a90:	4630      	mov	r0, r6
 8002a92:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <_vfiprintf_r+0x22c>)
 8002a94:	a904      	add	r1, sp, #16
 8002a96:	f7ff fc77 	bl	8002388 <_printf_i>
 8002a9a:	e7e4      	b.n	8002a66 <_vfiprintf_r+0x1e6>
 8002a9c:	08003176 	.word	0x08003176
 8002aa0:	0800317c 	.word	0x0800317c
 8002aa4:	08003180 	.word	0x08003180
 8002aa8:	00000000 	.word	0x00000000
 8002aac:	0800285d 	.word	0x0800285d

08002ab0 <__swbuf_r>:
 8002ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab2:	460e      	mov	r6, r1
 8002ab4:	4614      	mov	r4, r2
 8002ab6:	4605      	mov	r5, r0
 8002ab8:	b118      	cbz	r0, 8002ac2 <__swbuf_r+0x12>
 8002aba:	6a03      	ldr	r3, [r0, #32]
 8002abc:	b90b      	cbnz	r3, 8002ac2 <__swbuf_r+0x12>
 8002abe:	f7ff f867 	bl	8001b90 <__sinit>
 8002ac2:	69a3      	ldr	r3, [r4, #24]
 8002ac4:	60a3      	str	r3, [r4, #8]
 8002ac6:	89a3      	ldrh	r3, [r4, #12]
 8002ac8:	071a      	lsls	r2, r3, #28
 8002aca:	d501      	bpl.n	8002ad0 <__swbuf_r+0x20>
 8002acc:	6923      	ldr	r3, [r4, #16]
 8002ace:	b943      	cbnz	r3, 8002ae2 <__swbuf_r+0x32>
 8002ad0:	4621      	mov	r1, r4
 8002ad2:	4628      	mov	r0, r5
 8002ad4:	f000 f82a 	bl	8002b2c <__swsetup_r>
 8002ad8:	b118      	cbz	r0, 8002ae2 <__swbuf_r+0x32>
 8002ada:	f04f 37ff 	mov.w	r7, #4294967295
 8002ade:	4638      	mov	r0, r7
 8002ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ae2:	6823      	ldr	r3, [r4, #0]
 8002ae4:	6922      	ldr	r2, [r4, #16]
 8002ae6:	b2f6      	uxtb	r6, r6
 8002ae8:	1a98      	subs	r0, r3, r2
 8002aea:	6963      	ldr	r3, [r4, #20]
 8002aec:	4637      	mov	r7, r6
 8002aee:	4283      	cmp	r3, r0
 8002af0:	dc05      	bgt.n	8002afe <__swbuf_r+0x4e>
 8002af2:	4621      	mov	r1, r4
 8002af4:	4628      	mov	r0, r5
 8002af6:	f7ff fde7 	bl	80026c8 <_fflush_r>
 8002afa:	2800      	cmp	r0, #0
 8002afc:	d1ed      	bne.n	8002ada <__swbuf_r+0x2a>
 8002afe:	68a3      	ldr	r3, [r4, #8]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60a3      	str	r3, [r4, #8]
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	6022      	str	r2, [r4, #0]
 8002b0a:	701e      	strb	r6, [r3, #0]
 8002b0c:	6962      	ldr	r2, [r4, #20]
 8002b0e:	1c43      	adds	r3, r0, #1
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d004      	beq.n	8002b1e <__swbuf_r+0x6e>
 8002b14:	89a3      	ldrh	r3, [r4, #12]
 8002b16:	07db      	lsls	r3, r3, #31
 8002b18:	d5e1      	bpl.n	8002ade <__swbuf_r+0x2e>
 8002b1a:	2e0a      	cmp	r6, #10
 8002b1c:	d1df      	bne.n	8002ade <__swbuf_r+0x2e>
 8002b1e:	4621      	mov	r1, r4
 8002b20:	4628      	mov	r0, r5
 8002b22:	f7ff fdd1 	bl	80026c8 <_fflush_r>
 8002b26:	2800      	cmp	r0, #0
 8002b28:	d0d9      	beq.n	8002ade <__swbuf_r+0x2e>
 8002b2a:	e7d6      	b.n	8002ada <__swbuf_r+0x2a>

08002b2c <__swsetup_r>:
 8002b2c:	b538      	push	{r3, r4, r5, lr}
 8002b2e:	4b29      	ldr	r3, [pc, #164]	@ (8002bd4 <__swsetup_r+0xa8>)
 8002b30:	4605      	mov	r5, r0
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	460c      	mov	r4, r1
 8002b36:	b118      	cbz	r0, 8002b40 <__swsetup_r+0x14>
 8002b38:	6a03      	ldr	r3, [r0, #32]
 8002b3a:	b90b      	cbnz	r3, 8002b40 <__swsetup_r+0x14>
 8002b3c:	f7ff f828 	bl	8001b90 <__sinit>
 8002b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b44:	0719      	lsls	r1, r3, #28
 8002b46:	d422      	bmi.n	8002b8e <__swsetup_r+0x62>
 8002b48:	06da      	lsls	r2, r3, #27
 8002b4a:	d407      	bmi.n	8002b5c <__swsetup_r+0x30>
 8002b4c:	2209      	movs	r2, #9
 8002b4e:	602a      	str	r2, [r5, #0]
 8002b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295
 8002b58:	81a3      	strh	r3, [r4, #12]
 8002b5a:	e033      	b.n	8002bc4 <__swsetup_r+0x98>
 8002b5c:	0758      	lsls	r0, r3, #29
 8002b5e:	d512      	bpl.n	8002b86 <__swsetup_r+0x5a>
 8002b60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002b62:	b141      	cbz	r1, 8002b76 <__swsetup_r+0x4a>
 8002b64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002b68:	4299      	cmp	r1, r3
 8002b6a:	d002      	beq.n	8002b72 <__swsetup_r+0x46>
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	f7ff f943 	bl	8001df8 <_free_r>
 8002b72:	2300      	movs	r3, #0
 8002b74:	6363      	str	r3, [r4, #52]	@ 0x34
 8002b76:	89a3      	ldrh	r3, [r4, #12]
 8002b78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002b7c:	81a3      	strh	r3, [r4, #12]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	6063      	str	r3, [r4, #4]
 8002b82:	6923      	ldr	r3, [r4, #16]
 8002b84:	6023      	str	r3, [r4, #0]
 8002b86:	89a3      	ldrh	r3, [r4, #12]
 8002b88:	f043 0308 	orr.w	r3, r3, #8
 8002b8c:	81a3      	strh	r3, [r4, #12]
 8002b8e:	6923      	ldr	r3, [r4, #16]
 8002b90:	b94b      	cbnz	r3, 8002ba6 <__swsetup_r+0x7a>
 8002b92:	89a3      	ldrh	r3, [r4, #12]
 8002b94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b9c:	d003      	beq.n	8002ba6 <__swsetup_r+0x7a>
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	4628      	mov	r0, r5
 8002ba2:	f000 f88a 	bl	8002cba <__smakebuf_r>
 8002ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002baa:	f013 0201 	ands.w	r2, r3, #1
 8002bae:	d00a      	beq.n	8002bc6 <__swsetup_r+0x9a>
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	60a2      	str	r2, [r4, #8]
 8002bb4:	6962      	ldr	r2, [r4, #20]
 8002bb6:	4252      	negs	r2, r2
 8002bb8:	61a2      	str	r2, [r4, #24]
 8002bba:	6922      	ldr	r2, [r4, #16]
 8002bbc:	b942      	cbnz	r2, 8002bd0 <__swsetup_r+0xa4>
 8002bbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002bc2:	d1c5      	bne.n	8002b50 <__swsetup_r+0x24>
 8002bc4:	bd38      	pop	{r3, r4, r5, pc}
 8002bc6:	0799      	lsls	r1, r3, #30
 8002bc8:	bf58      	it	pl
 8002bca:	6962      	ldrpl	r2, [r4, #20]
 8002bcc:	60a2      	str	r2, [r4, #8]
 8002bce:	e7f4      	b.n	8002bba <__swsetup_r+0x8e>
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	e7f7      	b.n	8002bc4 <__swsetup_r+0x98>
 8002bd4:	20000018 	.word	0x20000018

08002bd8 <_raise_r>:
 8002bd8:	291f      	cmp	r1, #31
 8002bda:	b538      	push	{r3, r4, r5, lr}
 8002bdc:	4605      	mov	r5, r0
 8002bde:	460c      	mov	r4, r1
 8002be0:	d904      	bls.n	8002bec <_raise_r+0x14>
 8002be2:	2316      	movs	r3, #22
 8002be4:	6003      	str	r3, [r0, #0]
 8002be6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bea:	bd38      	pop	{r3, r4, r5, pc}
 8002bec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002bee:	b112      	cbz	r2, 8002bf6 <_raise_r+0x1e>
 8002bf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002bf4:	b94b      	cbnz	r3, 8002c0a <_raise_r+0x32>
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	f000 f830 	bl	8002c5c <_getpid_r>
 8002bfc:	4622      	mov	r2, r4
 8002bfe:	4601      	mov	r1, r0
 8002c00:	4628      	mov	r0, r5
 8002c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c06:	f000 b817 	b.w	8002c38 <_kill_r>
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d00a      	beq.n	8002c24 <_raise_r+0x4c>
 8002c0e:	1c59      	adds	r1, r3, #1
 8002c10:	d103      	bne.n	8002c1a <_raise_r+0x42>
 8002c12:	2316      	movs	r3, #22
 8002c14:	6003      	str	r3, [r0, #0]
 8002c16:	2001      	movs	r0, #1
 8002c18:	e7e7      	b.n	8002bea <_raise_r+0x12>
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002c22:	4798      	blx	r3
 8002c24:	2000      	movs	r0, #0
 8002c26:	e7e0      	b.n	8002bea <_raise_r+0x12>

08002c28 <raise>:
 8002c28:	4b02      	ldr	r3, [pc, #8]	@ (8002c34 <raise+0xc>)
 8002c2a:	4601      	mov	r1, r0
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	f7ff bfd3 	b.w	8002bd8 <_raise_r>
 8002c32:	bf00      	nop
 8002c34:	20000018 	.word	0x20000018

08002c38 <_kill_r>:
 8002c38:	b538      	push	{r3, r4, r5, lr}
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	4d06      	ldr	r5, [pc, #24]	@ (8002c58 <_kill_r+0x20>)
 8002c3e:	4604      	mov	r4, r0
 8002c40:	4608      	mov	r0, r1
 8002c42:	4611      	mov	r1, r2
 8002c44:	602b      	str	r3, [r5, #0]
 8002c46:	f7fd fec3 	bl	80009d0 <_kill>
 8002c4a:	1c43      	adds	r3, r0, #1
 8002c4c:	d102      	bne.n	8002c54 <_kill_r+0x1c>
 8002c4e:	682b      	ldr	r3, [r5, #0]
 8002c50:	b103      	cbz	r3, 8002c54 <_kill_r+0x1c>
 8002c52:	6023      	str	r3, [r4, #0]
 8002c54:	bd38      	pop	{r3, r4, r5, pc}
 8002c56:	bf00      	nop
 8002c58:	20000c20 	.word	0x20000c20

08002c5c <_getpid_r>:
 8002c5c:	f7fd beb6 	b.w	80009cc <_getpid>

08002c60 <_malloc_usable_size_r>:
 8002c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c64:	1f18      	subs	r0, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	bfbc      	itt	lt
 8002c6a:	580b      	ldrlt	r3, [r1, r0]
 8002c6c:	18c0      	addlt	r0, r0, r3
 8002c6e:	4770      	bx	lr

08002c70 <__swhatbuf_r>:
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	460c      	mov	r4, r1
 8002c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c78:	4615      	mov	r5, r2
 8002c7a:	2900      	cmp	r1, #0
 8002c7c:	461e      	mov	r6, r3
 8002c7e:	b096      	sub	sp, #88	@ 0x58
 8002c80:	da0c      	bge.n	8002c9c <__swhatbuf_r+0x2c>
 8002c82:	89a3      	ldrh	r3, [r4, #12]
 8002c84:	2100      	movs	r1, #0
 8002c86:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002c8a:	bf14      	ite	ne
 8002c8c:	2340      	movne	r3, #64	@ 0x40
 8002c8e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002c92:	2000      	movs	r0, #0
 8002c94:	6031      	str	r1, [r6, #0]
 8002c96:	602b      	str	r3, [r5, #0]
 8002c98:	b016      	add	sp, #88	@ 0x58
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
 8002c9c:	466a      	mov	r2, sp
 8002c9e:	f000 f849 	bl	8002d34 <_fstat_r>
 8002ca2:	2800      	cmp	r0, #0
 8002ca4:	dbed      	blt.n	8002c82 <__swhatbuf_r+0x12>
 8002ca6:	9901      	ldr	r1, [sp, #4]
 8002ca8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002cac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002cb0:	4259      	negs	r1, r3
 8002cb2:	4159      	adcs	r1, r3
 8002cb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cb8:	e7eb      	b.n	8002c92 <__swhatbuf_r+0x22>

08002cba <__smakebuf_r>:
 8002cba:	898b      	ldrh	r3, [r1, #12]
 8002cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cbe:	079d      	lsls	r5, r3, #30
 8002cc0:	4606      	mov	r6, r0
 8002cc2:	460c      	mov	r4, r1
 8002cc4:	d507      	bpl.n	8002cd6 <__smakebuf_r+0x1c>
 8002cc6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002cca:	6023      	str	r3, [r4, #0]
 8002ccc:	6123      	str	r3, [r4, #16]
 8002cce:	2301      	movs	r3, #1
 8002cd0:	6163      	str	r3, [r4, #20]
 8002cd2:	b003      	add	sp, #12
 8002cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cd6:	466a      	mov	r2, sp
 8002cd8:	ab01      	add	r3, sp, #4
 8002cda:	f7ff ffc9 	bl	8002c70 <__swhatbuf_r>
 8002cde:	9f00      	ldr	r7, [sp, #0]
 8002ce0:	4605      	mov	r5, r0
 8002ce2:	4639      	mov	r1, r7
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	f7ff f8f9 	bl	8001edc <_malloc_r>
 8002cea:	b948      	cbnz	r0, 8002d00 <__smakebuf_r+0x46>
 8002cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cf0:	059a      	lsls	r2, r3, #22
 8002cf2:	d4ee      	bmi.n	8002cd2 <__smakebuf_r+0x18>
 8002cf4:	f023 0303 	bic.w	r3, r3, #3
 8002cf8:	f043 0302 	orr.w	r3, r3, #2
 8002cfc:	81a3      	strh	r3, [r4, #12]
 8002cfe:	e7e2      	b.n	8002cc6 <__smakebuf_r+0xc>
 8002d00:	89a3      	ldrh	r3, [r4, #12]
 8002d02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d0a:	81a3      	strh	r3, [r4, #12]
 8002d0c:	9b01      	ldr	r3, [sp, #4]
 8002d0e:	6020      	str	r0, [r4, #0]
 8002d10:	b15b      	cbz	r3, 8002d2a <__smakebuf_r+0x70>
 8002d12:	4630      	mov	r0, r6
 8002d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d18:	f000 f81e 	bl	8002d58 <_isatty_r>
 8002d1c:	b128      	cbz	r0, 8002d2a <__smakebuf_r+0x70>
 8002d1e:	89a3      	ldrh	r3, [r4, #12]
 8002d20:	f023 0303 	bic.w	r3, r3, #3
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	81a3      	strh	r3, [r4, #12]
 8002d2a:	89a3      	ldrh	r3, [r4, #12]
 8002d2c:	431d      	orrs	r5, r3
 8002d2e:	81a5      	strh	r5, [r4, #12]
 8002d30:	e7cf      	b.n	8002cd2 <__smakebuf_r+0x18>
	...

08002d34 <_fstat_r>:
 8002d34:	b538      	push	{r3, r4, r5, lr}
 8002d36:	2300      	movs	r3, #0
 8002d38:	4d06      	ldr	r5, [pc, #24]	@ (8002d54 <_fstat_r+0x20>)
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	4608      	mov	r0, r1
 8002d3e:	4611      	mov	r1, r2
 8002d40:	602b      	str	r3, [r5, #0]
 8002d42:	f7fd fe72 	bl	8000a2a <_fstat>
 8002d46:	1c43      	adds	r3, r0, #1
 8002d48:	d102      	bne.n	8002d50 <_fstat_r+0x1c>
 8002d4a:	682b      	ldr	r3, [r5, #0]
 8002d4c:	b103      	cbz	r3, 8002d50 <_fstat_r+0x1c>
 8002d4e:	6023      	str	r3, [r4, #0]
 8002d50:	bd38      	pop	{r3, r4, r5, pc}
 8002d52:	bf00      	nop
 8002d54:	20000c20 	.word	0x20000c20

08002d58 <_isatty_r>:
 8002d58:	b538      	push	{r3, r4, r5, lr}
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	4d05      	ldr	r5, [pc, #20]	@ (8002d74 <_isatty_r+0x1c>)
 8002d5e:	4604      	mov	r4, r0
 8002d60:	4608      	mov	r0, r1
 8002d62:	602b      	str	r3, [r5, #0]
 8002d64:	f7fd fe66 	bl	8000a34 <_isatty>
 8002d68:	1c43      	adds	r3, r0, #1
 8002d6a:	d102      	bne.n	8002d72 <_isatty_r+0x1a>
 8002d6c:	682b      	ldr	r3, [r5, #0]
 8002d6e:	b103      	cbz	r3, 8002d72 <_isatty_r+0x1a>
 8002d70:	6023      	str	r3, [r4, #0]
 8002d72:	bd38      	pop	{r3, r4, r5, pc}
 8002d74:	20000c20 	.word	0x20000c20

08002d78 <_init>:
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7a:	bf00      	nop
 8002d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7e:	bc08      	pop	{r3}
 8002d80:	469e      	mov	lr, r3
 8002d82:	4770      	bx	lr

08002d84 <_fini>:
 8002d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d86:	bf00      	nop
 8002d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8a:	bc08      	pop	{r3}
 8002d8c:	469e      	mov	lr, r3
 8002d8e:	4770      	bx	lr
