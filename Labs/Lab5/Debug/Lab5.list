
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bd8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08004ce8  08004ce8  00005ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff0  08004ff0  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004ff0  08004ff0  00005ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ff8  08004ff8  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ff8  08004ff8  00005ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ffc  08004ffc  00005ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005000  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b4  20000060  08005060  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001214  08005060  00006214  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d1f  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d04  00000000  00000000  00017da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  0001aab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d87  00000000  00000000  0001bc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019790  00000000  00000000  0001c99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001367c  00000000  00000000  0003612f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000933b8  00000000  00000000  000497ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dcb63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de4  00000000  00000000  000dcba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e198c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004cd0 	.word	0x08004cd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004cd0 	.word	0x08004cd0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	@ (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	@ (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	@ 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000007c 	.word	0x2000007c
 800018c:	200000d0 	.word	0x200000d0

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b096      	sub	sp, #88	@ 0x58
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fbe1 	bl	800095c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f85b 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f8c5 	bl	800032c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001a2:	f000 f899 	bl	80002d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  periodQueue = xQueueCreate(1, sizeof(uint32_t));
 80001a6:	2200      	movs	r2, #0
 80001a8:	2104      	movs	r1, #4
 80001aa:	2001      	movs	r0, #1
 80001ac:	f002 f992 	bl	80024d4 <xQueueGenericCreate>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4a21      	ldr	r2, [pc, #132]	@ (8000238 <main+0xa8>)
 80001b4:	6013      	str	r3, [r2, #0]
  if (periodQueue == NULL) {
 80001b6:	4b20      	ldr	r3, [pc, #128]	@ (8000238 <main+0xa8>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d101      	bne.n	80001c2 <main+0x32>
	Error_Handler();
 80001be:	f000 fa45 	bl	800064c <Error_Handler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(LED_Task, StartFirstTask, osPriorityAboveNormal, 0, 128);
 80001c2:	4b1e      	ldr	r3, [pc, #120]	@ (800023c <main+0xac>)
 80001c4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80001c8:	461d      	mov	r5, r3
 80001ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_TaskHandle = osThreadCreate(osThread(LED_Task), NULL);
 80001d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80001da:	2100      	movs	r1, #0
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 ffff 	bl	80021e0 <osThreadCreate>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4a16      	ldr	r2, [pc, #88]	@ (8000240 <main+0xb0>)
 80001e6:	6013      	str	r3, [r2, #0]

  osThreadDef(cli_receive, StartReceiveTask, osPriorityNormal, 0, 256);
 80001e8:	4b16      	ldr	r3, [pc, #88]	@ (8000244 <main+0xb4>)
 80001ea:	f107 0420 	add.w	r4, r7, #32
 80001ee:	461d      	mov	r5, r3
 80001f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cli_receiveHandle = osThreadCreate(osThread(cli_receive), NULL);
 80001fc:	f107 0320 	add.w	r3, r7, #32
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f001 ffec 	bl	80021e0 <osThreadCreate>
 8000208:	4603      	mov	r3, r0
 800020a:	4a0f      	ldr	r2, [pc, #60]	@ (8000248 <main+0xb8>)
 800020c:	6013      	str	r3, [r2, #0]

  osThreadDef(CLI_Update, StartUpdateTask, osPriorityBelowNormal, 0, 128);
 800020e:	4b0f      	ldr	r3, [pc, #60]	@ (800024c <main+0xbc>)
 8000210:	1d3c      	adds	r4, r7, #4
 8000212:	461d      	mov	r5, r3
 8000214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000218:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800021c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CLI_UpdateHandle = osThreadCreate(osThread(CLI_Update), NULL);
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2100      	movs	r1, #0
 8000224:	4618      	mov	r0, r3
 8000226:	f001 ffdb 	bl	80021e0 <osThreadCreate>
 800022a:	4603      	mov	r3, r0
 800022c:	4a08      	ldr	r2, [pc, #32]	@ (8000250 <main+0xc0>)
 800022e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000230:	f001 ffcf 	bl	80021d2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000234:	bf00      	nop
 8000236:	e7fd      	b.n	8000234 <main+0xa4>
 8000238:	20000324 	.word	0x20000324
 800023c:	08004cf4 	.word	0x08004cf4
 8000240:	20000318 	.word	0x20000318
 8000244:	08004d1c 	.word	0x08004d1c
 8000248:	2000031c 	.word	0x2000031c
 800024c:	08004d44 	.word	0x08004d44
 8000250:	20000320 	.word	0x20000320

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b090      	sub	sp, #64	@ 0x40
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0318 	add.w	r3, r7, #24
 800025e:	2228      	movs	r2, #40	@ 0x28
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f004 f8a4 	bl	80043b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000276:	2302      	movs	r3, #2
 8000278:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027a:	2301      	movs	r3, #1
 800027c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027e:	2310      	movs	r3, #16
 8000280:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000282:	2302      	movs	r3, #2
 8000284:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000286:	2300      	movs	r3, #0
 8000288:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800028a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800028e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000290:	f107 0318 	add.w	r3, r7, #24
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fe4b 	bl	8000f30 <HAL_RCC_OscConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002a0:	f000 f9d4 	bl	800064c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a4:	230f      	movs	r3, #15
 80002a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a8:	2302      	movs	r3, #2
 80002aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 f8b8 	bl	8001434 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ca:	f000 f9bf 	bl	800064c <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3740      	adds	r7, #64	@ 0x40
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002dc:	4b11      	ldr	r3, [pc, #68]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 80002de:	4a12      	ldr	r2, [pc, #72]	@ (8000328 <MX_USART2_UART_Init+0x50>)
 80002e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002e2:	4b10      	ldr	r3, [pc, #64]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 80002e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002fc:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 80002fe:	220c      	movs	r2, #12
 8000300:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000302:	4b08      	ldr	r3, [pc, #32]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000308:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800030e:	4805      	ldr	r0, [pc, #20]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 8000310:	f001 fc8c 	bl	8001c2c <HAL_UART_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800031a:	f000 f997 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	200002d0 	.word	0x200002d0
 8000328:	40004400 	.word	0x40004400

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b088      	sub	sp, #32
 8000330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000340:	4b2d      	ldr	r3, [pc, #180]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a2c      	ldr	r2, [pc, #176]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b2a      	ldr	r3, [pc, #168]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000358:	4b27      	ldr	r3, [pc, #156]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a26      	ldr	r2, [pc, #152]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800035e:	f043 0320 	orr.w	r3, r3, #32
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b24      	ldr	r3, [pc, #144]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0320 	and.w	r3, r3, #32
 800036c:	60bb      	str	r3, [r7, #8]
 800036e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000370:	4b21      	ldr	r3, [pc, #132]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a20      	ldr	r2, [pc, #128]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b1e      	ldr	r3, [pc, #120]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0304 	and.w	r3, r3, #4
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000388:	4b1b      	ldr	r3, [pc, #108]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a1a      	ldr	r2, [pc, #104]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b18      	ldr	r3, [pc, #96]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	603b      	str	r3, [r7, #0]
 800039e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2120      	movs	r1, #32
 80003a4:	4815      	ldr	r0, [pc, #84]	@ (80003fc <MX_GPIO_Init+0xd0>)
 80003a6:	f000 fd6f 	bl	8000e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003b0:	4b13      	ldr	r3, [pc, #76]	@ (8000400 <MX_GPIO_Init+0xd4>)
 80003b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b4:	2300      	movs	r3, #0
 80003b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	4811      	ldr	r0, [pc, #68]	@ (8000404 <MX_GPIO_Init+0xd8>)
 80003c0:	f000 fbde 	bl	8000b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003c4:	2320      	movs	r3, #32
 80003c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2302      	movs	r3, #2
 80003d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	4619      	mov	r1, r3
 80003da:	4808      	ldr	r0, [pc, #32]	@ (80003fc <MX_GPIO_Init+0xd0>)
 80003dc:	f000 fbd0 	bl	8000b80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2105      	movs	r1, #5
 80003e4:	2028      	movs	r0, #40	@ 0x28
 80003e6:	f000 fba0 	bl	8000b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003ea:	2028      	movs	r0, #40	@ 0x28
 80003ec:	f000 fbb9 	bl	8000b62 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f0:	bf00      	nop
 80003f2:	3720      	adds	r7, #32
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010800 	.word	0x40010800
 8000400:	10110000 	.word	0x10110000
 8000404:	40011000 	.word	0x40011000

08000408 <cli_transmit>:

/* USER CODE BEGIN 4 */

void cli_transmit(const char *message)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f7ff fe9d 	bl	8000150 <strlen>
 8000416:	4603      	mov	r3, r0
 8000418:	b29a      	uxth	r2, r3
 800041a:	f04f 33ff 	mov.w	r3, #4294967295
 800041e:	6879      	ldr	r1, [r7, #4]
 8000420:	4803      	ldr	r0, [pc, #12]	@ (8000430 <cli_transmit+0x28>)
 8000422:	f001 fc53 	bl	8001ccc <HAL_UART_Transmit>
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	200002d0 	.word	0x200002d0

08000434 <cli_receive>:

#define RX_BUFFER_SIZE 100
char rx_buffer[RX_BUFFER_SIZE];

int cli_receive(char *buffer, uint16_t buffer_size)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	460b      	mov	r3, r1
 800043e:	807b      	strh	r3, [r7, #2]
    uint16_t index = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	81fb      	strh	r3, [r7, #14]
    uint8_t rx_char;
    while (index < buffer_size - 1)
 8000444:	e02a      	b.n	800049c <cli_receive+0x68>
    {
        if (HAL_UART_Receive(&huart2, &rx_char, 1, HAL_MAX_DELAY) == HAL_OK)
 8000446:	f107 010d 	add.w	r1, r7, #13
 800044a:	f04f 33ff 	mov.w	r3, #4294967295
 800044e:	2201      	movs	r2, #1
 8000450:	481a      	ldr	r0, [pc, #104]	@ (80004bc <cli_receive+0x88>)
 8000452:	f001 fcc6 	bl	8001de2 <HAL_UART_Receive>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d11d      	bne.n	8000498 <cli_receive+0x64>
        {
            HAL_UART_Transmit(&huart2, &rx_char, 1, HAL_MAX_DELAY);
 800045c:	f107 010d 	add.w	r1, r7, #13
 8000460:	f04f 33ff 	mov.w	r3, #4294967295
 8000464:	2201      	movs	r2, #1
 8000466:	4815      	ldr	r0, [pc, #84]	@ (80004bc <cli_receive+0x88>)
 8000468:	f001 fc30 	bl	8001ccc <HAL_UART_Transmit>
            if (rx_char == '\r' || rx_char == '\n')
 800046c:	7b7b      	ldrb	r3, [r7, #13]
 800046e:	2b0d      	cmp	r3, #13
 8000470:	d002      	beq.n	8000478 <cli_receive+0x44>
 8000472:	7b7b      	ldrb	r3, [r7, #13]
 8000474:	2b0a      	cmp	r3, #10
 8000476:	d106      	bne.n	8000486 <cli_receive+0x52>
            {
                buffer[index] = '\0';
 8000478:	89fb      	ldrh	r3, [r7, #14]
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	4413      	add	r3, r2
 800047e:	2200      	movs	r2, #0
 8000480:	701a      	strb	r2, [r3, #0]
                return 1;
 8000482:	2301      	movs	r3, #1
 8000484:	e015      	b.n	80004b2 <cli_receive+0x7e>
            } else
            {
                buffer[index++] = rx_char;
 8000486:	89fb      	ldrh	r3, [r7, #14]
 8000488:	1c5a      	adds	r2, r3, #1
 800048a:	81fa      	strh	r2, [r7, #14]
 800048c:	461a      	mov	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	7b7a      	ldrb	r2, [r7, #13]
 8000494:	701a      	strb	r2, [r3, #0]
 8000496:	e001      	b.n	800049c <cli_receive+0x68>
            }
        } else
        {
            return 0;
 8000498:	2300      	movs	r3, #0
 800049a:	e00a      	b.n	80004b2 <cli_receive+0x7e>
    while (index < buffer_size - 1)
 800049c:	89fa      	ldrh	r2, [r7, #14]
 800049e:	887b      	ldrh	r3, [r7, #2]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	429a      	cmp	r2, r3
 80004a4:	dbcf      	blt.n	8000446 <cli_receive+0x12>
        }
    }

    buffer[index] = '\0';
 80004a6:	89fb      	ldrh	r3, [r7, #14]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	4413      	add	r3, r2
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
    return 1;
 80004b0:	2301      	movs	r3, #1
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200002d0 	.word	0x200002d0

080004c0 <StartFirstTask>:
  */
/* USER CODE END Header_StartDefaultTask */

  /* USER CODE BEGIN 5 */
void StartFirstTask(void const * argument)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	uint32_t blink_period = 100;
 80004c8:	2364      	movs	r3, #100	@ 0x64
 80004ca:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
	  if (xQueueReceive(periodQueue, &blink_period, 0) == pdPASS)
 80004cc:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <StartFirstTask+0x3c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f107 010c 	add.w	r1, r7, #12
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 f958 	bl	800278c <xQueueReceive>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d102      	bne.n	80004e8 <StartFirstTask+0x28>
	  {
		  cli_transmit("\x1b[33mLED Period Updated\n\r\x1b[0m");
 80004e2:	4807      	ldr	r0, [pc, #28]	@ (8000500 <StartFirstTask+0x40>)
 80004e4:	f7ff ff90 	bl	8000408 <cli_transmit>
	  }
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004e8:	2120      	movs	r1, #32
 80004ea:	4806      	ldr	r0, [pc, #24]	@ (8000504 <StartFirstTask+0x44>)
 80004ec:	f000 fce4 	bl	8000eb8 <HAL_GPIO_TogglePin>
	  osDelay(blink_period);
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 fec0 	bl	8002278 <osDelay>
	  if (xQueueReceive(periodQueue, &blink_period, 0) == pdPASS)
 80004f8:	e7e8      	b.n	80004cc <StartFirstTask+0xc>
 80004fa:	bf00      	nop
 80004fc:	20000324 	.word	0x20000324
 8000500:	08004d60 	.word	0x08004d60
 8000504:	40010800 	.word	0x40010800

08000508 <StartReceiveTask>:
	}
}

void StartReceiveTask(void const * argument)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b0aa      	sub	sp, #168	@ 0xa8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
    char command_buffer[RX_BUFFER_SIZE];
    uint32_t period = 100;
 8000510:	2364      	movs	r3, #100	@ 0x64
 8000512:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    for (;;)
    {
    	char header_message[50];
        cli_transmit("\x1b[2J");
 8000516:	4826      	ldr	r0, [pc, #152]	@ (80005b0 <StartReceiveTask+0xa8>)
 8000518:	f7ff ff76 	bl	8000408 <cli_transmit>
        cli_transmit("\x1b[1;1H");
 800051c:	4825      	ldr	r0, [pc, #148]	@ (80005b4 <StartReceiveTask+0xac>)
 800051e:	f7ff ff73 	bl	8000408 <cli_transmit>
        cli_transmit("\x1b[36mENSE452-Lab5-RTOS!\n\r");
 8000522:	4825      	ldr	r0, [pc, #148]	@ (80005b8 <StartReceiveTask+0xb0>)
 8000524:	f7ff ff70 	bl	8000408 <cli_transmit>
        snprintf(header_message, sizeof(header_message), "The current LED rate is %lu ms\n\r", period);
 8000528:	f107 0008 	add.w	r0, r7, #8
 800052c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000530:	4a22      	ldr	r2, [pc, #136]	@ (80005bc <StartReceiveTask+0xb4>)
 8000532:	2132      	movs	r1, #50	@ 0x32
 8000534:	f003 ff08 	bl	8004348 <sniprintf>
        cli_transmit(header_message);
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff ff63 	bl	8000408 <cli_transmit>
        cli_transmit("Enter the new rate below:\n\r");
 8000542:	481f      	ldr	r0, [pc, #124]	@ (80005c0 <StartReceiveTask+0xb8>)
 8000544:	f7ff ff60 	bl	8000408 <cli_transmit>
        cli_transmit("********************************************\r\n\n\n\n\x1b[0m");
 8000548:	481e      	ldr	r0, [pc, #120]	@ (80005c4 <StartReceiveTask+0xbc>)
 800054a:	f7ff ff5d 	bl	8000408 <cli_transmit>
        cli_transmit("\x1b[8;1r");
 800054e:	481e      	ldr	r0, [pc, #120]	@ (80005c8 <StartReceiveTask+0xc0>)
 8000550:	f7ff ff5a 	bl	8000408 <cli_transmit>
        cli_transmit("\x1b[8;1H");
 8000554:	481d      	ldr	r0, [pc, #116]	@ (80005cc <StartReceiveTask+0xc4>)
 8000556:	f7ff ff57 	bl	8000408 <cli_transmit>
        cli_transmit("> ");
 800055a:	481d      	ldr	r0, [pc, #116]	@ (80005d0 <StartReceiveTask+0xc8>)
 800055c:	f7ff ff54 	bl	8000408 <cli_transmit>

        if (cli_receive(command_buffer, RX_BUFFER_SIZE))
 8000560:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000564:	2164      	movs	r1, #100	@ 0x64
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ff64 	bl	8000434 <cli_receive>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d018      	beq.n	80005a4 <StartReceiveTask+0x9c>
        {
			uint32_t new_period = atoi(command_buffer);
 8000572:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000576:	4618      	mov	r0, r3
 8000578:	f003 fe5e 	bl	8004238 <atoi>
 800057c:	4603      	mov	r3, r0
 800057e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (new_period > 0)
 8000580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000582:	2b00      	cmp	r3, #0
 8000584:	d00b      	beq.n	800059e <StartReceiveTask+0x96>
			{
				xQueueSend(periodQueue, &new_period, 0);
 8000586:	4b13      	ldr	r3, [pc, #76]	@ (80005d4 <StartReceiveTask+0xcc>)
 8000588:	6818      	ldr	r0, [r3, #0]
 800058a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800058e:	2300      	movs	r3, #0
 8000590:	2200      	movs	r2, #0
 8000592:	f001 fff9 	bl	8002588 <xQueueGenericSend>
				period = new_period;
 8000596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000598:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800059c:	e002      	b.n	80005a4 <StartReceiveTask+0x9c>
			} else
			{
				cli_transmit("\x1b[31mInvalid rate. Please enter a number.\n\r\x1b[0m");
 800059e:	480e      	ldr	r0, [pc, #56]	@ (80005d8 <StartReceiveTask+0xd0>)
 80005a0:	f7ff ff32 	bl	8000408 <cli_transmit>
			}
		}
        osDelay(1500);
 80005a4:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80005a8:	f001 fe66 	bl	8002278 <osDelay>
    {
 80005ac:	e7b3      	b.n	8000516 <StartReceiveTask+0xe>
 80005ae:	bf00      	nop
 80005b0:	08004d80 	.word	0x08004d80
 80005b4:	08004d88 	.word	0x08004d88
 80005b8:	08004d90 	.word	0x08004d90
 80005bc:	08004dac 	.word	0x08004dac
 80005c0:	08004dd0 	.word	0x08004dd0
 80005c4:	08004dec 	.word	0x08004dec
 80005c8:	08004e24 	.word	0x08004e24
 80005cc:	08004e2c 	.word	0x08004e2c
 80005d0:	08004e34 	.word	0x08004e34
 80005d4:	20000324 	.word	0x20000324
 80005d8:	08004e38 	.word	0x08004e38

080005dc <StartUpdateTask>:
    }
}

void StartUpdateTask(void const * argument)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b090      	sub	sp, #64	@ 0x40
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	uint32_t period = 100;
 80005e4:	2364      	movs	r3, #100	@ 0x64
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char message[50];
	for (;;)
	{
		if (xQueuePeek(periodQueue, &period, 0) == pdPASS)
 80005e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <StartUpdateTask+0x44>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80005f0:	2200      	movs	r2, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 f9ac 	bl	8002950 <xQueuePeek>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d10b      	bne.n	8000616 <StartUpdateTask+0x3a>
		{
			snprintf(message, sizeof(message), "\x1b[33mNew LED Rate: %lu ms\n\r\x1b[0m", period);
 80005fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000600:	f107 0008 	add.w	r0, r7, #8
 8000604:	4a07      	ldr	r2, [pc, #28]	@ (8000624 <StartUpdateTask+0x48>)
 8000606:	2132      	movs	r1, #50	@ 0x32
 8000608:	f003 fe9e 	bl	8004348 <sniprintf>
			cli_transmit(message);
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff fef9 	bl	8000408 <cli_transmit>
		}
		osDelay(1500);
 8000616:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800061a:	f001 fe2d 	bl	8002278 <osDelay>
		if (xQueuePeek(periodQueue, &period, 0) == pdPASS)
 800061e:	e7e3      	b.n	80005e8 <StartUpdateTask+0xc>
 8000620:	20000324 	.word	0x20000324
 8000624:	08004e68 	.word	0x08004e68

08000628 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a04      	ldr	r2, [pc, #16]	@ (8000648 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d101      	bne.n	800063e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800063a:	f000 f9a5 	bl	8000988 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40000800 	.word	0x40000800

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <Error_Handler+0x8>

08000658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800065e:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <HAL_MspInit+0x68>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a17      	ldr	r2, [pc, #92]	@ (80006c0 <HAL_MspInit+0x68>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <HAL_MspInit+0x68>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <HAL_MspInit+0x68>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a11      	ldr	r2, [pc, #68]	@ (80006c0 <HAL_MspInit+0x68>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <HAL_MspInit+0x68>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	210f      	movs	r1, #15
 8000692:	f06f 0001 	mvn.w	r0, #1
 8000696:	f000 fa48 	bl	8000b2a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800069a:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <HAL_MspInit+0x6c>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	4a04      	ldr	r2, [pc, #16]	@ (80006c4 <HAL_MspInit+0x6c>)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010000 	.word	0x40010000

080006c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a15      	ldr	r2, [pc, #84]	@ (8000738 <HAL_UART_MspInit+0x70>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d123      	bne.n	8000730 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006e8:	4b14      	ldr	r3, [pc, #80]	@ (800073c <HAL_UART_MspInit+0x74>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	4a13      	ldr	r2, [pc, #76]	@ (800073c <HAL_UART_MspInit+0x74>)
 80006ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f2:	61d3      	str	r3, [r2, #28]
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <HAL_UART_MspInit+0x74>)
 80006f6:	69db      	ldr	r3, [r3, #28]
 80006f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <HAL_UART_MspInit+0x74>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a0d      	ldr	r2, [pc, #52]	@ (800073c <HAL_UART_MspInit+0x74>)
 8000706:	f043 0304 	orr.w	r3, r3, #4
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <HAL_UART_MspInit+0x74>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000718:	230c      	movs	r3, #12
 800071a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2302      	movs	r3, #2
 8000722:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	4805      	ldr	r0, [pc, #20]	@ (8000740 <HAL_UART_MspInit+0x78>)
 800072c:	f000 fa28 	bl	8000b80 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40004400 	.word	0x40004400
 800073c:	40021000 	.word	0x40021000
 8000740:	40010800 	.word	0x40010800

08000744 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08e      	sub	sp, #56	@ 0x38
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800074c:	2300      	movs	r3, #0
 800074e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000750:	2300      	movs	r3, #0
 8000752:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000754:	2300      	movs	r3, #0
 8000756:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800075a:	4b34      	ldr	r3, [pc, #208]	@ (800082c <HAL_InitTick+0xe8>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a33      	ldr	r2, [pc, #204]	@ (800082c <HAL_InitTick+0xe8>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b31      	ldr	r3, [pc, #196]	@ (800082c <HAL_InitTick+0xe8>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000772:	f107 0210 	add.w	r2, r7, #16
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f000 ffc9 	bl	8001714 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000788:	2b00      	cmp	r3, #0
 800078a:	d103      	bne.n	8000794 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800078c:	f000 ff9a 	bl	80016c4 <HAL_RCC_GetPCLK1Freq>
 8000790:	6378      	str	r0, [r7, #52]	@ 0x34
 8000792:	e004      	b.n	800079e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000794:	f000 ff96 	bl	80016c4 <HAL_RCC_GetPCLK1Freq>
 8000798:	4603      	mov	r3, r0
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800079e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007a0:	4a23      	ldr	r2, [pc, #140]	@ (8000830 <HAL_InitTick+0xec>)
 80007a2:	fba2 2303 	umull	r2, r3, r2, r3
 80007a6:	0c9b      	lsrs	r3, r3, #18
 80007a8:	3b01      	subs	r3, #1
 80007aa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80007ac:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <HAL_InitTick+0xf0>)
 80007ae:	4a22      	ldr	r2, [pc, #136]	@ (8000838 <HAL_InitTick+0xf4>)
 80007b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <HAL_InitTick+0xf0>)
 80007b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007b8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80007ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000834 <HAL_InitTick+0xf0>)
 80007bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007be:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80007c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <HAL_InitTick+0xf0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <HAL_InitTick+0xf0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007cc:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <HAL_InitTick+0xf0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80007d2:	4818      	ldr	r0, [pc, #96]	@ (8000834 <HAL_InitTick+0xf0>)
 80007d4:	f000 ffec 	bl	80017b0 <HAL_TIM_Base_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80007de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d11b      	bne.n	800081e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80007e6:	4813      	ldr	r0, [pc, #76]	@ (8000834 <HAL_InitTick+0xf0>)
 80007e8:	f001 f83a 	bl	8001860 <HAL_TIM_Base_Start_IT>
 80007ec:	4603      	mov	r3, r0
 80007ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80007f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d111      	bne.n	800081e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80007fa:	201e      	movs	r0, #30
 80007fc:	f000 f9b1 	bl	8000b62 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b0f      	cmp	r3, #15
 8000804:	d808      	bhi.n	8000818 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000806:	2200      	movs	r2, #0
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	201e      	movs	r0, #30
 800080c:	f000 f98d 	bl	8000b2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000810:	4a0a      	ldr	r2, [pc, #40]	@ (800083c <HAL_InitTick+0xf8>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6013      	str	r3, [r2, #0]
 8000816:	e002      	b.n	800081e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000818:	2301      	movs	r3, #1
 800081a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800081e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000822:	4618      	mov	r0, r3
 8000824:	3738      	adds	r7, #56	@ 0x38
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000
 8000830:	431bde83 	.word	0x431bde83
 8000834:	20000328 	.word	0x20000328
 8000838:	40000800 	.word	0x40000800
 800083c:	20000004 	.word	0x20000004

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <NMI_Handler+0x4>

08000848 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <MemManage_Handler+0x4>

08000858 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <UsageFault_Handler+0x4>

08000868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000878:	4802      	ldr	r0, [pc, #8]	@ (8000884 <TIM4_IRQHandler+0x10>)
 800087a:	f001 f843 	bl	8001904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000328 	.word	0x20000328

08000888 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800088c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000890:	f000 fb2c 	bl	8000eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a0:	4a14      	ldr	r2, [pc, #80]	@ (80008f4 <_sbrk+0x5c>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <_sbrk+0x60>)
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ac:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <_sbrk+0x64>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	@ (8000900 <_sbrk+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d207      	bcs.n	80008d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c8:	f003 fd7a 	bl	80043c0 <__errno>
 80008cc:	4603      	mov	r3, r0
 80008ce:	220c      	movs	r2, #12
 80008d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	e009      	b.n	80008ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d8:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008de:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a05      	ldr	r2, [pc, #20]	@ (80008fc <_sbrk+0x64>)
 80008e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20005000 	.word	0x20005000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	20000370 	.word	0x20000370
 8000900:	20001218 	.word	0x20001218

08000904 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000910:	f7ff fff8 	bl	8000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000914:	480b      	ldr	r0, [pc, #44]	@ (8000944 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000916:	490c      	ldr	r1, [pc, #48]	@ (8000948 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000918:	4a0c      	ldr	r2, [pc, #48]	@ (800094c <LoopFillZerobss+0x16>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a09      	ldr	r2, [pc, #36]	@ (8000950 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800092c:	4c09      	ldr	r4, [pc, #36]	@ (8000954 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800093a:	f003 fd47 	bl	80043cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093e:	f7ff fc27 	bl	8000190 <main>
  bx lr
 8000942:	4770      	bx	lr
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800094c:	08005000 	.word	0x08005000
  ldr r2, =_sbss
 8000950:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000954:	20001214 	.word	0x20001214

08000958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC1_2_IRQHandler>
	...

0800095c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000960:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <HAL_Init+0x28>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a07      	ldr	r2, [pc, #28]	@ (8000984 <HAL_Init+0x28>)
 8000966:	f043 0310 	orr.w	r3, r3, #16
 800096a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096c:	2003      	movs	r0, #3
 800096e:	f000 f8d1 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000972:	200f      	movs	r0, #15
 8000974:	f7ff fee6 	bl	8000744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000978:	f7ff fe6e 	bl	8000658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40022000 	.word	0x40022000

08000988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800098c:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <HAL_IncTick+0x1c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <HAL_IncTick+0x20>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4413      	add	r3, r2
 8000998:	4a03      	ldr	r2, [pc, #12]	@ (80009a8 <HAL_IncTick+0x20>)
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20000374 	.word	0x20000374

080009ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return uwTick;
 80009b0:	4b02      	ldr	r3, [pc, #8]	@ (80009bc <HAL_GetTick+0x10>)
 80009b2:	681b      	ldr	r3, [r3, #0]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	20000374 	.word	0x20000374

080009c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <__NVIC_SetPriorityGrouping+0x44>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009dc:	4013      	ands	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f2:	4a04      	ldr	r2, [pc, #16]	@ (8000a04 <__NVIC_SetPriorityGrouping+0x44>)
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	60d3      	str	r3, [r2, #12]
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a0c:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <__NVIC_GetPriorityGrouping+0x18>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	f003 0307 	and.w	r3, r3, #7
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	db0b      	blt.n	8000a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	f003 021f 	and.w	r2, r3, #31
 8000a3c:	4906      	ldr	r1, [pc, #24]	@ (8000a58 <__NVIC_EnableIRQ+0x34>)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	095b      	lsrs	r3, r3, #5
 8000a44:	2001      	movs	r0, #1
 8000a46:	fa00 f202 	lsl.w	r2, r0, r2
 8000a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	e000e100 	.word	0xe000e100

08000a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	@ (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	@ (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	@ 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f1c3 0307 	rsb	r3, r3, #7
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	bf28      	it	cs
 8000ace:	2304      	movcs	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d902      	bls.n	8000ae0 <NVIC_EncodePriority+0x30>
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3b03      	subs	r3, #3
 8000ade:	e000      	b.n	8000ae2 <NVIC_EncodePriority+0x32>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43da      	mvns	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4313      	orrs	r3, r2
         );
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	@ 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff4f 	bl	80009c0 <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3c:	f7ff ff64 	bl	8000a08 <__NVIC_GetPriorityGrouping>
 8000b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f7ff ffb2 	bl	8000ab0 <NVIC_EncodePriority>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff81 	bl	8000a5c <__NVIC_SetPriority>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff57 	bl	8000a24 <__NVIC_EnableIRQ>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b08b      	sub	sp, #44	@ 0x2c
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b92:	e169      	b.n	8000e68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b94:	2201      	movs	r2, #1
 8000b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	69fa      	ldr	r2, [r7, #28]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	f040 8158 	bne.w	8000e62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	4a9a      	ldr	r2, [pc, #616]	@ (8000e20 <HAL_GPIO_Init+0x2a0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d05e      	beq.n	8000c7a <HAL_GPIO_Init+0xfa>
 8000bbc:	4a98      	ldr	r2, [pc, #608]	@ (8000e20 <HAL_GPIO_Init+0x2a0>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d875      	bhi.n	8000cae <HAL_GPIO_Init+0x12e>
 8000bc2:	4a98      	ldr	r2, [pc, #608]	@ (8000e24 <HAL_GPIO_Init+0x2a4>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d058      	beq.n	8000c7a <HAL_GPIO_Init+0xfa>
 8000bc8:	4a96      	ldr	r2, [pc, #600]	@ (8000e24 <HAL_GPIO_Init+0x2a4>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d86f      	bhi.n	8000cae <HAL_GPIO_Init+0x12e>
 8000bce:	4a96      	ldr	r2, [pc, #600]	@ (8000e28 <HAL_GPIO_Init+0x2a8>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d052      	beq.n	8000c7a <HAL_GPIO_Init+0xfa>
 8000bd4:	4a94      	ldr	r2, [pc, #592]	@ (8000e28 <HAL_GPIO_Init+0x2a8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d869      	bhi.n	8000cae <HAL_GPIO_Init+0x12e>
 8000bda:	4a94      	ldr	r2, [pc, #592]	@ (8000e2c <HAL_GPIO_Init+0x2ac>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d04c      	beq.n	8000c7a <HAL_GPIO_Init+0xfa>
 8000be0:	4a92      	ldr	r2, [pc, #584]	@ (8000e2c <HAL_GPIO_Init+0x2ac>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d863      	bhi.n	8000cae <HAL_GPIO_Init+0x12e>
 8000be6:	4a92      	ldr	r2, [pc, #584]	@ (8000e30 <HAL_GPIO_Init+0x2b0>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d046      	beq.n	8000c7a <HAL_GPIO_Init+0xfa>
 8000bec:	4a90      	ldr	r2, [pc, #576]	@ (8000e30 <HAL_GPIO_Init+0x2b0>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d85d      	bhi.n	8000cae <HAL_GPIO_Init+0x12e>
 8000bf2:	2b12      	cmp	r3, #18
 8000bf4:	d82a      	bhi.n	8000c4c <HAL_GPIO_Init+0xcc>
 8000bf6:	2b12      	cmp	r3, #18
 8000bf8:	d859      	bhi.n	8000cae <HAL_GPIO_Init+0x12e>
 8000bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8000c00 <HAL_GPIO_Init+0x80>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c7b 	.word	0x08000c7b
 8000c04:	08000c55 	.word	0x08000c55
 8000c08:	08000c67 	.word	0x08000c67
 8000c0c:	08000ca9 	.word	0x08000ca9
 8000c10:	08000caf 	.word	0x08000caf
 8000c14:	08000caf 	.word	0x08000caf
 8000c18:	08000caf 	.word	0x08000caf
 8000c1c:	08000caf 	.word	0x08000caf
 8000c20:	08000caf 	.word	0x08000caf
 8000c24:	08000caf 	.word	0x08000caf
 8000c28:	08000caf 	.word	0x08000caf
 8000c2c:	08000caf 	.word	0x08000caf
 8000c30:	08000caf 	.word	0x08000caf
 8000c34:	08000caf 	.word	0x08000caf
 8000c38:	08000caf 	.word	0x08000caf
 8000c3c:	08000caf 	.word	0x08000caf
 8000c40:	08000caf 	.word	0x08000caf
 8000c44:	08000c5d 	.word	0x08000c5d
 8000c48:	08000c71 	.word	0x08000c71
 8000c4c:	4a79      	ldr	r2, [pc, #484]	@ (8000e34 <HAL_GPIO_Init+0x2b4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d013      	beq.n	8000c7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c52:	e02c      	b.n	8000cae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	623b      	str	r3, [r7, #32]
          break;
 8000c5a:	e029      	b.n	8000cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	3304      	adds	r3, #4
 8000c62:	623b      	str	r3, [r7, #32]
          break;
 8000c64:	e024      	b.n	8000cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	3308      	adds	r3, #8
 8000c6c:	623b      	str	r3, [r7, #32]
          break;
 8000c6e:	e01f      	b.n	8000cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	330c      	adds	r3, #12
 8000c76:	623b      	str	r3, [r7, #32]
          break;
 8000c78:	e01a      	b.n	8000cb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d102      	bne.n	8000c88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c82:	2304      	movs	r3, #4
 8000c84:	623b      	str	r3, [r7, #32]
          break;
 8000c86:	e013      	b.n	8000cb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d105      	bne.n	8000c9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c90:	2308      	movs	r3, #8
 8000c92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	611a      	str	r2, [r3, #16]
          break;
 8000c9a:	e009      	b.n	8000cb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	69fa      	ldr	r2, [r7, #28]
 8000ca4:	615a      	str	r2, [r3, #20]
          break;
 8000ca6:	e003      	b.n	8000cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
          break;
 8000cac:	e000      	b.n	8000cb0 <HAL_GPIO_Init+0x130>
          break;
 8000cae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	2bff      	cmp	r3, #255	@ 0xff
 8000cb4:	d801      	bhi.n	8000cba <HAL_GPIO_Init+0x13a>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	e001      	b.n	8000cbe <HAL_GPIO_Init+0x13e>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2bff      	cmp	r3, #255	@ 0xff
 8000cc4:	d802      	bhi.n	8000ccc <HAL_GPIO_Init+0x14c>
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	e002      	b.n	8000cd2 <HAL_GPIO_Init+0x152>
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cce:	3b08      	subs	r3, #8
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	210f      	movs	r1, #15
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	6a39      	ldr	r1, [r7, #32]
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cec:	431a      	orrs	r2, r3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f000 80b1 	beq.w	8000e62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d00:	4b4d      	ldr	r3, [pc, #308]	@ (8000e38 <HAL_GPIO_Init+0x2b8>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a4c      	ldr	r2, [pc, #304]	@ (8000e38 <HAL_GPIO_Init+0x2b8>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b4a      	ldr	r3, [pc, #296]	@ (8000e38 <HAL_GPIO_Init+0x2b8>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d18:	4a48      	ldr	r2, [pc, #288]	@ (8000e3c <HAL_GPIO_Init+0x2bc>)
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1c:	089b      	lsrs	r3, r3, #2
 8000d1e:	3302      	adds	r3, #2
 8000d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	220f      	movs	r2, #15
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a40      	ldr	r2, [pc, #256]	@ (8000e40 <HAL_GPIO_Init+0x2c0>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d013      	beq.n	8000d6c <HAL_GPIO_Init+0x1ec>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a3f      	ldr	r2, [pc, #252]	@ (8000e44 <HAL_GPIO_Init+0x2c4>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d00d      	beq.n	8000d68 <HAL_GPIO_Init+0x1e8>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e48 <HAL_GPIO_Init+0x2c8>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d007      	beq.n	8000d64 <HAL_GPIO_Init+0x1e4>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a3d      	ldr	r2, [pc, #244]	@ (8000e4c <HAL_GPIO_Init+0x2cc>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d101      	bne.n	8000d60 <HAL_GPIO_Init+0x1e0>
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e006      	b.n	8000d6e <HAL_GPIO_Init+0x1ee>
 8000d60:	2304      	movs	r3, #4
 8000d62:	e004      	b.n	8000d6e <HAL_GPIO_Init+0x1ee>
 8000d64:	2302      	movs	r3, #2
 8000d66:	e002      	b.n	8000d6e <HAL_GPIO_Init+0x1ee>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e000      	b.n	8000d6e <HAL_GPIO_Init+0x1ee>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d70:	f002 0203 	and.w	r2, r2, #3
 8000d74:	0092      	lsls	r2, r2, #2
 8000d76:	4093      	lsls	r3, r2
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d7e:	492f      	ldr	r1, [pc, #188]	@ (8000e3c <HAL_GPIO_Init+0x2bc>)
 8000d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	3302      	adds	r3, #2
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d006      	beq.n	8000da6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d98:	4b2d      	ldr	r3, [pc, #180]	@ (8000e50 <HAL_GPIO_Init+0x2d0>)
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	492c      	ldr	r1, [pc, #176]	@ (8000e50 <HAL_GPIO_Init+0x2d0>)
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	608b      	str	r3, [r1, #8]
 8000da4:	e006      	b.n	8000db4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000da6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e50 <HAL_GPIO_Init+0x2d0>)
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	4928      	ldr	r1, [pc, #160]	@ (8000e50 <HAL_GPIO_Init+0x2d0>)
 8000db0:	4013      	ands	r3, r2
 8000db2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d006      	beq.n	8000dce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dc0:	4b23      	ldr	r3, [pc, #140]	@ (8000e50 <HAL_GPIO_Init+0x2d0>)
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	4922      	ldr	r1, [pc, #136]	@ (8000e50 <HAL_GPIO_Init+0x2d0>)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	60cb      	str	r3, [r1, #12]
 8000dcc:	e006      	b.n	8000ddc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dce:	4b20      	ldr	r3, [pc, #128]	@ (8000e50 <HAL_GPIO_Init+0x2d0>)
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	491e      	ldr	r1, [pc, #120]	@ (8000e50 <HAL_GPIO_Init+0x2d0>)
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d006      	beq.n	8000df6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000de8:	4b19      	ldr	r3, [pc, #100]	@ (8000e50 <HAL_GPIO_Init+0x2d0>)
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	4918      	ldr	r1, [pc, #96]	@ (8000e50 <HAL_GPIO_Init+0x2d0>)
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	604b      	str	r3, [r1, #4]
 8000df4:	e006      	b.n	8000e04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000df6:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <HAL_GPIO_Init+0x2d0>)
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	4914      	ldr	r1, [pc, #80]	@ (8000e50 <HAL_GPIO_Init+0x2d0>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d021      	beq.n	8000e54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e10:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <HAL_GPIO_Init+0x2d0>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	490e      	ldr	r1, [pc, #56]	@ (8000e50 <HAL_GPIO_Init+0x2d0>)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	600b      	str	r3, [r1, #0]
 8000e1c:	e021      	b.n	8000e62 <HAL_GPIO_Init+0x2e2>
 8000e1e:	bf00      	nop
 8000e20:	10320000 	.word	0x10320000
 8000e24:	10310000 	.word	0x10310000
 8000e28:	10220000 	.word	0x10220000
 8000e2c:	10210000 	.word	0x10210000
 8000e30:	10120000 	.word	0x10120000
 8000e34:	10110000 	.word	0x10110000
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40010000 	.word	0x40010000
 8000e40:	40010800 	.word	0x40010800
 8000e44:	40010c00 	.word	0x40010c00
 8000e48:	40011000 	.word	0x40011000
 8000e4c:	40011400 	.word	0x40011400
 8000e50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e54:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <HAL_GPIO_Init+0x304>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	4909      	ldr	r1, [pc, #36]	@ (8000e84 <HAL_GPIO_Init+0x304>)
 8000e5e:	4013      	ands	r3, r2
 8000e60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e64:	3301      	adds	r3, #1
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f47f ae8e 	bne.w	8000b94 <HAL_GPIO_Init+0x14>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	372c      	adds	r7, #44	@ 0x2c
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	40010400 	.word	0x40010400

08000e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	807b      	strh	r3, [r7, #2]
 8000e94:	4613      	mov	r3, r2
 8000e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e98:	787b      	ldrb	r3, [r7, #1]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e9e:	887a      	ldrh	r2, [r7, #2]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ea4:	e003      	b.n	8000eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	041a      	lsls	r2, r3, #16
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	611a      	str	r2, [r3, #16]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eca:	887a      	ldrh	r2, [r7, #2]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	041a      	lsls	r2, r3, #16
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43d9      	mvns	r1, r3
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	400b      	ands	r3, r1
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	611a      	str	r2, [r3, #16]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
	...

08000eec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ef8:	695a      	ldr	r2, [r3, #20]
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f02:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f806 	bl	8000f1c <HAL_GPIO_EXTI_Callback>
  }
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40010400 	.word	0x40010400

08000f1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e272      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 8087 	beq.w	800105e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f50:	4b92      	ldr	r3, [pc, #584]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 030c 	and.w	r3, r3, #12
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d00c      	beq.n	8000f76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f5c:	4b8f      	ldr	r3, [pc, #572]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 030c 	and.w	r3, r3, #12
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d112      	bne.n	8000f8e <HAL_RCC_OscConfig+0x5e>
 8000f68:	4b8c      	ldr	r3, [pc, #560]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f74:	d10b      	bne.n	8000f8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f76:	4b89      	ldr	r3, [pc, #548]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d06c      	beq.n	800105c <HAL_RCC_OscConfig+0x12c>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d168      	bne.n	800105c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e24c      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f96:	d106      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x76>
 8000f98:	4b80      	ldr	r3, [pc, #512]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a7f      	ldr	r2, [pc, #508]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	e02e      	b.n	8001004 <HAL_RCC_OscConfig+0xd4>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x98>
 8000fae:	4b7b      	ldr	r3, [pc, #492]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a7a      	ldr	r2, [pc, #488]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	4b78      	ldr	r3, [pc, #480]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a77      	ldr	r2, [pc, #476]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e01d      	b.n	8001004 <HAL_RCC_OscConfig+0xd4>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fd0:	d10c      	bne.n	8000fec <HAL_RCC_OscConfig+0xbc>
 8000fd2:	4b72      	ldr	r3, [pc, #456]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a71      	ldr	r2, [pc, #452]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	4b6f      	ldr	r3, [pc, #444]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a6e      	ldr	r2, [pc, #440]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e00b      	b.n	8001004 <HAL_RCC_OscConfig+0xd4>
 8000fec:	4b6b      	ldr	r3, [pc, #428]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a6a      	ldr	r2, [pc, #424]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b68      	ldr	r3, [pc, #416]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a67      	ldr	r2, [pc, #412]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001002:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d013      	beq.n	8001034 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100c:	f7ff fcce 	bl	80009ac <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001014:	f7ff fcca 	bl	80009ac <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b64      	cmp	r3, #100	@ 0x64
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e200      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001026:	4b5d      	ldr	r3, [pc, #372]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f0      	beq.n	8001014 <HAL_RCC_OscConfig+0xe4>
 8001032:	e014      	b.n	800105e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001034:	f7ff fcba 	bl	80009ac <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800103c:	f7ff fcb6 	bl	80009ac <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b64      	cmp	r3, #100	@ 0x64
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e1ec      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104e:	4b53      	ldr	r3, [pc, #332]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f0      	bne.n	800103c <HAL_RCC_OscConfig+0x10c>
 800105a:	e000      	b.n	800105e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d063      	beq.n	8001132 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800106a:	4b4c      	ldr	r3, [pc, #304]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00b      	beq.n	800108e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001076:	4b49      	ldr	r3, [pc, #292]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	2b08      	cmp	r3, #8
 8001080:	d11c      	bne.n	80010bc <HAL_RCC_OscConfig+0x18c>
 8001082:	4b46      	ldr	r3, [pc, #280]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d116      	bne.n	80010bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108e:	4b43      	ldr	r3, [pc, #268]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d005      	beq.n	80010a6 <HAL_RCC_OscConfig+0x176>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d001      	beq.n	80010a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e1c0      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a6:	4b3d      	ldr	r3, [pc, #244]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4939      	ldr	r1, [pc, #228]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ba:	e03a      	b.n	8001132 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d020      	beq.n	8001106 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c4:	4b36      	ldr	r3, [pc, #216]	@ (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ca:	f7ff fc6f 	bl	80009ac <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d2:	f7ff fc6b 	bl	80009ac <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e1a1      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e4:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0f0      	beq.n	80010d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f0:	4b2a      	ldr	r3, [pc, #168]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4927      	ldr	r1, [pc, #156]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8001100:	4313      	orrs	r3, r2
 8001102:	600b      	str	r3, [r1, #0]
 8001104:	e015      	b.n	8001132 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001106:	4b26      	ldr	r3, [pc, #152]	@ (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fc4e 	bl	80009ac <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001114:	f7ff fc4a 	bl	80009ac <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e180      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001126:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b00      	cmp	r3, #0
 800113c:	d03a      	beq.n	80011b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d019      	beq.n	800117a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001146:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <HAL_RCC_OscConfig+0x274>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114c:	f7ff fc2e 	bl	80009ac <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001154:	f7ff fc2a 	bl	80009ac <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e160      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <HAL_RCC_OscConfig+0x26c>)
 8001168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001172:	2001      	movs	r0, #1
 8001174:	f000 fafe 	bl	8001774 <RCC_Delay>
 8001178:	e01c      	b.n	80011b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800117a:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <HAL_RCC_OscConfig+0x274>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001180:	f7ff fc14 	bl	80009ac <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001186:	e00f      	b.n	80011a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001188:	f7ff fc10 	bl	80009ac <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d908      	bls.n	80011a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e146      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000
 80011a0:	42420000 	.word	0x42420000
 80011a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a8:	4b92      	ldr	r3, [pc, #584]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80011aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1e9      	bne.n	8001188 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80a6 	beq.w	800130e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c6:	4b8b      	ldr	r3, [pc, #556]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10d      	bne.n	80011ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b88      	ldr	r3, [pc, #544]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4a87      	ldr	r2, [pc, #540]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011dc:	61d3      	str	r3, [r2, #28]
 80011de:	4b85      	ldr	r3, [pc, #532]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ea:	2301      	movs	r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ee:	4b82      	ldr	r3, [pc, #520]	@ (80013f8 <HAL_RCC_OscConfig+0x4c8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d118      	bne.n	800122c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011fa:	4b7f      	ldr	r3, [pc, #508]	@ (80013f8 <HAL_RCC_OscConfig+0x4c8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a7e      	ldr	r2, [pc, #504]	@ (80013f8 <HAL_RCC_OscConfig+0x4c8>)
 8001200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001206:	f7ff fbd1 	bl	80009ac <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120e:	f7ff fbcd 	bl	80009ac <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b64      	cmp	r3, #100	@ 0x64
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e103      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001220:	4b75      	ldr	r3, [pc, #468]	@ (80013f8 <HAL_RCC_OscConfig+0x4c8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f0      	beq.n	800120e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d106      	bne.n	8001242 <HAL_RCC_OscConfig+0x312>
 8001234:	4b6f      	ldr	r3, [pc, #444]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	4a6e      	ldr	r2, [pc, #440]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6213      	str	r3, [r2, #32]
 8001240:	e02d      	b.n	800129e <HAL_RCC_OscConfig+0x36e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0x334>
 800124a:	4b6a      	ldr	r3, [pc, #424]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4a69      	ldr	r2, [pc, #420]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	6213      	str	r3, [r2, #32]
 8001256:	4b67      	ldr	r3, [pc, #412]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4a66      	ldr	r2, [pc, #408]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	f023 0304 	bic.w	r3, r3, #4
 8001260:	6213      	str	r3, [r2, #32]
 8001262:	e01c      	b.n	800129e <HAL_RCC_OscConfig+0x36e>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b05      	cmp	r3, #5
 800126a:	d10c      	bne.n	8001286 <HAL_RCC_OscConfig+0x356>
 800126c:	4b61      	ldr	r3, [pc, #388]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	4a60      	ldr	r2, [pc, #384]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	6213      	str	r3, [r2, #32]
 8001278:	4b5e      	ldr	r3, [pc, #376]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4a5d      	ldr	r2, [pc, #372]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6213      	str	r3, [r2, #32]
 8001284:	e00b      	b.n	800129e <HAL_RCC_OscConfig+0x36e>
 8001286:	4b5b      	ldr	r3, [pc, #364]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4a5a      	ldr	r2, [pc, #360]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	6213      	str	r3, [r2, #32]
 8001292:	4b58      	ldr	r3, [pc, #352]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4a57      	ldr	r2, [pc, #348]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	f023 0304 	bic.w	r3, r3, #4
 800129c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d015      	beq.n	80012d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a6:	f7ff fb81 	bl	80009ac <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ac:	e00a      	b.n	80012c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ae:	f7ff fb7d 	bl	80009ac <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012bc:	4293      	cmp	r3, r2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e0b1      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c4:	4b4b      	ldr	r3, [pc, #300]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0ee      	beq.n	80012ae <HAL_RCC_OscConfig+0x37e>
 80012d0:	e014      	b.n	80012fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d2:	f7ff fb6b 	bl	80009ac <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d8:	e00a      	b.n	80012f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012da:	f7ff fb67 	bl	80009ac <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e09b      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f0:	4b40      	ldr	r3, [pc, #256]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ee      	bne.n	80012da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d105      	bne.n	800130e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001302:	4b3c      	ldr	r3, [pc, #240]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4a3b      	ldr	r2, [pc, #236]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001308:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800130c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8087 	beq.w	8001426 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001318:	4b36      	ldr	r3, [pc, #216]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b08      	cmp	r3, #8
 8001322:	d061      	beq.n	80013e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d146      	bne.n	80013ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132c:	4b33      	ldr	r3, [pc, #204]	@ (80013fc <HAL_RCC_OscConfig+0x4cc>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001332:	f7ff fb3b 	bl	80009ac <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800133a:	f7ff fb37 	bl	80009ac <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e06d      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134c:	4b29      	ldr	r3, [pc, #164]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f0      	bne.n	800133a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001360:	d108      	bne.n	8001374 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001362:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	4921      	ldr	r1, [pc, #132]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001374:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a19      	ldr	r1, [r3, #32]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001384:	430b      	orrs	r3, r1
 8001386:	491b      	ldr	r1, [pc, #108]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001388:	4313      	orrs	r3, r2
 800138a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800138c:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <HAL_RCC_OscConfig+0x4cc>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff fb0b 	bl	80009ac <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139a:	f7ff fb07 	bl	80009ac <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e03d      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x46a>
 80013b8:	e035      	b.n	8001426 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ba:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <HAL_RCC_OscConfig+0x4cc>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff faf4 	bl	80009ac <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff faf0 	bl	80009ac <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e026      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x498>
 80013e6:	e01e      	b.n	8001426 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d107      	bne.n	8001400 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e019      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40007000 	.word	0x40007000
 80013fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <HAL_RCC_OscConfig+0x500>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	429a      	cmp	r2, r3
 8001412:	d106      	bne.n	8001422 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141e:	429a      	cmp	r2, r3
 8001420:	d001      	beq.n	8001426 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40021000 	.word	0x40021000

08001434 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0d0      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001448:	4b6a      	ldr	r3, [pc, #424]	@ (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d910      	bls.n	8001478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001456:	4b67      	ldr	r3, [pc, #412]	@ (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 0207 	bic.w	r2, r3, #7
 800145e:	4965      	ldr	r1, [pc, #404]	@ (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4313      	orrs	r3, r2
 8001464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001466:	4b63      	ldr	r3, [pc, #396]	@ (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d001      	beq.n	8001478 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e0b8      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d020      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001490:	4b59      	ldr	r3, [pc, #356]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4a58      	ldr	r2, [pc, #352]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800149a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a8:	4b53      	ldr	r3, [pc, #332]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4a52      	ldr	r2, [pc, #328]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80014b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b4:	4b50      	ldr	r3, [pc, #320]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	494d      	ldr	r1, [pc, #308]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d040      	beq.n	8001554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	4b47      	ldr	r3, [pc, #284]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d115      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e07f      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f2:	4b41      	ldr	r3, [pc, #260]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e073      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001502:	4b3d      	ldr	r3, [pc, #244]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e06b      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001512:	4b39      	ldr	r3, [pc, #228]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f023 0203 	bic.w	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4936      	ldr	r1, [pc, #216]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	4313      	orrs	r3, r2
 8001522:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001524:	f7ff fa42 	bl	80009ac <HAL_GetTick>
 8001528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	e00a      	b.n	8001542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152c:	f7ff fa3e 	bl	80009ac <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e053      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 020c 	and.w	r2, r3, #12
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	429a      	cmp	r2, r3
 8001552:	d1eb      	bne.n	800152c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001554:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d210      	bcs.n	8001584 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b24      	ldr	r3, [pc, #144]	@ (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 0207 	bic.w	r2, r3, #7
 800156a:	4922      	ldr	r1, [pc, #136]	@ (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001572:	4b20      	ldr	r3, [pc, #128]	@ (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d001      	beq.n	8001584 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e032      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d008      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001590:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	4916      	ldr	r1, [pc, #88]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ae:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	490e      	ldr	r1, [pc, #56]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015c2:	f000 f821 	bl	8001608 <HAL_RCC_GetSysClockFreq>
 80015c6:	4602      	mov	r2, r0
 80015c8:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	091b      	lsrs	r3, r3, #4
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	490a      	ldr	r1, [pc, #40]	@ (80015fc <HAL_RCC_ClockConfig+0x1c8>)
 80015d4:	5ccb      	ldrb	r3, [r1, r3]
 80015d6:	fa22 f303 	lsr.w	r3, r2, r3
 80015da:	4a09      	ldr	r2, [pc, #36]	@ (8001600 <HAL_RCC_ClockConfig+0x1cc>)
 80015dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <HAL_RCC_ClockConfig+0x1d0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff f8ae 	bl	8000744 <HAL_InitTick>

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40022000 	.word	0x40022000
 80015f8:	40021000 	.word	0x40021000
 80015fc:	08004e90 	.word	0x08004e90
 8001600:	20000000 	.word	0x20000000
 8001604:	20000004 	.word	0x20000004

08001608 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001622:	4b1e      	ldr	r3, [pc, #120]	@ (800169c <HAL_RCC_GetSysClockFreq+0x94>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b04      	cmp	r3, #4
 8001630:	d002      	beq.n	8001638 <HAL_RCC_GetSysClockFreq+0x30>
 8001632:	2b08      	cmp	r3, #8
 8001634:	d003      	beq.n	800163e <HAL_RCC_GetSysClockFreq+0x36>
 8001636:	e027      	b.n	8001688 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001638:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800163a:	613b      	str	r3, [r7, #16]
      break;
 800163c:	e027      	b.n	800168e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	0c9b      	lsrs	r3, r3, #18
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	4a17      	ldr	r2, [pc, #92]	@ (80016a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001648:	5cd3      	ldrb	r3, [r2, r3]
 800164a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d010      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001656:	4b11      	ldr	r3, [pc, #68]	@ (800169c <HAL_RCC_GetSysClockFreq+0x94>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	0c5b      	lsrs	r3, r3, #17
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	4a11      	ldr	r2, [pc, #68]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001662:	5cd3      	ldrb	r3, [r2, r3]
 8001664:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a0d      	ldr	r2, [pc, #52]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800166a:	fb03 f202 	mul.w	r2, r3, r2
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	fbb2 f3f3 	udiv	r3, r2, r3
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	e004      	b.n	8001682 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a0c      	ldr	r2, [pc, #48]	@ (80016ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800167c:	fb02 f303 	mul.w	r3, r2, r3
 8001680:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	613b      	str	r3, [r7, #16]
      break;
 8001686:	e002      	b.n	800168e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001688:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800168a:	613b      	str	r3, [r7, #16]
      break;
 800168c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800168e:	693b      	ldr	r3, [r7, #16]
}
 8001690:	4618      	mov	r0, r3
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000
 80016a0:	007a1200 	.word	0x007a1200
 80016a4:	08004ea8 	.word	0x08004ea8
 80016a8:	08004eb8 	.word	0x08004eb8
 80016ac:	003d0900 	.word	0x003d0900

080016b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016b4:	4b02      	ldr	r3, [pc, #8]	@ (80016c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	20000000 	.word	0x20000000

080016c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016c8:	f7ff fff2 	bl	80016b0 <HAL_RCC_GetHCLKFreq>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	4903      	ldr	r1, [pc, #12]	@ (80016e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016da:	5ccb      	ldrb	r3, [r1, r3]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000
 80016e8:	08004ea0 	.word	0x08004ea0

080016ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016f0:	f7ff ffde 	bl	80016b0 <HAL_RCC_GetHCLKFreq>
 80016f4:	4602      	mov	r2, r0
 80016f6:	4b05      	ldr	r3, [pc, #20]	@ (800170c <HAL_RCC_GetPCLK2Freq+0x20>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	0adb      	lsrs	r3, r3, #11
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	4903      	ldr	r1, [pc, #12]	@ (8001710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001702:	5ccb      	ldrb	r3, [r1, r3]
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001708:	4618      	mov	r0, r3
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40021000 	.word	0x40021000
 8001710:	08004ea0 	.word	0x08004ea0

08001714 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	220f      	movs	r2, #15
 8001722:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001724:	4b11      	ldr	r3, [pc, #68]	@ (800176c <HAL_RCC_GetClockConfig+0x58>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0203 	and.w	r2, r3, #3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001730:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <HAL_RCC_GetClockConfig+0x58>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <HAL_RCC_GetClockConfig+0x58>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001748:	4b08      	ldr	r3, [pc, #32]	@ (800176c <HAL_RCC_GetClockConfig+0x58>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	08db      	lsrs	r3, r3, #3
 800174e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_RCC_GetClockConfig+0x5c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0207 	and.w	r2, r3, #7
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	40021000 	.word	0x40021000
 8001770:	40022000 	.word	0x40022000

08001774 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800177c:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <RCC_Delay+0x34>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0a      	ldr	r2, [pc, #40]	@ (80017ac <RCC_Delay+0x38>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	0a5b      	lsrs	r3, r3, #9
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001790:	bf00      	nop
  }
  while (Delay --);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1e5a      	subs	r2, r3, #1
 8001796:	60fa      	str	r2, [r7, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f9      	bne.n	8001790 <RCC_Delay+0x1c>
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	20000000 	.word	0x20000000
 80017ac:	10624dd3 	.word	0x10624dd3

080017b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e041      	b.n	8001846 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d106      	bne.n	80017dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f839 	bl	800184e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2202      	movs	r2, #2
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3304      	adds	r3, #4
 80017ec:	4619      	mov	r1, r3
 80017ee:	4610      	mov	r0, r2
 80017f0:	f000 f99c 	bl	8001b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d001      	beq.n	8001878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e03a      	b.n	80018ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2202      	movs	r2, #2
 800187c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0201 	orr.w	r2, r2, #1
 800188e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a18      	ldr	r2, [pc, #96]	@ (80018f8 <HAL_TIM_Base_Start_IT+0x98>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d00e      	beq.n	80018b8 <HAL_TIM_Base_Start_IT+0x58>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018a2:	d009      	beq.n	80018b8 <HAL_TIM_Base_Start_IT+0x58>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a14      	ldr	r2, [pc, #80]	@ (80018fc <HAL_TIM_Base_Start_IT+0x9c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d004      	beq.n	80018b8 <HAL_TIM_Base_Start_IT+0x58>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a13      	ldr	r2, [pc, #76]	@ (8001900 <HAL_TIM_Base_Start_IT+0xa0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d111      	bne.n	80018dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d010      	beq.n	80018ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 0201 	orr.w	r2, r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018da:	e007      	b.n	80018ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	40012c00 	.word	0x40012c00
 80018fc:	40000400 	.word	0x40000400
 8001900:	40000800 	.word	0x40000800

08001904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d020      	beq.n	8001968 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d01b      	beq.n	8001968 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f06f 0202 	mvn.w	r2, #2
 8001938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f8d1 	bl	8001af6 <HAL_TIM_IC_CaptureCallback>
 8001954:	e005      	b.n	8001962 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f8c4 	bl	8001ae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f8d3 	bl	8001b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	2b00      	cmp	r3, #0
 8001970:	d020      	beq.n	80019b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01b      	beq.n	80019b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f06f 0204 	mvn.w	r2, #4
 8001984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2202      	movs	r2, #2
 800198a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f8ab 	bl	8001af6 <HAL_TIM_IC_CaptureCallback>
 80019a0:	e005      	b.n	80019ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f89e 	bl	8001ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f8ad 	bl	8001b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d020      	beq.n	8001a00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d01b      	beq.n	8001a00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0208 	mvn.w	r2, #8
 80019d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2204      	movs	r2, #4
 80019d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f885 	bl	8001af6 <HAL_TIM_IC_CaptureCallback>
 80019ec:	e005      	b.n	80019fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f878 	bl	8001ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f887 	bl	8001b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d020      	beq.n	8001a4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f003 0310 	and.w	r3, r3, #16
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01b      	beq.n	8001a4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f06f 0210 	mvn.w	r2, #16
 8001a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2208      	movs	r2, #8
 8001a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f85f 	bl	8001af6 <HAL_TIM_IC_CaptureCallback>
 8001a38:	e005      	b.n	8001a46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f852 	bl	8001ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f861 	bl	8001b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00c      	beq.n	8001a70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f06f 0201 	mvn.w	r2, #1
 8001a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7fe fddc 	bl	8000628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00c      	beq.n	8001a94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d007      	beq.n	8001a94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f8c3 	bl	8001c1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00c      	beq.n	8001ab8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d007      	beq.n	8001ab8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f831 	bl	8001b1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	f003 0320 	and.w	r3, r3, #32
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00c      	beq.n	8001adc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f003 0320 	and.w	r3, r3, #32
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d007      	beq.n	8001adc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f06f 0220 	mvn.w	r2, #32
 8001ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f896 	bl	8001c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr

08001af6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a2f      	ldr	r2, [pc, #188]	@ (8001bfc <TIM_Base_SetConfig+0xd0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d00b      	beq.n	8001b5c <TIM_Base_SetConfig+0x30>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b4a:	d007      	beq.n	8001b5c <TIM_Base_SetConfig+0x30>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a2c      	ldr	r2, [pc, #176]	@ (8001c00 <TIM_Base_SetConfig+0xd4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d003      	beq.n	8001b5c <TIM_Base_SetConfig+0x30>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a2b      	ldr	r2, [pc, #172]	@ (8001c04 <TIM_Base_SetConfig+0xd8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d108      	bne.n	8001b6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a22      	ldr	r2, [pc, #136]	@ (8001bfc <TIM_Base_SetConfig+0xd0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00b      	beq.n	8001b8e <TIM_Base_SetConfig+0x62>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b7c:	d007      	beq.n	8001b8e <TIM_Base_SetConfig+0x62>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a1f      	ldr	r2, [pc, #124]	@ (8001c00 <TIM_Base_SetConfig+0xd4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d003      	beq.n	8001b8e <TIM_Base_SetConfig+0x62>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a1e      	ldr	r2, [pc, #120]	@ (8001c04 <TIM_Base_SetConfig+0xd8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d108      	bne.n	8001ba0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a0d      	ldr	r2, [pc, #52]	@ (8001bfc <TIM_Base_SetConfig+0xd0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d103      	bne.n	8001bd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f023 0201 	bic.w	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	611a      	str	r2, [r3, #16]
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	40012c00 	.word	0x40012c00
 8001c00:	40000400 	.word	0x40000400
 8001c04:	40000800 	.word	0x40000800

08001c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e042      	b.n	8001cc4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7fe fd38 	bl	80006c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2224      	movs	r2, #36	@ 0x24
 8001c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 fa09 	bl	8002088 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	@ 0x28
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b20      	cmp	r3, #32
 8001cea:	d175      	bne.n	8001dd8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <HAL_UART_Transmit+0x2c>
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e06e      	b.n	8001dda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2221      	movs	r2, #33	@ 0x21
 8001d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d0a:	f7fe fe4f 	bl	80009ac <HAL_GetTick>
 8001d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	88fa      	ldrh	r2, [r7, #6]
 8001d14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	88fa      	ldrh	r2, [r7, #6]
 8001d1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d24:	d108      	bne.n	8001d38 <HAL_UART_Transmit+0x6c>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d104      	bne.n	8001d38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	e003      	b.n	8001d40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d40:	e02e      	b.n	8001da0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2180      	movs	r1, #128	@ 0x80
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f8df 	bl	8001f10 <UART_WaitOnFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e03a      	b.n	8001dda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10b      	bne.n	8001d82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	e007      	b.n	8001d92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	781a      	ldrb	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1cb      	bne.n	8001d42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2200      	movs	r2, #0
 8001db2:	2140      	movs	r1, #64	@ 0x40
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 f8ab 	bl	8001f10 <UART_WaitOnFlagUntilTimeout>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e006      	b.n	8001dda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e000      	b.n	8001dda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001dd8:	2302      	movs	r3, #2
  }
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b08a      	sub	sp, #40	@ 0x28
 8001de6:	af02      	add	r7, sp, #8
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	4613      	mov	r3, r2
 8001df0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	f040 8081 	bne.w	8001f06 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_UART_Receive+0x2e>
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e079      	b.n	8001f08 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2222      	movs	r2, #34	@ 0x22
 8001e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e28:	f7fe fdc0 	bl	80009ac <HAL_GetTick>
 8001e2c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	88fa      	ldrh	r2, [r7, #6]
 8001e32:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	88fa      	ldrh	r2, [r7, #6]
 8001e38:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e42:	d108      	bne.n	8001e56 <HAL_UART_Receive+0x74>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d104      	bne.n	8001e56 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	61bb      	str	r3, [r7, #24]
 8001e54:	e003      	b.n	8001e5e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001e5e:	e047      	b.n	8001ef0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2200      	movs	r2, #0
 8001e68:	2120      	movs	r1, #32
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f850 	bl	8001f10 <UART_WaitOnFlagUntilTimeout>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e042      	b.n	8001f08 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10c      	bne.n	8001ea2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	e01f      	b.n	8001ee2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001eaa:	d007      	beq.n	8001ebc <HAL_UART_Receive+0xda>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10a      	bne.n	8001eca <HAL_UART_Receive+0xe8>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d106      	bne.n	8001eca <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	701a      	strb	r2, [r3, #0]
 8001ec8:	e008      	b.n	8001edc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1b2      	bne.n	8001e60 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2220      	movs	r2, #32
 8001efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001f06:	2302      	movs	r3, #2
  }
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f20:	e03b      	b.n	8001f9a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d037      	beq.n	8001f9a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f2a:	f7fe fd3f 	bl	80009ac <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	6a3a      	ldr	r2, [r7, #32]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d302      	bcc.n	8001f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e03a      	b.n	8001fba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d023      	beq.n	8001f9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b80      	cmp	r3, #128	@ 0x80
 8001f56:	d020      	beq.n	8001f9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b40      	cmp	r3, #64	@ 0x40
 8001f5c:	d01d      	beq.n	8001f9a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d116      	bne.n	8001f9a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f81d 	bl	8001fc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2208      	movs	r2, #8
 8001f8c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00f      	b.n	8001fba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	bf0c      	ite	eq
 8001faa:	2301      	moveq	r3, #1
 8001fac:	2300      	movne	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d0b4      	beq.n	8001f22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b095      	sub	sp, #84	@ 0x54
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	330c      	adds	r3, #12
 8001fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fd4:	e853 3f00 	ldrex	r3, [r3]
 8001fd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	330c      	adds	r3, #12
 8001fe8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fea:	643a      	str	r2, [r7, #64]	@ 0x40
 8001fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001ff0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ff2:	e841 2300 	strex	r3, r2, [r1]
 8001ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1e5      	bne.n	8001fca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3314      	adds	r3, #20
 8002004:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	e853 3f00 	ldrex	r3, [r3]
 800200c:	61fb      	str	r3, [r7, #28]
   return(result);
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3314      	adds	r3, #20
 800201c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800201e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002020:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002022:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002026:	e841 2300 	strex	r3, r2, [r1]
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1e5      	bne.n	8001ffe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	2b01      	cmp	r3, #1
 8002038:	d119      	bne.n	800206e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	330c      	adds	r3, #12
 8002040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	e853 3f00 	ldrex	r3, [r3]
 8002048:	60bb      	str	r3, [r7, #8]
   return(result);
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f023 0310 	bic.w	r3, r3, #16
 8002050:	647b      	str	r3, [r7, #68]	@ 0x44
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	330c      	adds	r3, #12
 8002058:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800205a:	61ba      	str	r2, [r7, #24]
 800205c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800205e:	6979      	ldr	r1, [r7, #20]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	e841 2300 	strex	r3, r2, [r1]
 8002066:	613b      	str	r3, [r7, #16]
   return(result);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1e5      	bne.n	800203a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2220      	movs	r2, #32
 8002072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800207c:	bf00      	nop
 800207e:	3754      	adds	r7, #84	@ 0x54
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr
	...

08002088 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80020c2:	f023 030c 	bic.w	r3, r3, #12
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a2c      	ldr	r2, [pc, #176]	@ (800219c <UART_SetConfig+0x114>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d103      	bne.n	80020f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020f0:	f7ff fafc 	bl	80016ec <HAL_RCC_GetPCLK2Freq>
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	e002      	b.n	80020fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020f8:	f7ff fae4 	bl	80016c4 <HAL_RCC_GetPCLK1Freq>
 80020fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	009a      	lsls	r2, r3, #2
 8002108:	441a      	add	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	4a22      	ldr	r2, [pc, #136]	@ (80021a0 <UART_SetConfig+0x118>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	0119      	lsls	r1, r3, #4
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	009a      	lsls	r2, r3, #2
 8002128:	441a      	add	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	fbb2 f2f3 	udiv	r2, r2, r3
 8002134:	4b1a      	ldr	r3, [pc, #104]	@ (80021a0 <UART_SetConfig+0x118>)
 8002136:	fba3 0302 	umull	r0, r3, r3, r2
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2064      	movs	r0, #100	@ 0x64
 800213e:	fb00 f303 	mul.w	r3, r0, r3
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	3332      	adds	r3, #50	@ 0x32
 8002148:	4a15      	ldr	r2, [pc, #84]	@ (80021a0 <UART_SetConfig+0x118>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002154:	4419      	add	r1, r3
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	009a      	lsls	r2, r3, #2
 8002160:	441a      	add	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	fbb2 f2f3 	udiv	r2, r2, r3
 800216c:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <UART_SetConfig+0x118>)
 800216e:	fba3 0302 	umull	r0, r3, r3, r2
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	2064      	movs	r0, #100	@ 0x64
 8002176:	fb00 f303 	mul.w	r3, r0, r3
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	3332      	adds	r3, #50	@ 0x32
 8002180:	4a07      	ldr	r2, [pc, #28]	@ (80021a0 <UART_SetConfig+0x118>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	f003 020f 	and.w	r2, r3, #15
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	440a      	add	r2, r1
 8002192:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40013800 	.word	0x40013800
 80021a0:	51eb851f 	.word	0x51eb851f

080021a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80021b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b6:	2b84      	cmp	r3, #132	@ 0x84
 80021b8:	d005      	beq.n	80021c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80021ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4413      	add	r3, r2
 80021c2:	3303      	adds	r3, #3
 80021c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80021c6:	68fb      	ldr	r3, [r7, #12]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80021d6:	f000 ff7d 	bl	80030d4 <vTaskStartScheduler>
  
  return osOK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}

080021e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80021e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021e2:	b089      	sub	sp, #36	@ 0x24
 80021e4:	af04      	add	r7, sp, #16
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d020      	beq.n	8002234 <osThreadCreate+0x54>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d01c      	beq.n	8002234 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685c      	ldr	r4, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691e      	ldr	r6, [r3, #16]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ffc9 	bl	80021a4 <makeFreeRtosPriority>
 8002212:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800221c:	9202      	str	r2, [sp, #8]
 800221e:	9301      	str	r3, [sp, #4]
 8002220:	9100      	str	r1, [sp, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	4632      	mov	r2, r6
 8002226:	4629      	mov	r1, r5
 8002228:	4620      	mov	r0, r4
 800222a:	f000 fd85 	bl	8002d38 <xTaskCreateStatic>
 800222e:	4603      	mov	r3, r0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	e01c      	b.n	800226e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685c      	ldr	r4, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002240:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ffab 	bl	80021a4 <makeFreeRtosPriority>
 800224e:	4602      	mov	r2, r0
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	9200      	str	r2, [sp, #0]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4632      	mov	r2, r6
 800225c:	4629      	mov	r1, r5
 800225e:	4620      	mov	r0, r4
 8002260:	f000 fdca 	bl	8002df8 <xTaskCreate>
 8002264:	4603      	mov	r3, r0
 8002266:	2b01      	cmp	r3, #1
 8002268:	d001      	beq.n	800226e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800226a:	2300      	movs	r3, #0
 800226c:	e000      	b.n	8002270 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800226e:	68fb      	ldr	r3, [r7, #12]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002278 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <osDelay+0x16>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	e000      	b.n	8002290 <osDelay+0x18>
 800228e:	2301      	movs	r3, #1
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fee9 	bl	8003068 <vTaskDelay>
  
  return osOK;
 8002296:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f103 0208 	add.w	r2, r3, #8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f04f 32ff 	mov.w	r2, #4294967295
 80022b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f103 0208 	add.w	r2, r3, #8
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f103 0208 	add.w	r2, r3, #8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022f6:	b480      	push	{r7}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	601a      	str	r2, [r3, #0]
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002352:	d103      	bne.n	800235c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	e00c      	b.n	8002376 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3308      	adds	r3, #8
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	e002      	b.n	800236a <vListInsert+0x2e>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	429a      	cmp	r2, r3
 8002374:	d2f6      	bcs.n	8002364 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	601a      	str	r2, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6892      	ldr	r2, [r2, #8]
 80023c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6852      	ldr	r2, [r2, #4]
 80023cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d103      	bne.n	80023e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	1e5a      	subs	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
	...

08002400 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10b      	bne.n	800242c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800242c:	f001 fc56 	bl	8003cdc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002438:	68f9      	ldr	r1, [r7, #12]
 800243a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	441a      	add	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245c:	3b01      	subs	r3, #1
 800245e:	68f9      	ldr	r1, [r7, #12]
 8002460:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	441a      	add	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	22ff      	movs	r2, #255	@ 0xff
 8002470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	22ff      	movs	r2, #255	@ 0xff
 8002478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d114      	bne.n	80024ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d01a      	beq.n	80024c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3310      	adds	r3, #16
 800248e:	4618      	mov	r0, r3
 8002490:	f001 f86a 	bl	8003568 <xTaskRemoveFromEventList>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d012      	beq.n	80024c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800249a:	4b0d      	ldr	r3, [pc, #52]	@ (80024d0 <xQueueGenericReset+0xd0>)
 800249c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	e009      	b.n	80024c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3310      	adds	r3, #16
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fef5 	bl	80022a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3324      	adds	r3, #36	@ 0x24
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fef0 	bl	80022a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80024c0:	f001 fc3c 	bl	8003d3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80024c4:	2301      	movs	r3, #1
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	e000ed04 	.word	0xe000ed04

080024d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	@ 0x28
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	4613      	mov	r3, r2
 80024e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10b      	bne.n	8002500 <xQueueGenericCreate+0x2c>
	__asm volatile
 80024e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ec:	f383 8811 	msr	BASEPRI, r3
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	613b      	str	r3, [r7, #16]
}
 80024fa:	bf00      	nop
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	fb02 f303 	mul.w	r3, r2, r3
 8002508:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3348      	adds	r3, #72	@ 0x48
 800250e:	4618      	mov	r0, r3
 8002510:	f001 fca6 	bl	8003e60 <pvPortMalloc>
 8002514:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d011      	beq.n	8002540 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3348      	adds	r3, #72	@ 0x48
 8002524:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800252e:	79fa      	ldrb	r2, [r7, #7]
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f805 	bl	800254a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002540:	69bb      	ldr	r3, [r7, #24]
	}
 8002542:	4618      	mov	r0, r3
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d103      	bne.n	8002566 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	e002      	b.n	800256c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002578:	2101      	movs	r1, #1
 800257a:	69b8      	ldr	r0, [r7, #24]
 800257c:	f7ff ff40 	bl	8002400 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002580:	bf00      	nop
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08e      	sub	sp, #56	@ 0x38
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002596:	2300      	movs	r3, #0
 8002598:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800259e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10b      	bne.n	80025bc <xQueueGenericSend+0x34>
	__asm volatile
 80025a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a8:	f383 8811 	msr	BASEPRI, r3
 80025ac:	f3bf 8f6f 	isb	sy
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80025b6:	bf00      	nop
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d103      	bne.n	80025ca <xQueueGenericSend+0x42>
 80025c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <xQueueGenericSend+0x46>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <xQueueGenericSend+0x48>
 80025ce:	2300      	movs	r3, #0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10b      	bne.n	80025ec <xQueueGenericSend+0x64>
	__asm volatile
 80025d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025d8:	f383 8811 	msr	BASEPRI, r3
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80025e6:	bf00      	nop
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d103      	bne.n	80025fa <xQueueGenericSend+0x72>
 80025f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <xQueueGenericSend+0x76>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <xQueueGenericSend+0x78>
 80025fe:	2300      	movs	r3, #0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10b      	bne.n	800261c <xQueueGenericSend+0x94>
	__asm volatile
 8002604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	623b      	str	r3, [r7, #32]
}
 8002616:	bf00      	nop
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800261c:	f001 f964 	bl	80038e8 <xTaskGetSchedulerState>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d102      	bne.n	800262c <xQueueGenericSend+0xa4>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <xQueueGenericSend+0xa8>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <xQueueGenericSend+0xaa>
 8002630:	2300      	movs	r3, #0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10b      	bne.n	800264e <xQueueGenericSend+0xc6>
	__asm volatile
 8002636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800263a:	f383 8811 	msr	BASEPRI, r3
 800263e:	f3bf 8f6f 	isb	sy
 8002642:	f3bf 8f4f 	dsb	sy
 8002646:	61fb      	str	r3, [r7, #28]
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	e7fd      	b.n	800264a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800264e:	f001 fb45 	bl	8003cdc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800265a:	429a      	cmp	r2, r3
 800265c:	d302      	bcc.n	8002664 <xQueueGenericSend+0xdc>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d129      	bne.n	80026b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800266a:	f000 fa55 	bl	8002b18 <prvCopyDataToQueue>
 800266e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	2b00      	cmp	r3, #0
 8002676:	d010      	beq.n	800269a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267a:	3324      	adds	r3, #36	@ 0x24
 800267c:	4618      	mov	r0, r3
 800267e:	f000 ff73 	bl	8003568 <xTaskRemoveFromEventList>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d013      	beq.n	80026b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002688:	4b3f      	ldr	r3, [pc, #252]	@ (8002788 <xQueueGenericSend+0x200>)
 800268a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	e00a      	b.n	80026b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800269a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800269c:	2b00      	cmp	r3, #0
 800269e:	d007      	beq.n	80026b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80026a0:	4b39      	ldr	r3, [pc, #228]	@ (8002788 <xQueueGenericSend+0x200>)
 80026a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026b0:	f001 fb44 	bl	8003d3c <vPortExitCritical>
				return pdPASS;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e063      	b.n	8002780 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d103      	bne.n	80026c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026be:	f001 fb3d 	bl	8003d3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e05c      	b.n	8002780 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d106      	bne.n	80026da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 ffad 	bl	8003630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80026d6:	2301      	movs	r3, #1
 80026d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80026da:	f001 fb2f 	bl	8003d3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80026de:	f000 fd5b 	bl	8003198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026e2:	f001 fafb 	bl	8003cdc <vPortEnterCritical>
 80026e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026ec:	b25b      	sxtb	r3, r3
 80026ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f2:	d103      	bne.n	80026fc <xQueueGenericSend+0x174>
 80026f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002702:	b25b      	sxtb	r3, r3
 8002704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002708:	d103      	bne.n	8002712 <xQueueGenericSend+0x18a>
 800270a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002712:	f001 fb13 	bl	8003d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002716:	1d3a      	adds	r2, r7, #4
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f000 ff9c 	bl	800365c <xTaskCheckForTimeOut>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d124      	bne.n	8002774 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800272a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800272c:	f000 faec 	bl	8002d08 <prvIsQueueFull>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d018      	beq.n	8002768 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002738:	3310      	adds	r3, #16
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f000 feec 	bl	800351c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002744:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002746:	f000 fa77 	bl	8002c38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800274a:	f000 fd33 	bl	80031b4 <xTaskResumeAll>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	f47f af7c 	bne.w	800264e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002756:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <xQueueGenericSend+0x200>)
 8002758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	e772      	b.n	800264e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002768:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800276a:	f000 fa65 	bl	8002c38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800276e:	f000 fd21 	bl	80031b4 <xTaskResumeAll>
 8002772:	e76c      	b.n	800264e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002774:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002776:	f000 fa5f 	bl	8002c38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800277a:	f000 fd1b 	bl	80031b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800277e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002780:	4618      	mov	r0, r3
 8002782:	3738      	adds	r7, #56	@ 0x38
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	e000ed04 	.word	0xe000ed04

0800278c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08c      	sub	sp, #48	@ 0x30
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002798:	2300      	movs	r3, #0
 800279a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80027a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10b      	bne.n	80027be <xQueueReceive+0x32>
	__asm volatile
 80027a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027aa:	f383 8811 	msr	BASEPRI, r3
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f3bf 8f4f 	dsb	sy
 80027b6:	623b      	str	r3, [r7, #32]
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	e7fd      	b.n	80027ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d103      	bne.n	80027cc <xQueueReceive+0x40>
 80027c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <xQueueReceive+0x44>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <xQueueReceive+0x46>
 80027d0:	2300      	movs	r3, #0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10b      	bne.n	80027ee <xQueueReceive+0x62>
	__asm volatile
 80027d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027da:	f383 8811 	msr	BASEPRI, r3
 80027de:	f3bf 8f6f 	isb	sy
 80027e2:	f3bf 8f4f 	dsb	sy
 80027e6:	61fb      	str	r3, [r7, #28]
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	e7fd      	b.n	80027ea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027ee:	f001 f87b 	bl	80038e8 <xTaskGetSchedulerState>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <xQueueReceive+0x72>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <xQueueReceive+0x76>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <xQueueReceive+0x78>
 8002802:	2300      	movs	r3, #0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10b      	bne.n	8002820 <xQueueReceive+0x94>
	__asm volatile
 8002808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800280c:	f383 8811 	msr	BASEPRI, r3
 8002810:	f3bf 8f6f 	isb	sy
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	61bb      	str	r3, [r7, #24]
}
 800281a:	bf00      	nop
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002820:	f001 fa5c 	bl	8003cdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002828:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01f      	beq.n	8002870 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002834:	f000 f9da 	bl	8002bec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283a:	1e5a      	subs	r2, r3, #1
 800283c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00f      	beq.n	8002868 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284a:	3310      	adds	r3, #16
 800284c:	4618      	mov	r0, r3
 800284e:	f000 fe8b 	bl	8003568 <xTaskRemoveFromEventList>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d007      	beq.n	8002868 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002858:	4b3c      	ldr	r3, [pc, #240]	@ (800294c <xQueueReceive+0x1c0>)
 800285a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002868:	f001 fa68 	bl	8003d3c <vPortExitCritical>
				return pdPASS;
 800286c:	2301      	movs	r3, #1
 800286e:	e069      	b.n	8002944 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d103      	bne.n	800287e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002876:	f001 fa61 	bl	8003d3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800287a:	2300      	movs	r3, #0
 800287c:	e062      	b.n	8002944 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800287e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002884:	f107 0310 	add.w	r3, r7, #16
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fed1 	bl	8003630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800288e:	2301      	movs	r3, #1
 8002890:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002892:	f001 fa53 	bl	8003d3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002896:	f000 fc7f 	bl	8003198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800289a:	f001 fa1f 	bl	8003cdc <vPortEnterCritical>
 800289e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80028a4:	b25b      	sxtb	r3, r3
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028aa:	d103      	bne.n	80028b4 <xQueueReceive+0x128>
 80028ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80028ba:	b25b      	sxtb	r3, r3
 80028bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c0:	d103      	bne.n	80028ca <xQueueReceive+0x13e>
 80028c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028ca:	f001 fa37 	bl	8003d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028ce:	1d3a      	adds	r2, r7, #4
 80028d0:	f107 0310 	add.w	r3, r7, #16
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fec0 	bl	800365c <xTaskCheckForTimeOut>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d123      	bne.n	800292a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028e4:	f000 f9fa 	bl	8002cdc <prvIsQueueEmpty>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d017      	beq.n	800291e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f0:	3324      	adds	r3, #36	@ 0x24
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fe10 	bl	800351c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028fe:	f000 f99b 	bl	8002c38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002902:	f000 fc57 	bl	80031b4 <xTaskResumeAll>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d189      	bne.n	8002820 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800290c:	4b0f      	ldr	r3, [pc, #60]	@ (800294c <xQueueReceive+0x1c0>)
 800290e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	e780      	b.n	8002820 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800291e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002920:	f000 f98a 	bl	8002c38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002924:	f000 fc46 	bl	80031b4 <xTaskResumeAll>
 8002928:	e77a      	b.n	8002820 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800292a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800292c:	f000 f984 	bl	8002c38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002930:	f000 fc40 	bl	80031b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002934:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002936:	f000 f9d1 	bl	8002cdc <prvIsQueueEmpty>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	f43f af6f 	beq.w	8002820 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002942:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002944:	4618      	mov	r0, r3
 8002946:	3730      	adds	r7, #48	@ 0x30
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	e000ed04 	.word	0xe000ed04

08002950 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08e      	sub	sp, #56	@ 0x38
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800295c:	2300      	movs	r3, #0
 800295e:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10b      	bne.n	8002982 <xQueuePeek+0x32>
	__asm volatile
 800296a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800296e:	f383 8811 	msr	BASEPRI, r3
 8002972:	f3bf 8f6f 	isb	sy
 8002976:	f3bf 8f4f 	dsb	sy
 800297a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	e7fd      	b.n	800297e <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d103      	bne.n	8002990 <xQueuePeek+0x40>
 8002988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <xQueuePeek+0x44>
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <xQueuePeek+0x46>
 8002994:	2300      	movs	r3, #0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10b      	bne.n	80029b2 <xQueuePeek+0x62>
	__asm volatile
 800299a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800299e:	f383 8811 	msr	BASEPRI, r3
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	623b      	str	r3, [r7, #32]
}
 80029ac:	bf00      	nop
 80029ae:	bf00      	nop
 80029b0:	e7fd      	b.n	80029ae <xQueuePeek+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029b2:	f000 ff99 	bl	80038e8 <xTaskGetSchedulerState>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <xQueuePeek+0x72>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <xQueuePeek+0x76>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <xQueuePeek+0x78>
 80029c6:	2300      	movs	r3, #0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10b      	bne.n	80029e4 <xQueuePeek+0x94>
	__asm volatile
 80029cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029d0:	f383 8811 	msr	BASEPRI, r3
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	f3bf 8f4f 	dsb	sy
 80029dc:	61fb      	str	r3, [r7, #28]
}
 80029de:	bf00      	nop
 80029e0:	bf00      	nop
 80029e2:	e7fd      	b.n	80029e0 <xQueuePeek+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029e4:	f001 f97a 	bl	8003cdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d021      	beq.n	8002a38 <xQueuePeek+0xe8>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80029f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029fe:	f000 f8f5 	bl	8002bec <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8002a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a06:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00f      	beq.n	8002a30 <xQueuePeek+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a12:	3324      	adds	r3, #36	@ 0x24
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fda7 	bl	8003568 <xTaskRemoveFromEventList>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <xQueuePeek+0xe0>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a20:	4b3c      	ldr	r3, [pc, #240]	@ (8002b14 <xQueuePeek+0x1c4>)
 8002a22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002a30:	f001 f984 	bl	8003d3c <vPortExitCritical>
				return pdPASS;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e069      	b.n	8002b0c <xQueuePeek+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d103      	bne.n	8002a46 <xQueuePeek+0xf6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a3e:	f001 f97d 	bl	8003d3c <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e062      	b.n	8002b0c <xQueuePeek+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d106      	bne.n	8002a5a <xQueuePeek+0x10a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 fded 	bl	8003630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a56:	2301      	movs	r3, #1
 8002a58:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a5a:	f001 f96f 	bl	8003d3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a5e:	f000 fb9b 	bl	8003198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a62:	f001 f93b 	bl	8003cdc <vPortEnterCritical>
 8002a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a6c:	b25b      	sxtb	r3, r3
 8002a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a72:	d103      	bne.n	8002a7c <xQueuePeek+0x12c>
 8002a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a82:	b25b      	sxtb	r3, r3
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d103      	bne.n	8002a92 <xQueuePeek+0x142>
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a92:	f001 f953 	bl	8003d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a96:	1d3a      	adds	r2, r7, #4
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fddc 	bl	800365c <xTaskCheckForTimeOut>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d123      	bne.n	8002af2 <xQueuePeek+0x1a2>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002aaa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002aac:	f000 f916 	bl	8002cdc <prvIsQueueEmpty>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d017      	beq.n	8002ae6 <xQueuePeek+0x196>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab8:	3324      	adds	r3, #36	@ 0x24
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fd2c 	bl	800351c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ac6:	f000 f8b7 	bl	8002c38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002aca:	f000 fb73 	bl	80031b4 <xTaskResumeAll>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d187      	bne.n	80029e4 <xQueuePeek+0x94>
				{
					portYIELD_WITHIN_API();
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b14 <xQueuePeek+0x1c4>)
 8002ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	e77e      	b.n	80029e4 <xQueuePeek+0x94>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8002ae6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ae8:	f000 f8a6 	bl	8002c38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002aec:	f000 fb62 	bl	80031b4 <xTaskResumeAll>
 8002af0:	e778      	b.n	80029e4 <xQueuePeek+0x94>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8002af2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002af4:	f000 f8a0 	bl	8002c38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002af8:	f000 fb5c 	bl	80031b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002afc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002afe:	f000 f8ed 	bl	8002cdc <prvIsQueueEmpty>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f43f af6d 	beq.w	80029e4 <xQueuePeek+0x94>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002b0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3738      	adds	r7, #56	@ 0x38
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	e000ed04 	.word	0xe000ed04

08002b18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10d      	bne.n	8002b52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d14d      	bne.n	8002bda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 feee 	bl	8003924 <xTaskPriorityDisinherit>
 8002b48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	e043      	b.n	8002bda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d119      	bne.n	8002b8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6858      	ldr	r0, [r3, #4]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	461a      	mov	r2, r3
 8002b62:	68b9      	ldr	r1, [r7, #8]
 8002b64:	f001 fc58 	bl	8004418 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	441a      	add	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d32b      	bcc.n	8002bda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	e026      	b.n	8002bda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	68d8      	ldr	r0, [r3, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	461a      	mov	r2, r3
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	f001 fc3e 	bl	8004418 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba4:	425b      	negs	r3, r3
 8002ba6:	441a      	add	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d207      	bcs.n	8002bc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	425b      	negs	r3, r3
 8002bc2:	441a      	add	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d105      	bne.n	8002bda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002be2:	697b      	ldr	r3, [r7, #20]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d018      	beq.n	8002c30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	441a      	add	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d303      	bcc.n	8002c20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68d9      	ldr	r1, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	461a      	mov	r2, r3
 8002c2a:	6838      	ldr	r0, [r7, #0]
 8002c2c:	f001 fbf4 	bl	8004418 <memcpy>
	}
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002c40:	f001 f84c 	bl	8003cdc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c4c:	e011      	b.n	8002c72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d012      	beq.n	8002c7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3324      	adds	r3, #36	@ 0x24
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fc84 	bl	8003568 <xTaskRemoveFromEventList>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c66:	f000 fd5d 	bl	8003724 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	dce9      	bgt.n	8002c4e <prvUnlockQueue+0x16>
 8002c7a:	e000      	b.n	8002c7e <prvUnlockQueue+0x46>
					break;
 8002c7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	22ff      	movs	r2, #255	@ 0xff
 8002c82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002c86:	f001 f859 	bl	8003d3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c8a:	f001 f827 	bl	8003cdc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c96:	e011      	b.n	8002cbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d012      	beq.n	8002cc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3310      	adds	r3, #16
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fc5f 	bl	8003568 <xTaskRemoveFromEventList>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002cb0:	f000 fd38 	bl	8003724 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002cb4:	7bbb      	ldrb	r3, [r7, #14]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	dce9      	bgt.n	8002c98 <prvUnlockQueue+0x60>
 8002cc4:	e000      	b.n	8002cc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002cc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	22ff      	movs	r2, #255	@ 0xff
 8002ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002cd0:	f001 f834 	bl	8003d3c <vPortExitCritical>
}
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ce4:	f000 fffa 	bl	8003cdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	e001      	b.n	8002cfa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cfa:	f001 f81f 	bl	8003d3c <vPortExitCritical>

	return xReturn;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d10:	f000 ffe4 	bl	8003cdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d102      	bne.n	8002d26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d20:	2301      	movs	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e001      	b.n	8002d2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d2a:	f001 f807 	bl	8003d3c <vPortExitCritical>

	return xReturn;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08e      	sub	sp, #56	@ 0x38
 8002d3c:	af04      	add	r7, sp, #16
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	623b      	str	r3, [r7, #32]
}
 8002d5e:	bf00      	nop
 8002d60:	bf00      	nop
 8002d62:	e7fd      	b.n	8002d60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10b      	bne.n	8002d82 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	61fb      	str	r3, [r7, #28]
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	e7fd      	b.n	8002d7e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d82:	2354      	movs	r3, #84	@ 0x54
 8002d84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b54      	cmp	r3, #84	@ 0x54
 8002d8a:	d00b      	beq.n	8002da4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	61bb      	str	r3, [r7, #24]
}
 8002d9e:	bf00      	nop
 8002da0:	bf00      	nop
 8002da2:	e7fd      	b.n	8002da0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002da4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01e      	beq.n	8002dea <xTaskCreateStatic+0xb2>
 8002dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d01b      	beq.n	8002dea <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002dba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	9303      	str	r3, [sp, #12]
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dca:	9302      	str	r3, [sp, #8]
 8002dcc:	f107 0314 	add.w	r3, r7, #20
 8002dd0:	9301      	str	r3, [sp, #4]
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f850 	bl	8002e82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002de2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002de4:	f000 f8d6 	bl	8002f94 <prvAddNewTaskToReadyList>
 8002de8:	e001      	b.n	8002dee <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002dee:	697b      	ldr	r3, [r7, #20]
	}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3728      	adds	r7, #40	@ 0x28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08c      	sub	sp, #48	@ 0x30
 8002dfc:	af04      	add	r7, sp, #16
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f001 f827 	bl	8003e60 <pvPortMalloc>
 8002e12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00e      	beq.n	8002e38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e1a:	2054      	movs	r0, #84	@ 0x54
 8002e1c:	f001 f820 	bl	8003e60 <pvPortMalloc>
 8002e20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e2e:	e005      	b.n	8002e3c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e30:	6978      	ldr	r0, [r7, #20]
 8002e32:	f001 f8e3 	bl	8003ffc <vPortFree>
 8002e36:	e001      	b.n	8002e3c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d017      	beq.n	8002e72 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e4a:	88fa      	ldrh	r2, [r7, #6]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	9303      	str	r3, [sp, #12]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	9302      	str	r3, [sp, #8]
 8002e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f80e 	bl	8002e82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e66:	69f8      	ldr	r0, [r7, #28]
 8002e68:	f000 f894 	bl	8002f94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	e002      	b.n	8002e78 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295
 8002e76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e78:	69bb      	ldr	r3, [r7, #24]
	}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3720      	adds	r7, #32
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b088      	sub	sp, #32
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f023 0307 	bic.w	r3, r3, #7
 8002ea8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00b      	beq.n	8002ecc <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	617b      	str	r3, [r7, #20]
}
 8002ec6:	bf00      	nop
 8002ec8:	bf00      	nop
 8002eca:	e7fd      	b.n	8002ec8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01f      	beq.n	8002f12 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	e012      	b.n	8002efe <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	4413      	add	r3, r2
 8002ede:	7819      	ldrb	r1, [r3, #0]
 8002ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3334      	adds	r3, #52	@ 0x34
 8002ee8:	460a      	mov	r2, r1
 8002eea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	3301      	adds	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b0f      	cmp	r3, #15
 8002f02:	d9e9      	bls.n	8002ed8 <prvInitialiseNewTask+0x56>
 8002f04:	e000      	b.n	8002f08 <prvInitialiseNewTask+0x86>
			{
				break;
 8002f06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f10:	e003      	b.n	8002f1a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1c:	2b06      	cmp	r3, #6
 8002f1e:	d901      	bls.n	8002f24 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f20:	2306      	movs	r3, #6
 8002f22:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f28:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f2e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f32:	2200      	movs	r2, #0
 8002f34:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f38:	3304      	adds	r3, #4
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff f9cf 	bl	80022de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f42:	3318      	adds	r3, #24
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff f9ca 	bl	80022de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f52:	f1c3 0207 	rsb	r2, r3, #7
 8002f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f5e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f62:	2200      	movs	r2, #0
 8002f64:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	68f9      	ldr	r1, [r7, #12]
 8002f72:	69b8      	ldr	r0, [r7, #24]
 8002f74:	f000 fdc4 	bl	8003b00 <pxPortInitialiseStack>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f8a:	bf00      	nop
 8002f8c:	3720      	adds	r7, #32
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f9c:	f000 fe9e 	bl	8003cdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800304c <prvAddNewTaskToReadyList+0xb8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	4a29      	ldr	r2, [pc, #164]	@ (800304c <prvAddNewTaskToReadyList+0xb8>)
 8002fa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002faa:	4b29      	ldr	r3, [pc, #164]	@ (8003050 <prvAddNewTaskToReadyList+0xbc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fb2:	4a27      	ldr	r2, [pc, #156]	@ (8003050 <prvAddNewTaskToReadyList+0xbc>)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fb8:	4b24      	ldr	r3, [pc, #144]	@ (800304c <prvAddNewTaskToReadyList+0xb8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d110      	bne.n	8002fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fc0:	f000 fbd4 	bl	800376c <prvInitialiseTaskLists>
 8002fc4:	e00d      	b.n	8002fe2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002fc6:	4b23      	ldr	r3, [pc, #140]	@ (8003054 <prvAddNewTaskToReadyList+0xc0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fce:	4b20      	ldr	r3, [pc, #128]	@ (8003050 <prvAddNewTaskToReadyList+0xbc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d802      	bhi.n	8002fe2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8003050 <prvAddNewTaskToReadyList+0xbc>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8003058 <prvAddNewTaskToReadyList+0xc4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8003058 <prvAddNewTaskToReadyList+0xc4>)
 8002fea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	4b19      	ldr	r3, [pc, #100]	@ (800305c <prvAddNewTaskToReadyList+0xc8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	4a18      	ldr	r2, [pc, #96]	@ (800305c <prvAddNewTaskToReadyList+0xc8>)
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4a15      	ldr	r2, [pc, #84]	@ (8003060 <prvAddNewTaskToReadyList+0xcc>)
 800300c:	441a      	add	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3304      	adds	r3, #4
 8003012:	4619      	mov	r1, r3
 8003014:	4610      	mov	r0, r2
 8003016:	f7ff f96e 	bl	80022f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800301a:	f000 fe8f 	bl	8003d3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800301e:	4b0d      	ldr	r3, [pc, #52]	@ (8003054 <prvAddNewTaskToReadyList+0xc0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00e      	beq.n	8003044 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003026:	4b0a      	ldr	r3, [pc, #40]	@ (8003050 <prvAddNewTaskToReadyList+0xbc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003030:	429a      	cmp	r2, r3
 8003032:	d207      	bcs.n	8003044 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003034:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <prvAddNewTaskToReadyList+0xd0>)
 8003036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000478 	.word	0x20000478
 8003050:	20000378 	.word	0x20000378
 8003054:	20000484 	.word	0x20000484
 8003058:	20000494 	.word	0x20000494
 800305c:	20000480 	.word	0x20000480
 8003060:	2000037c 	.word	0x2000037c
 8003064:	e000ed04 	.word	0xe000ed04

08003068 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d018      	beq.n	80030ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800307a:	4b14      	ldr	r3, [pc, #80]	@ (80030cc <vTaskDelay+0x64>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00b      	beq.n	800309a <vTaskDelay+0x32>
	__asm volatile
 8003082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	60bb      	str	r3, [r7, #8]
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
 8003098:	e7fd      	b.n	8003096 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800309a:	f000 f87d 	bl	8003198 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800309e:	2100      	movs	r1, #0
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fcc7 	bl	8003a34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030a6:	f000 f885 	bl	80031b4 <xTaskResumeAll>
 80030aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d107      	bne.n	80030c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80030b2:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <vTaskDelay+0x68>)
 80030b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200004a0 	.word	0x200004a0
 80030d0:	e000ed04 	.word	0xe000ed04

080030d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08a      	sub	sp, #40	@ 0x28
 80030d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030e2:	463a      	mov	r2, r7
 80030e4:	1d39      	adds	r1, r7, #4
 80030e6:	f107 0308 	add.w	r3, r7, #8
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd f838 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030f0:	6839      	ldr	r1, [r7, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	9202      	str	r2, [sp, #8]
 80030f8:	9301      	str	r3, [sp, #4]
 80030fa:	2300      	movs	r3, #0
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2300      	movs	r3, #0
 8003100:	460a      	mov	r2, r1
 8003102:	491f      	ldr	r1, [pc, #124]	@ (8003180 <vTaskStartScheduler+0xac>)
 8003104:	481f      	ldr	r0, [pc, #124]	@ (8003184 <vTaskStartScheduler+0xb0>)
 8003106:	f7ff fe17 	bl	8002d38 <xTaskCreateStatic>
 800310a:	4603      	mov	r3, r0
 800310c:	4a1e      	ldr	r2, [pc, #120]	@ (8003188 <vTaskStartScheduler+0xb4>)
 800310e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003110:	4b1d      	ldr	r3, [pc, #116]	@ (8003188 <vTaskStartScheduler+0xb4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003118:	2301      	movs	r3, #1
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	e001      	b.n	8003122 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d116      	bne.n	8003156 <vTaskStartScheduler+0x82>
	__asm volatile
 8003128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312c:	f383 8811 	msr	BASEPRI, r3
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	613b      	str	r3, [r7, #16]
}
 800313a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800313c:	4b13      	ldr	r3, [pc, #76]	@ (800318c <vTaskStartScheduler+0xb8>)
 800313e:	f04f 32ff 	mov.w	r2, #4294967295
 8003142:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003144:	4b12      	ldr	r3, [pc, #72]	@ (8003190 <vTaskStartScheduler+0xbc>)
 8003146:	2201      	movs	r2, #1
 8003148:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800314a:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <vTaskStartScheduler+0xc0>)
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003150:	f000 fd52 	bl	8003bf8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003154:	e00f      	b.n	8003176 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d10b      	bne.n	8003176 <vTaskStartScheduler+0xa2>
	__asm volatile
 800315e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	60fb      	str	r3, [r7, #12]
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	e7fd      	b.n	8003172 <vTaskStartScheduler+0x9e>
}
 8003176:	bf00      	nop
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	08004e88 	.word	0x08004e88
 8003184:	0800373d 	.word	0x0800373d
 8003188:	2000049c 	.word	0x2000049c
 800318c:	20000498 	.word	0x20000498
 8003190:	20000484 	.word	0x20000484
 8003194:	2000047c 	.word	0x2000047c

08003198 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800319c:	4b04      	ldr	r3, [pc, #16]	@ (80031b0 <vTaskSuspendAll+0x18>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3301      	adds	r3, #1
 80031a2:	4a03      	ldr	r2, [pc, #12]	@ (80031b0 <vTaskSuspendAll+0x18>)
 80031a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80031a6:	bf00      	nop
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	200004a0 	.word	0x200004a0

080031b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031be:	2300      	movs	r3, #0
 80031c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031c2:	4b42      	ldr	r3, [pc, #264]	@ (80032cc <xTaskResumeAll+0x118>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10b      	bne.n	80031e2 <xTaskResumeAll+0x2e>
	__asm volatile
 80031ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	603b      	str	r3, [r7, #0]
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	e7fd      	b.n	80031de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031e2:	f000 fd7b 	bl	8003cdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031e6:	4b39      	ldr	r3, [pc, #228]	@ (80032cc <xTaskResumeAll+0x118>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	4a37      	ldr	r2, [pc, #220]	@ (80032cc <xTaskResumeAll+0x118>)
 80031ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031f0:	4b36      	ldr	r3, [pc, #216]	@ (80032cc <xTaskResumeAll+0x118>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d161      	bne.n	80032bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031f8:	4b35      	ldr	r3, [pc, #212]	@ (80032d0 <xTaskResumeAll+0x11c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d05d      	beq.n	80032bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003200:	e02e      	b.n	8003260 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003202:	4b34      	ldr	r3, [pc, #208]	@ (80032d4 <xTaskResumeAll+0x120>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	3318      	adds	r3, #24
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f8cc 	bl	80023ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3304      	adds	r3, #4
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff f8c7 	bl	80023ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003222:	2201      	movs	r2, #1
 8003224:	409a      	lsls	r2, r3
 8003226:	4b2c      	ldr	r3, [pc, #176]	@ (80032d8 <xTaskResumeAll+0x124>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4313      	orrs	r3, r2
 800322c:	4a2a      	ldr	r2, [pc, #168]	@ (80032d8 <xTaskResumeAll+0x124>)
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4a27      	ldr	r2, [pc, #156]	@ (80032dc <xTaskResumeAll+0x128>)
 800323e:	441a      	add	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3304      	adds	r3, #4
 8003244:	4619      	mov	r1, r3
 8003246:	4610      	mov	r0, r2
 8003248:	f7ff f855 	bl	80022f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003250:	4b23      	ldr	r3, [pc, #140]	@ (80032e0 <xTaskResumeAll+0x12c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003256:	429a      	cmp	r2, r3
 8003258:	d302      	bcc.n	8003260 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800325a:	4b22      	ldr	r3, [pc, #136]	@ (80032e4 <xTaskResumeAll+0x130>)
 800325c:	2201      	movs	r2, #1
 800325e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003260:	4b1c      	ldr	r3, [pc, #112]	@ (80032d4 <xTaskResumeAll+0x120>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1cc      	bne.n	8003202 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800326e:	f000 fb1b 	bl	80038a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003272:	4b1d      	ldr	r3, [pc, #116]	@ (80032e8 <xTaskResumeAll+0x134>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d010      	beq.n	80032a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800327e:	f000 f837 	bl	80032f0 <xTaskIncrementTick>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003288:	4b16      	ldr	r3, [pc, #88]	@ (80032e4 <xTaskResumeAll+0x130>)
 800328a:	2201      	movs	r2, #1
 800328c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3b01      	subs	r3, #1
 8003292:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f1      	bne.n	800327e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800329a:	4b13      	ldr	r3, [pc, #76]	@ (80032e8 <xTaskResumeAll+0x134>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032a0:	4b10      	ldr	r3, [pc, #64]	@ (80032e4 <xTaskResumeAll+0x130>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d009      	beq.n	80032bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032a8:	2301      	movs	r3, #1
 80032aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032ac:	4b0f      	ldr	r3, [pc, #60]	@ (80032ec <xTaskResumeAll+0x138>)
 80032ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032bc:	f000 fd3e 	bl	8003d3c <vPortExitCritical>

	return xAlreadyYielded;
 80032c0:	68bb      	ldr	r3, [r7, #8]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	200004a0 	.word	0x200004a0
 80032d0:	20000478 	.word	0x20000478
 80032d4:	20000438 	.word	0x20000438
 80032d8:	20000480 	.word	0x20000480
 80032dc:	2000037c 	.word	0x2000037c
 80032e0:	20000378 	.word	0x20000378
 80032e4:	2000048c 	.word	0x2000048c
 80032e8:	20000488 	.word	0x20000488
 80032ec:	e000ed04 	.word	0xe000ed04

080032f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032fa:	4b4f      	ldr	r3, [pc, #316]	@ (8003438 <xTaskIncrementTick+0x148>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f040 808f 	bne.w	8003422 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003304:	4b4d      	ldr	r3, [pc, #308]	@ (800343c <xTaskIncrementTick+0x14c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3301      	adds	r3, #1
 800330a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800330c:	4a4b      	ldr	r2, [pc, #300]	@ (800343c <xTaskIncrementTick+0x14c>)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d121      	bne.n	800335c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003318:	4b49      	ldr	r3, [pc, #292]	@ (8003440 <xTaskIncrementTick+0x150>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	603b      	str	r3, [r7, #0]
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop
 8003338:	e7fd      	b.n	8003336 <xTaskIncrementTick+0x46>
 800333a:	4b41      	ldr	r3, [pc, #260]	@ (8003440 <xTaskIncrementTick+0x150>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	4b40      	ldr	r3, [pc, #256]	@ (8003444 <xTaskIncrementTick+0x154>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a3e      	ldr	r2, [pc, #248]	@ (8003440 <xTaskIncrementTick+0x150>)
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	4a3e      	ldr	r2, [pc, #248]	@ (8003444 <xTaskIncrementTick+0x154>)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b3e      	ldr	r3, [pc, #248]	@ (8003448 <xTaskIncrementTick+0x158>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	4a3c      	ldr	r2, [pc, #240]	@ (8003448 <xTaskIncrementTick+0x158>)
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	f000 faa6 	bl	80038a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800335c:	4b3b      	ldr	r3, [pc, #236]	@ (800344c <xTaskIncrementTick+0x15c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	429a      	cmp	r2, r3
 8003364:	d348      	bcc.n	80033f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003366:	4b36      	ldr	r3, [pc, #216]	@ (8003440 <xTaskIncrementTick+0x150>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d104      	bne.n	800337a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003370:	4b36      	ldr	r3, [pc, #216]	@ (800344c <xTaskIncrementTick+0x15c>)
 8003372:	f04f 32ff 	mov.w	r2, #4294967295
 8003376:	601a      	str	r2, [r3, #0]
					break;
 8003378:	e03e      	b.n	80033f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800337a:	4b31      	ldr	r3, [pc, #196]	@ (8003440 <xTaskIncrementTick+0x150>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	429a      	cmp	r2, r3
 8003390:	d203      	bcs.n	800339a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003392:	4a2e      	ldr	r2, [pc, #184]	@ (800344c <xTaskIncrementTick+0x15c>)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003398:	e02e      	b.n	80033f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	3304      	adds	r3, #4
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff f804 	bl	80023ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d004      	beq.n	80033b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	3318      	adds	r3, #24
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe fffb 	bl	80023ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ba:	2201      	movs	r2, #1
 80033bc:	409a      	lsls	r2, r3
 80033be:	4b24      	ldr	r3, [pc, #144]	@ (8003450 <xTaskIncrementTick+0x160>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	4a22      	ldr	r2, [pc, #136]	@ (8003450 <xTaskIncrementTick+0x160>)
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003454 <xTaskIncrementTick+0x164>)
 80033d6:	441a      	add	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	3304      	adds	r3, #4
 80033dc:	4619      	mov	r1, r3
 80033de:	4610      	mov	r0, r2
 80033e0:	f7fe ff89 	bl	80022f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003458 <xTaskIncrementTick+0x168>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d3b9      	bcc.n	8003366 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80033f2:	2301      	movs	r3, #1
 80033f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033f6:	e7b6      	b.n	8003366 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033f8:	4b17      	ldr	r3, [pc, #92]	@ (8003458 <xTaskIncrementTick+0x168>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033fe:	4915      	ldr	r1, [pc, #84]	@ (8003454 <xTaskIncrementTick+0x164>)
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d901      	bls.n	8003414 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003410:	2301      	movs	r3, #1
 8003412:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003414:	4b11      	ldr	r3, [pc, #68]	@ (800345c <xTaskIncrementTick+0x16c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d007      	beq.n	800342c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800341c:	2301      	movs	r3, #1
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	e004      	b.n	800342c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003422:	4b0f      	ldr	r3, [pc, #60]	@ (8003460 <xTaskIncrementTick+0x170>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3301      	adds	r3, #1
 8003428:	4a0d      	ldr	r2, [pc, #52]	@ (8003460 <xTaskIncrementTick+0x170>)
 800342a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800342c:	697b      	ldr	r3, [r7, #20]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	200004a0 	.word	0x200004a0
 800343c:	2000047c 	.word	0x2000047c
 8003440:	20000430 	.word	0x20000430
 8003444:	20000434 	.word	0x20000434
 8003448:	20000490 	.word	0x20000490
 800344c:	20000498 	.word	0x20000498
 8003450:	20000480 	.word	0x20000480
 8003454:	2000037c 	.word	0x2000037c
 8003458:	20000378 	.word	0x20000378
 800345c:	2000048c 	.word	0x2000048c
 8003460:	20000488 	.word	0x20000488

08003464 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800346a:	4b27      	ldr	r3, [pc, #156]	@ (8003508 <vTaskSwitchContext+0xa4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003472:	4b26      	ldr	r3, [pc, #152]	@ (800350c <vTaskSwitchContext+0xa8>)
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003478:	e040      	b.n	80034fc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800347a:	4b24      	ldr	r3, [pc, #144]	@ (800350c <vTaskSwitchContext+0xa8>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003480:	4b23      	ldr	r3, [pc, #140]	@ (8003510 <vTaskSwitchContext+0xac>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	fab3 f383 	clz	r3, r3
 800348c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800348e:	7afb      	ldrb	r3, [r7, #11]
 8003490:	f1c3 031f 	rsb	r3, r3, #31
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	491f      	ldr	r1, [pc, #124]	@ (8003514 <vTaskSwitchContext+0xb0>)
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10b      	bne.n	80034c2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80034aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	607b      	str	r3, [r7, #4]
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	e7fd      	b.n	80034be <vTaskSwitchContext+0x5a>
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4a11      	ldr	r2, [pc, #68]	@ (8003514 <vTaskSwitchContext+0xb0>)
 80034ce:	4413      	add	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	3308      	adds	r3, #8
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d104      	bne.n	80034f2 <vTaskSwitchContext+0x8e>
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4a07      	ldr	r2, [pc, #28]	@ (8003518 <vTaskSwitchContext+0xb4>)
 80034fa:	6013      	str	r3, [r2, #0]
}
 80034fc:	bf00      	nop
 80034fe:	371c      	adds	r7, #28
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	200004a0 	.word	0x200004a0
 800350c:	2000048c 	.word	0x2000048c
 8003510:	20000480 	.word	0x20000480
 8003514:	2000037c 	.word	0x2000037c
 8003518:	20000378 	.word	0x20000378

0800351c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	60fb      	str	r3, [r7, #12]
}
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003544:	4b07      	ldr	r3, [pc, #28]	@ (8003564 <vTaskPlaceOnEventList+0x48>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3318      	adds	r3, #24
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7fe fef5 	bl	800233c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003552:	2101      	movs	r1, #1
 8003554:	6838      	ldr	r0, [r7, #0]
 8003556:	f000 fa6d 	bl	8003a34 <prvAddCurrentTaskToDelayedList>
}
 800355a:	bf00      	nop
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000378 	.word	0x20000378

08003568 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	60fb      	str	r3, [r7, #12]
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	e7fd      	b.n	8003592 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	3318      	adds	r3, #24
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe ff06 	bl	80023ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003618 <xTaskRemoveFromEventList+0xb0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d11c      	bne.n	80035e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	3304      	adds	r3, #4
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fe fefd 	bl	80023ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b6:	2201      	movs	r2, #1
 80035b8:	409a      	lsls	r2, r3
 80035ba:	4b18      	ldr	r3, [pc, #96]	@ (800361c <xTaskRemoveFromEventList+0xb4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4313      	orrs	r3, r2
 80035c0:	4a16      	ldr	r2, [pc, #88]	@ (800361c <xTaskRemoveFromEventList+0xb4>)
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4a13      	ldr	r2, [pc, #76]	@ (8003620 <xTaskRemoveFromEventList+0xb8>)
 80035d2:	441a      	add	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	3304      	adds	r3, #4
 80035d8:	4619      	mov	r1, r3
 80035da:	4610      	mov	r0, r2
 80035dc:	f7fe fe8b 	bl	80022f6 <vListInsertEnd>
 80035e0:	e005      	b.n	80035ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	3318      	adds	r3, #24
 80035e6:	4619      	mov	r1, r3
 80035e8:	480e      	ldr	r0, [pc, #56]	@ (8003624 <xTaskRemoveFromEventList+0xbc>)
 80035ea:	f7fe fe84 	bl	80022f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003628 <xTaskRemoveFromEventList+0xc0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d905      	bls.n	8003608 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80035fc:	2301      	movs	r3, #1
 80035fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003600:	4b0a      	ldr	r3, [pc, #40]	@ (800362c <xTaskRemoveFromEventList+0xc4>)
 8003602:	2201      	movs	r2, #1
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e001      	b.n	800360c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800360c:	697b      	ldr	r3, [r7, #20]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200004a0 	.word	0x200004a0
 800361c:	20000480 	.word	0x20000480
 8003620:	2000037c 	.word	0x2000037c
 8003624:	20000438 	.word	0x20000438
 8003628:	20000378 	.word	0x20000378
 800362c:	2000048c 	.word	0x2000048c

08003630 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003638:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <vTaskInternalSetTimeOutState+0x24>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003640:	4b05      	ldr	r3, [pc, #20]	@ (8003658 <vTaskInternalSetTimeOutState+0x28>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	605a      	str	r2, [r3, #4]
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000490 	.word	0x20000490
 8003658:	2000047c 	.word	0x2000047c

0800365c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10b      	bne.n	8003684 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800366c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003670:	f383 8811 	msr	BASEPRI, r3
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	613b      	str	r3, [r7, #16]
}
 800367e:	bf00      	nop
 8003680:	bf00      	nop
 8003682:	e7fd      	b.n	8003680 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800368a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	60fb      	str	r3, [r7, #12]
}
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	e7fd      	b.n	800369e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80036a2:	f000 fb1b 	bl	8003cdc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80036a6:	4b1d      	ldr	r3, [pc, #116]	@ (800371c <xTaskCheckForTimeOut+0xc0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036be:	d102      	bne.n	80036c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61fb      	str	r3, [r7, #28]
 80036c4:	e023      	b.n	800370e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	4b15      	ldr	r3, [pc, #84]	@ (8003720 <xTaskCheckForTimeOut+0xc4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d007      	beq.n	80036e2 <xTaskCheckForTimeOut+0x86>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d302      	bcc.n	80036e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80036dc:	2301      	movs	r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	e015      	b.n	800370e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d20b      	bcs.n	8003704 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	1ad2      	subs	r2, r2, r3
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff ff99 	bl	8003630 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	e004      	b.n	800370e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800370a:	2301      	movs	r3, #1
 800370c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800370e:	f000 fb15 	bl	8003d3c <vPortExitCritical>

	return xReturn;
 8003712:	69fb      	ldr	r3, [r7, #28]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3720      	adds	r7, #32
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	2000047c 	.word	0x2000047c
 8003720:	20000490 	.word	0x20000490

08003724 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003728:	4b03      	ldr	r3, [pc, #12]	@ (8003738 <vTaskMissedYield+0x14>)
 800372a:	2201      	movs	r2, #1
 800372c:	601a      	str	r2, [r3, #0]
}
 800372e:	bf00      	nop
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	2000048c 	.word	0x2000048c

0800373c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003744:	f000 f852 	bl	80037ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003748:	4b06      	ldr	r3, [pc, #24]	@ (8003764 <prvIdleTask+0x28>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d9f9      	bls.n	8003744 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003750:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <prvIdleTask+0x2c>)
 8003752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003760:	e7f0      	b.n	8003744 <prvIdleTask+0x8>
 8003762:	bf00      	nop
 8003764:	2000037c 	.word	0x2000037c
 8003768:	e000ed04 	.word	0xe000ed04

0800376c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003772:	2300      	movs	r3, #0
 8003774:	607b      	str	r3, [r7, #4]
 8003776:	e00c      	b.n	8003792 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4a12      	ldr	r2, [pc, #72]	@ (80037cc <prvInitialiseTaskLists+0x60>)
 8003784:	4413      	add	r3, r2
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe fd8a 	bl	80022a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3301      	adds	r3, #1
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b06      	cmp	r3, #6
 8003796:	d9ef      	bls.n	8003778 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003798:	480d      	ldr	r0, [pc, #52]	@ (80037d0 <prvInitialiseTaskLists+0x64>)
 800379a:	f7fe fd81 	bl	80022a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800379e:	480d      	ldr	r0, [pc, #52]	@ (80037d4 <prvInitialiseTaskLists+0x68>)
 80037a0:	f7fe fd7e 	bl	80022a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037a4:	480c      	ldr	r0, [pc, #48]	@ (80037d8 <prvInitialiseTaskLists+0x6c>)
 80037a6:	f7fe fd7b 	bl	80022a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80037aa:	480c      	ldr	r0, [pc, #48]	@ (80037dc <prvInitialiseTaskLists+0x70>)
 80037ac:	f7fe fd78 	bl	80022a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037b0:	480b      	ldr	r0, [pc, #44]	@ (80037e0 <prvInitialiseTaskLists+0x74>)
 80037b2:	f7fe fd75 	bl	80022a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037b6:	4b0b      	ldr	r3, [pc, #44]	@ (80037e4 <prvInitialiseTaskLists+0x78>)
 80037b8:	4a05      	ldr	r2, [pc, #20]	@ (80037d0 <prvInitialiseTaskLists+0x64>)
 80037ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037bc:	4b0a      	ldr	r3, [pc, #40]	@ (80037e8 <prvInitialiseTaskLists+0x7c>)
 80037be:	4a05      	ldr	r2, [pc, #20]	@ (80037d4 <prvInitialiseTaskLists+0x68>)
 80037c0:	601a      	str	r2, [r3, #0]
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	2000037c 	.word	0x2000037c
 80037d0:	20000408 	.word	0x20000408
 80037d4:	2000041c 	.word	0x2000041c
 80037d8:	20000438 	.word	0x20000438
 80037dc:	2000044c 	.word	0x2000044c
 80037e0:	20000464 	.word	0x20000464
 80037e4:	20000430 	.word	0x20000430
 80037e8:	20000434 	.word	0x20000434

080037ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037f2:	e019      	b.n	8003828 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80037f4:	f000 fa72 	bl	8003cdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037f8:	4b10      	ldr	r3, [pc, #64]	@ (800383c <prvCheckTasksWaitingTermination+0x50>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe fdd1 	bl	80023ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800380a:	4b0d      	ldr	r3, [pc, #52]	@ (8003840 <prvCheckTasksWaitingTermination+0x54>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3b01      	subs	r3, #1
 8003810:	4a0b      	ldr	r2, [pc, #44]	@ (8003840 <prvCheckTasksWaitingTermination+0x54>)
 8003812:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003814:	4b0b      	ldr	r3, [pc, #44]	@ (8003844 <prvCheckTasksWaitingTermination+0x58>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3b01      	subs	r3, #1
 800381a:	4a0a      	ldr	r2, [pc, #40]	@ (8003844 <prvCheckTasksWaitingTermination+0x58>)
 800381c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800381e:	f000 fa8d 	bl	8003d3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f810 	bl	8003848 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003828:	4b06      	ldr	r3, [pc, #24]	@ (8003844 <prvCheckTasksWaitingTermination+0x58>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e1      	bne.n	80037f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	2000044c 	.word	0x2000044c
 8003840:	20000478 	.word	0x20000478
 8003844:	20000460 	.word	0x20000460

08003848 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003856:	2b00      	cmp	r3, #0
 8003858:	d108      	bne.n	800386c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fbcc 	bl	8003ffc <vPortFree>
				vPortFree( pxTCB );
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fbc9 	bl	8003ffc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800386a:	e019      	b.n	80038a0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003872:	2b01      	cmp	r3, #1
 8003874:	d103      	bne.n	800387e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fbc0 	bl	8003ffc <vPortFree>
	}
 800387c:	e010      	b.n	80038a0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003884:	2b02      	cmp	r3, #2
 8003886:	d00b      	beq.n	80038a0 <prvDeleteTCB+0x58>
	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	60fb      	str	r3, [r7, #12]
}
 800389a:	bf00      	nop
 800389c:	bf00      	nop
 800389e:	e7fd      	b.n	800389c <prvDeleteTCB+0x54>
	}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ae:	4b0c      	ldr	r3, [pc, #48]	@ (80038e0 <prvResetNextTaskUnblockTime+0x38>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d104      	bne.n	80038c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038b8:	4b0a      	ldr	r3, [pc, #40]	@ (80038e4 <prvResetNextTaskUnblockTime+0x3c>)
 80038ba:	f04f 32ff 	mov.w	r2, #4294967295
 80038be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038c0:	e008      	b.n	80038d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038c2:	4b07      	ldr	r3, [pc, #28]	@ (80038e0 <prvResetNextTaskUnblockTime+0x38>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4a04      	ldr	r2, [pc, #16]	@ (80038e4 <prvResetNextTaskUnblockTime+0x3c>)
 80038d2:	6013      	str	r3, [r2, #0]
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20000430 	.word	0x20000430
 80038e4:	20000498 	.word	0x20000498

080038e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038ee:	4b0b      	ldr	r3, [pc, #44]	@ (800391c <xTaskGetSchedulerState+0x34>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d102      	bne.n	80038fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038f6:	2301      	movs	r3, #1
 80038f8:	607b      	str	r3, [r7, #4]
 80038fa:	e008      	b.n	800390e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038fc:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <xTaskGetSchedulerState+0x38>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003904:	2302      	movs	r3, #2
 8003906:	607b      	str	r3, [r7, #4]
 8003908:	e001      	b.n	800390e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800390e:	687b      	ldr	r3, [r7, #4]
	}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20000484 	.word	0x20000484
 8003920:	200004a0 	.word	0x200004a0

08003924 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d070      	beq.n	8003a1c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800393a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a28 <xTaskPriorityDisinherit+0x104>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	429a      	cmp	r2, r3
 8003942:	d00b      	beq.n	800395c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	60fb      	str	r3, [r7, #12]
}
 8003956:	bf00      	nop
 8003958:	bf00      	nop
 800395a:	e7fd      	b.n	8003958 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10b      	bne.n	800397c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	60bb      	str	r3, [r7, #8]
}
 8003976:	bf00      	nop
 8003978:	bf00      	nop
 800397a:	e7fd      	b.n	8003978 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003980:	1e5a      	subs	r2, r3, #1
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	429a      	cmp	r2, r3
 8003990:	d044      	beq.n	8003a1c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003996:	2b00      	cmp	r3, #0
 8003998:	d140      	bne.n	8003a1c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	3304      	adds	r3, #4
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe fd04 	bl	80023ac <uxListRemove>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d115      	bne.n	80039d6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ae:	491f      	ldr	r1, [pc, #124]	@ (8003a2c <xTaskPriorityDisinherit+0x108>)
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10a      	bne.n	80039d6 <xTaskPriorityDisinherit+0xb2>
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c4:	2201      	movs	r2, #1
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43da      	mvns	r2, r3
 80039cc:	4b18      	ldr	r3, [pc, #96]	@ (8003a30 <xTaskPriorityDisinherit+0x10c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4013      	ands	r3, r2
 80039d2:	4a17      	ldr	r2, [pc, #92]	@ (8003a30 <xTaskPriorityDisinherit+0x10c>)
 80039d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e2:	f1c3 0207 	rsb	r2, r3, #7
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ee:	2201      	movs	r2, #1
 80039f0:	409a      	lsls	r2, r3
 80039f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003a30 <xTaskPriorityDisinherit+0x10c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003a30 <xTaskPriorityDisinherit+0x10c>)
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4a08      	ldr	r2, [pc, #32]	@ (8003a2c <xTaskPriorityDisinherit+0x108>)
 8003a0a:	441a      	add	r2, r3
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	4619      	mov	r1, r3
 8003a12:	4610      	mov	r0, r2
 8003a14:	f7fe fc6f 	bl	80022f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a1c:	697b      	ldr	r3, [r7, #20]
	}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000378 	.word	0x20000378
 8003a2c:	2000037c 	.word	0x2000037c
 8003a30:	20000480 	.word	0x20000480

08003a34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a3e:	4b29      	ldr	r3, [pc, #164]	@ (8003ae4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a44:	4b28      	ldr	r3, [pc, #160]	@ (8003ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe fcae 	bl	80023ac <uxListRemove>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10b      	bne.n	8003a6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a56:	4b24      	ldr	r3, [pc, #144]	@ (8003ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43da      	mvns	r2, r3
 8003a64:	4b21      	ldr	r3, [pc, #132]	@ (8003aec <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	4a20      	ldr	r2, [pc, #128]	@ (8003aec <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d10a      	bne.n	8003a8c <prvAddCurrentTaskToDelayedList+0x58>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d007      	beq.n	8003a8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3304      	adds	r3, #4
 8003a82:	4619      	mov	r1, r3
 8003a84:	481a      	ldr	r0, [pc, #104]	@ (8003af0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003a86:	f7fe fc36 	bl	80022f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a8a:	e026      	b.n	8003ada <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a94:	4b14      	ldr	r3, [pc, #80]	@ (8003ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d209      	bcs.n	8003ab8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aa4:	4b13      	ldr	r3, [pc, #76]	@ (8003af4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3304      	adds	r3, #4
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	f7fe fc43 	bl	800233c <vListInsert>
}
 8003ab6:	e010      	b.n	8003ada <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8003af8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	f7fe fc39 	bl	800233c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003aca:	4b0c      	ldr	r3, [pc, #48]	@ (8003afc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d202      	bcs.n	8003ada <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003ad4:	4a09      	ldr	r2, [pc, #36]	@ (8003afc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6013      	str	r3, [r2, #0]
}
 8003ada:	bf00      	nop
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	2000047c 	.word	0x2000047c
 8003ae8:	20000378 	.word	0x20000378
 8003aec:	20000480 	.word	0x20000480
 8003af0:	20000464 	.word	0x20000464
 8003af4:	20000434 	.word	0x20000434
 8003af8:	20000430 	.word	0x20000430
 8003afc:	20000498 	.word	0x20000498

08003b00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3b04      	subs	r3, #4
 8003b10:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	3b04      	subs	r3, #4
 8003b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f023 0201 	bic.w	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3b04      	subs	r3, #4
 8003b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003b30:	4a08      	ldr	r2, [pc, #32]	@ (8003b54 <pxPortInitialiseStack+0x54>)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3b14      	subs	r3, #20
 8003b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3b20      	subs	r3, #32
 8003b46:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003b48:	68fb      	ldr	r3, [r7, #12]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr
 8003b54:	08003b59 	.word	0x08003b59

08003b58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b62:	4b12      	ldr	r3, [pc, #72]	@ (8003bac <prvTaskExitError+0x54>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	d00b      	beq.n	8003b84 <prvTaskExitError+0x2c>
	__asm volatile
 8003b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	60fb      	str	r3, [r7, #12]
}
 8003b7e:	bf00      	nop
 8003b80:	bf00      	nop
 8003b82:	e7fd      	b.n	8003b80 <prvTaskExitError+0x28>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	60bb      	str	r3, [r7, #8]
}
 8003b96:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003b98:	bf00      	nop
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0fc      	beq.n	8003b9a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ba0:	bf00      	nop
 8003ba2:	bf00      	nop
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr
 8003bac:	2000000c 	.word	0x2000000c

08003bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003bb0:	4b07      	ldr	r3, [pc, #28]	@ (8003bd0 <pxCurrentTCBConst2>)
 8003bb2:	6819      	ldr	r1, [r3, #0]
 8003bb4:	6808      	ldr	r0, [r1, #0]
 8003bb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003bba:	f380 8809 	msr	PSP, r0
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f04f 0000 	mov.w	r0, #0
 8003bc6:	f380 8811 	msr	BASEPRI, r0
 8003bca:	f04e 0e0d 	orr.w	lr, lr, #13
 8003bce:	4770      	bx	lr

08003bd0 <pxCurrentTCBConst2>:
 8003bd0:	20000378 	.word	0x20000378
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop

08003bd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003bd8:	4806      	ldr	r0, [pc, #24]	@ (8003bf4 <prvPortStartFirstTask+0x1c>)
 8003bda:	6800      	ldr	r0, [r0, #0]
 8003bdc:	6800      	ldr	r0, [r0, #0]
 8003bde:	f380 8808 	msr	MSP, r0
 8003be2:	b662      	cpsie	i
 8003be4:	b661      	cpsie	f
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	df00      	svc	0
 8003bf0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003bf2:	bf00      	nop
 8003bf4:	e000ed08 	.word	0xe000ed08

08003bf8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bfe:	4b32      	ldr	r3, [pc, #200]	@ (8003cc8 <xPortStartScheduler+0xd0>)
 8003c00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	22ff      	movs	r2, #255	@ 0xff
 8003c0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	4b2a      	ldr	r3, [pc, #168]	@ (8003ccc <xPortStartScheduler+0xd4>)
 8003c24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c26:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd0 <xPortStartScheduler+0xd8>)
 8003c28:	2207      	movs	r2, #7
 8003c2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c2c:	e009      	b.n	8003c42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003c2e:	4b28      	ldr	r3, [pc, #160]	@ (8003cd0 <xPortStartScheduler+0xd8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	4a26      	ldr	r2, [pc, #152]	@ (8003cd0 <xPortStartScheduler+0xd8>)
 8003c36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4a:	2b80      	cmp	r3, #128	@ 0x80
 8003c4c:	d0ef      	beq.n	8003c2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c4e:	4b20      	ldr	r3, [pc, #128]	@ (8003cd0 <xPortStartScheduler+0xd8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f1c3 0307 	rsb	r3, r3, #7
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d00b      	beq.n	8003c72 <xPortStartScheduler+0x7a>
	__asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	60bb      	str	r3, [r7, #8]
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	e7fd      	b.n	8003c6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c72:	4b17      	ldr	r3, [pc, #92]	@ (8003cd0 <xPortStartScheduler+0xd8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	4a15      	ldr	r2, [pc, #84]	@ (8003cd0 <xPortStartScheduler+0xd8>)
 8003c7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c7c:	4b14      	ldr	r3, [pc, #80]	@ (8003cd0 <xPortStartScheduler+0xd8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c84:	4a12      	ldr	r2, [pc, #72]	@ (8003cd0 <xPortStartScheduler+0xd8>)
 8003c86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c90:	4b10      	ldr	r3, [pc, #64]	@ (8003cd4 <xPortStartScheduler+0xdc>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a0f      	ldr	r2, [pc, #60]	@ (8003cd4 <xPortStartScheduler+0xdc>)
 8003c96:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd4 <xPortStartScheduler+0xdc>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8003cd4 <xPortStartScheduler+0xdc>)
 8003ca2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003ca6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ca8:	f000 f8b8 	bl	8003e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003cac:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd8 <xPortStartScheduler+0xe0>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003cb2:	f7ff ff91 	bl	8003bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003cb6:	f7ff fbd5 	bl	8003464 <vTaskSwitchContext>
	prvTaskExitError();
 8003cba:	f7ff ff4d 	bl	8003b58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	e000e400 	.word	0xe000e400
 8003ccc:	200004a4 	.word	0x200004a4
 8003cd0:	200004a8 	.word	0x200004a8
 8003cd4:	e000ed20 	.word	0xe000ed20
 8003cd8:	2000000c 	.word	0x2000000c

08003cdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
	__asm volatile
 8003ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	607b      	str	r3, [r7, #4]
}
 8003cf4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8003d34 <vPortEnterCritical+0x58>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8003d34 <vPortEnterCritical+0x58>)
 8003cfe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d00:	4b0c      	ldr	r3, [pc, #48]	@ (8003d34 <vPortEnterCritical+0x58>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d110      	bne.n	8003d2a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d08:	4b0b      	ldr	r3, [pc, #44]	@ (8003d38 <vPortEnterCritical+0x5c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <vPortEnterCritical+0x4e>
	__asm volatile
 8003d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	603b      	str	r3, [r7, #0]
}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop
 8003d28:	e7fd      	b.n	8003d26 <vPortEnterCritical+0x4a>
	}
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	2000000c 	.word	0x2000000c
 8003d38:	e000ed04 	.word	0xe000ed04

08003d3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d42:	4b12      	ldr	r3, [pc, #72]	@ (8003d8c <vPortExitCritical+0x50>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10b      	bne.n	8003d62 <vPortExitCritical+0x26>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	607b      	str	r3, [r7, #4]
}
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
 8003d60:	e7fd      	b.n	8003d5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003d62:	4b0a      	ldr	r3, [pc, #40]	@ (8003d8c <vPortExitCritical+0x50>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	4a08      	ldr	r2, [pc, #32]	@ (8003d8c <vPortExitCritical+0x50>)
 8003d6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d6c:	4b07      	ldr	r3, [pc, #28]	@ (8003d8c <vPortExitCritical+0x50>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d105      	bne.n	8003d80 <vPortExitCritical+0x44>
 8003d74:	2300      	movs	r3, #0
 8003d76:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	2000000c 	.word	0x2000000c

08003d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d90:	f3ef 8009 	mrs	r0, PSP
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <pxCurrentTCBConst>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003da0:	6010      	str	r0, [r2, #0]
 8003da2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003da6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003daa:	f380 8811 	msr	BASEPRI, r0
 8003dae:	f7ff fb59 	bl	8003464 <vTaskSwitchContext>
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f380 8811 	msr	BASEPRI, r0
 8003dba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	6808      	ldr	r0, [r1, #0]
 8003dc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003dc6:	f380 8809 	msr	PSP, r0
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	4770      	bx	lr

08003dd0 <pxCurrentTCBConst>:
 8003dd0:	20000378 	.word	0x20000378
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop

08003dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	607b      	str	r3, [r7, #4]
}
 8003df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003df2:	f7ff fa7d 	bl	80032f0 <xTaskIncrementTick>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003dfc:	4b06      	ldr	r3, [pc, #24]	@ (8003e18 <SysTick_Handler+0x40>)
 8003dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	2300      	movs	r3, #0
 8003e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f383 8811 	msr	BASEPRI, r3
}
 8003e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e10:	bf00      	nop
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	e000ed04 	.word	0xe000ed04

08003e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e20:	4b0a      	ldr	r3, [pc, #40]	@ (8003e4c <vPortSetupTimerInterrupt+0x30>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e26:	4b0a      	ldr	r3, [pc, #40]	@ (8003e50 <vPortSetupTimerInterrupt+0x34>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e2c:	4b09      	ldr	r3, [pc, #36]	@ (8003e54 <vPortSetupTimerInterrupt+0x38>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a09      	ldr	r2, [pc, #36]	@ (8003e58 <vPortSetupTimerInterrupt+0x3c>)
 8003e32:	fba2 2303 	umull	r2, r3, r2, r3
 8003e36:	099b      	lsrs	r3, r3, #6
 8003e38:	4a08      	ldr	r2, [pc, #32]	@ (8003e5c <vPortSetupTimerInterrupt+0x40>)
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e3e:	4b03      	ldr	r3, [pc, #12]	@ (8003e4c <vPortSetupTimerInterrupt+0x30>)
 8003e40:	2207      	movs	r2, #7
 8003e42:	601a      	str	r2, [r3, #0]
}
 8003e44:	bf00      	nop
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	e000e010 	.word	0xe000e010
 8003e50:	e000e018 	.word	0xe000e018
 8003e54:	20000000 	.word	0x20000000
 8003e58:	10624dd3 	.word	0x10624dd3
 8003e5c:	e000e014 	.word	0xe000e014

08003e60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	@ 0x28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e6c:	f7ff f994 	bl	8003198 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e70:	4b5c      	ldr	r3, [pc, #368]	@ (8003fe4 <pvPortMalloc+0x184>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e78:	f000 f924 	bl	80040c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e7c:	4b5a      	ldr	r3, [pc, #360]	@ (8003fe8 <pvPortMalloc+0x188>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f040 8095 	bne.w	8003fb4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d01e      	beq.n	8003ece <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003e90:	2208      	movs	r2, #8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4413      	add	r3, r2
 8003e96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d015      	beq.n	8003ece <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f023 0307 	bic.w	r3, r3, #7
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <pvPortMalloc+0x6e>
	__asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	617b      	str	r3, [r7, #20]
}
 8003ec8:	bf00      	nop
 8003eca:	bf00      	nop
 8003ecc:	e7fd      	b.n	8003eca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d06f      	beq.n	8003fb4 <pvPortMalloc+0x154>
 8003ed4:	4b45      	ldr	r3, [pc, #276]	@ (8003fec <pvPortMalloc+0x18c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d86a      	bhi.n	8003fb4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003ede:	4b44      	ldr	r3, [pc, #272]	@ (8003ff0 <pvPortMalloc+0x190>)
 8003ee0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ee2:	4b43      	ldr	r3, [pc, #268]	@ (8003ff0 <pvPortMalloc+0x190>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ee8:	e004      	b.n	8003ef4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d903      	bls.n	8003f06 <pvPortMalloc+0xa6>
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f1      	bne.n	8003eea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f06:	4b37      	ldr	r3, [pc, #220]	@ (8003fe4 <pvPortMalloc+0x184>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d051      	beq.n	8003fb4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2208      	movs	r2, #8
 8003f16:	4413      	add	r3, r2
 8003f18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	1ad2      	subs	r2, r2, r3
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d920      	bls.n	8003f74 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4413      	add	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00b      	beq.n	8003f5c <pvPortMalloc+0xfc>
	__asm volatile
 8003f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	613b      	str	r3, [r7, #16]
}
 8003f56:	bf00      	nop
 8003f58:	bf00      	nop
 8003f5a:	e7fd      	b.n	8003f58 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	1ad2      	subs	r2, r2, r3
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f6e:	69b8      	ldr	r0, [r7, #24]
 8003f70:	f000 f90a 	bl	8004188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f74:	4b1d      	ldr	r3, [pc, #116]	@ (8003fec <pvPortMalloc+0x18c>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003fec <pvPortMalloc+0x18c>)
 8003f80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f82:	4b1a      	ldr	r3, [pc, #104]	@ (8003fec <pvPortMalloc+0x18c>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff4 <pvPortMalloc+0x194>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d203      	bcs.n	8003f96 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f8e:	4b17      	ldr	r3, [pc, #92]	@ (8003fec <pvPortMalloc+0x18c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a18      	ldr	r2, [pc, #96]	@ (8003ff4 <pvPortMalloc+0x194>)
 8003f94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	4b13      	ldr	r3, [pc, #76]	@ (8003fe8 <pvPortMalloc+0x188>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003faa:	4b13      	ldr	r3, [pc, #76]	@ (8003ff8 <pvPortMalloc+0x198>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	4a11      	ldr	r2, [pc, #68]	@ (8003ff8 <pvPortMalloc+0x198>)
 8003fb2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003fb4:	f7ff f8fe 	bl	80031b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <pvPortMalloc+0x17a>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	60fb      	str	r3, [r7, #12]
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	e7fd      	b.n	8003fd6 <pvPortMalloc+0x176>
	return pvReturn;
 8003fda:	69fb      	ldr	r3, [r7, #28]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3728      	adds	r7, #40	@ 0x28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	200010b4 	.word	0x200010b4
 8003fe8:	200010c8 	.word	0x200010c8
 8003fec:	200010b8 	.word	0x200010b8
 8003ff0:	200010ac 	.word	0x200010ac
 8003ff4:	200010bc 	.word	0x200010bc
 8003ff8:	200010c0 	.word	0x200010c0

08003ffc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d04f      	beq.n	80040ae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800400e:	2308      	movs	r3, #8
 8004010:	425b      	negs	r3, r3
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4413      	add	r3, r2
 8004016:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	4b25      	ldr	r3, [pc, #148]	@ (80040b8 <vPortFree+0xbc>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10b      	bne.n	8004042 <vPortFree+0x46>
	__asm volatile
 800402a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	60fb      	str	r3, [r7, #12]
}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	e7fd      	b.n	800403e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <vPortFree+0x66>
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	60bb      	str	r3, [r7, #8]
}
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	e7fd      	b.n	800405e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	4b14      	ldr	r3, [pc, #80]	@ (80040b8 <vPortFree+0xbc>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01e      	beq.n	80040ae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d11a      	bne.n	80040ae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	4b0e      	ldr	r3, [pc, #56]	@ (80040b8 <vPortFree+0xbc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	43db      	mvns	r3, r3
 8004082:	401a      	ands	r2, r3
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004088:	f7ff f886 	bl	8003198 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	4b0a      	ldr	r3, [pc, #40]	@ (80040bc <vPortFree+0xc0>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4413      	add	r3, r2
 8004096:	4a09      	ldr	r2, [pc, #36]	@ (80040bc <vPortFree+0xc0>)
 8004098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800409a:	6938      	ldr	r0, [r7, #16]
 800409c:	f000 f874 	bl	8004188 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80040a0:	4b07      	ldr	r3, [pc, #28]	@ (80040c0 <vPortFree+0xc4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3301      	adds	r3, #1
 80040a6:	4a06      	ldr	r2, [pc, #24]	@ (80040c0 <vPortFree+0xc4>)
 80040a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80040aa:	f7ff f883 	bl	80031b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040ae:	bf00      	nop
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	200010c8 	.word	0x200010c8
 80040bc:	200010b8 	.word	0x200010b8
 80040c0:	200010c4 	.word	0x200010c4

080040c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80040ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040d0:	4b27      	ldr	r3, [pc, #156]	@ (8004170 <prvHeapInit+0xac>)
 80040d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00c      	beq.n	80040f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3307      	adds	r3, #7
 80040e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0307 	bic.w	r3, r3, #7
 80040ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	4a1f      	ldr	r2, [pc, #124]	@ (8004170 <prvHeapInit+0xac>)
 80040f4:	4413      	add	r3, r2
 80040f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80040fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004174 <prvHeapInit+0xb0>)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004102:	4b1c      	ldr	r3, [pc, #112]	@ (8004174 <prvHeapInit+0xb0>)
 8004104:	2200      	movs	r2, #0
 8004106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	4413      	add	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004110:	2208      	movs	r2, #8
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0307 	bic.w	r3, r3, #7
 800411e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a15      	ldr	r2, [pc, #84]	@ (8004178 <prvHeapInit+0xb4>)
 8004124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004126:	4b14      	ldr	r3, [pc, #80]	@ (8004178 <prvHeapInit+0xb4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2200      	movs	r2, #0
 800412c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800412e:	4b12      	ldr	r3, [pc, #72]	@ (8004178 <prvHeapInit+0xb4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	1ad2      	subs	r2, r2, r3
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004144:	4b0c      	ldr	r3, [pc, #48]	@ (8004178 <prvHeapInit+0xb4>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4a0a      	ldr	r2, [pc, #40]	@ (800417c <prvHeapInit+0xb8>)
 8004152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4a09      	ldr	r2, [pc, #36]	@ (8004180 <prvHeapInit+0xbc>)
 800415a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800415c:	4b09      	ldr	r3, [pc, #36]	@ (8004184 <prvHeapInit+0xc0>)
 800415e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004162:	601a      	str	r2, [r3, #0]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	200004ac 	.word	0x200004ac
 8004174:	200010ac 	.word	0x200010ac
 8004178:	200010b4 	.word	0x200010b4
 800417c:	200010bc 	.word	0x200010bc
 8004180:	200010b8 	.word	0x200010b8
 8004184:	200010c8 	.word	0x200010c8

08004188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004190:	4b27      	ldr	r3, [pc, #156]	@ (8004230 <prvInsertBlockIntoFreeList+0xa8>)
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e002      	b.n	800419c <prvInsertBlockIntoFreeList+0x14>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d8f7      	bhi.n	8004196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	4413      	add	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d108      	bne.n	80041ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	441a      	add	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	441a      	add	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d118      	bne.n	8004210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b14      	ldr	r3, [pc, #80]	@ (8004234 <prvInsertBlockIntoFreeList+0xac>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d00d      	beq.n	8004206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	441a      	add	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	e008      	b.n	8004218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004206:	4b0b      	ldr	r3, [pc, #44]	@ (8004234 <prvInsertBlockIntoFreeList+0xac>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e003      	b.n	8004218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	429a      	cmp	r2, r3
 800421e:	d002      	beq.n	8004226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr
 8004230:	200010ac 	.word	0x200010ac
 8004234:	200010b4 	.word	0x200010b4

08004238 <atoi>:
 8004238:	220a      	movs	r2, #10
 800423a:	2100      	movs	r1, #0
 800423c:	f000 b87a 	b.w	8004334 <strtol>

08004240 <_strtol_l.constprop.0>:
 8004240:	2b24      	cmp	r3, #36	@ 0x24
 8004242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004246:	4686      	mov	lr, r0
 8004248:	4690      	mov	r8, r2
 800424a:	d801      	bhi.n	8004250 <_strtol_l.constprop.0+0x10>
 800424c:	2b01      	cmp	r3, #1
 800424e:	d106      	bne.n	800425e <_strtol_l.constprop.0+0x1e>
 8004250:	f000 f8b6 	bl	80043c0 <__errno>
 8004254:	2316      	movs	r3, #22
 8004256:	6003      	str	r3, [r0, #0]
 8004258:	2000      	movs	r0, #0
 800425a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800425e:	460d      	mov	r5, r1
 8004260:	4833      	ldr	r0, [pc, #204]	@ (8004330 <_strtol_l.constprop.0+0xf0>)
 8004262:	462a      	mov	r2, r5
 8004264:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004268:	5d06      	ldrb	r6, [r0, r4]
 800426a:	f016 0608 	ands.w	r6, r6, #8
 800426e:	d1f8      	bne.n	8004262 <_strtol_l.constprop.0+0x22>
 8004270:	2c2d      	cmp	r4, #45	@ 0x2d
 8004272:	d12d      	bne.n	80042d0 <_strtol_l.constprop.0+0x90>
 8004274:	2601      	movs	r6, #1
 8004276:	782c      	ldrb	r4, [r5, #0]
 8004278:	1c95      	adds	r5, r2, #2
 800427a:	f033 0210 	bics.w	r2, r3, #16
 800427e:	d109      	bne.n	8004294 <_strtol_l.constprop.0+0x54>
 8004280:	2c30      	cmp	r4, #48	@ 0x30
 8004282:	d12a      	bne.n	80042da <_strtol_l.constprop.0+0x9a>
 8004284:	782a      	ldrb	r2, [r5, #0]
 8004286:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800428a:	2a58      	cmp	r2, #88	@ 0x58
 800428c:	d125      	bne.n	80042da <_strtol_l.constprop.0+0x9a>
 800428e:	2310      	movs	r3, #16
 8004290:	786c      	ldrb	r4, [r5, #1]
 8004292:	3502      	adds	r5, #2
 8004294:	2200      	movs	r2, #0
 8004296:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800429a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800429e:	fbbc f9f3 	udiv	r9, ip, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	fb03 ca19 	mls	sl, r3, r9, ip
 80042a8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80042ac:	2f09      	cmp	r7, #9
 80042ae:	d81b      	bhi.n	80042e8 <_strtol_l.constprop.0+0xa8>
 80042b0:	463c      	mov	r4, r7
 80042b2:	42a3      	cmp	r3, r4
 80042b4:	dd27      	ble.n	8004306 <_strtol_l.constprop.0+0xc6>
 80042b6:	1c57      	adds	r7, r2, #1
 80042b8:	d007      	beq.n	80042ca <_strtol_l.constprop.0+0x8a>
 80042ba:	4581      	cmp	r9, r0
 80042bc:	d320      	bcc.n	8004300 <_strtol_l.constprop.0+0xc0>
 80042be:	d101      	bne.n	80042c4 <_strtol_l.constprop.0+0x84>
 80042c0:	45a2      	cmp	sl, r4
 80042c2:	db1d      	blt.n	8004300 <_strtol_l.constprop.0+0xc0>
 80042c4:	2201      	movs	r2, #1
 80042c6:	fb00 4003 	mla	r0, r0, r3, r4
 80042ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042ce:	e7eb      	b.n	80042a8 <_strtol_l.constprop.0+0x68>
 80042d0:	2c2b      	cmp	r4, #43	@ 0x2b
 80042d2:	bf04      	itt	eq
 80042d4:	782c      	ldrbeq	r4, [r5, #0]
 80042d6:	1c95      	addeq	r5, r2, #2
 80042d8:	e7cf      	b.n	800427a <_strtol_l.constprop.0+0x3a>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1da      	bne.n	8004294 <_strtol_l.constprop.0+0x54>
 80042de:	2c30      	cmp	r4, #48	@ 0x30
 80042e0:	bf0c      	ite	eq
 80042e2:	2308      	moveq	r3, #8
 80042e4:	230a      	movne	r3, #10
 80042e6:	e7d5      	b.n	8004294 <_strtol_l.constprop.0+0x54>
 80042e8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80042ec:	2f19      	cmp	r7, #25
 80042ee:	d801      	bhi.n	80042f4 <_strtol_l.constprop.0+0xb4>
 80042f0:	3c37      	subs	r4, #55	@ 0x37
 80042f2:	e7de      	b.n	80042b2 <_strtol_l.constprop.0+0x72>
 80042f4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80042f8:	2f19      	cmp	r7, #25
 80042fa:	d804      	bhi.n	8004306 <_strtol_l.constprop.0+0xc6>
 80042fc:	3c57      	subs	r4, #87	@ 0x57
 80042fe:	e7d8      	b.n	80042b2 <_strtol_l.constprop.0+0x72>
 8004300:	f04f 32ff 	mov.w	r2, #4294967295
 8004304:	e7e1      	b.n	80042ca <_strtol_l.constprop.0+0x8a>
 8004306:	1c53      	adds	r3, r2, #1
 8004308:	d108      	bne.n	800431c <_strtol_l.constprop.0+0xdc>
 800430a:	2322      	movs	r3, #34	@ 0x22
 800430c:	4660      	mov	r0, ip
 800430e:	f8ce 3000 	str.w	r3, [lr]
 8004312:	f1b8 0f00 	cmp.w	r8, #0
 8004316:	d0a0      	beq.n	800425a <_strtol_l.constprop.0+0x1a>
 8004318:	1e69      	subs	r1, r5, #1
 800431a:	e006      	b.n	800432a <_strtol_l.constprop.0+0xea>
 800431c:	b106      	cbz	r6, 8004320 <_strtol_l.constprop.0+0xe0>
 800431e:	4240      	negs	r0, r0
 8004320:	f1b8 0f00 	cmp.w	r8, #0
 8004324:	d099      	beq.n	800425a <_strtol_l.constprop.0+0x1a>
 8004326:	2a00      	cmp	r2, #0
 8004328:	d1f6      	bne.n	8004318 <_strtol_l.constprop.0+0xd8>
 800432a:	f8c8 1000 	str.w	r1, [r8]
 800432e:	e794      	b.n	800425a <_strtol_l.constprop.0+0x1a>
 8004330:	08004ebb 	.word	0x08004ebb

08004334 <strtol>:
 8004334:	4613      	mov	r3, r2
 8004336:	460a      	mov	r2, r1
 8004338:	4601      	mov	r1, r0
 800433a:	4802      	ldr	r0, [pc, #8]	@ (8004344 <strtol+0x10>)
 800433c:	6800      	ldr	r0, [r0, #0]
 800433e:	f7ff bf7f 	b.w	8004240 <_strtol_l.constprop.0>
 8004342:	bf00      	nop
 8004344:	20000010 	.word	0x20000010

08004348 <sniprintf>:
 8004348:	b40c      	push	{r2, r3}
 800434a:	b530      	push	{r4, r5, lr}
 800434c:	4b17      	ldr	r3, [pc, #92]	@ (80043ac <sniprintf+0x64>)
 800434e:	1e0c      	subs	r4, r1, #0
 8004350:	681d      	ldr	r5, [r3, #0]
 8004352:	b09d      	sub	sp, #116	@ 0x74
 8004354:	da08      	bge.n	8004368 <sniprintf+0x20>
 8004356:	238b      	movs	r3, #139	@ 0x8b
 8004358:	f04f 30ff 	mov.w	r0, #4294967295
 800435c:	602b      	str	r3, [r5, #0]
 800435e:	b01d      	add	sp, #116	@ 0x74
 8004360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004364:	b002      	add	sp, #8
 8004366:	4770      	bx	lr
 8004368:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800436c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004370:	bf0c      	ite	eq
 8004372:	4623      	moveq	r3, r4
 8004374:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004378:	9304      	str	r3, [sp, #16]
 800437a:	9307      	str	r3, [sp, #28]
 800437c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004380:	9002      	str	r0, [sp, #8]
 8004382:	9006      	str	r0, [sp, #24]
 8004384:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004388:	4628      	mov	r0, r5
 800438a:	ab21      	add	r3, sp, #132	@ 0x84
 800438c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800438e:	a902      	add	r1, sp, #8
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	f000 f9a1 	bl	80046d8 <_svfiprintf_r>
 8004396:	1c43      	adds	r3, r0, #1
 8004398:	bfbc      	itt	lt
 800439a:	238b      	movlt	r3, #139	@ 0x8b
 800439c:	602b      	strlt	r3, [r5, #0]
 800439e:	2c00      	cmp	r4, #0
 80043a0:	d0dd      	beq.n	800435e <sniprintf+0x16>
 80043a2:	2200      	movs	r2, #0
 80043a4:	9b02      	ldr	r3, [sp, #8]
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	e7d9      	b.n	800435e <sniprintf+0x16>
 80043aa:	bf00      	nop
 80043ac:	20000010 	.word	0x20000010

080043b0 <memset>:
 80043b0:	4603      	mov	r3, r0
 80043b2:	4402      	add	r2, r0
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d100      	bne.n	80043ba <memset+0xa>
 80043b8:	4770      	bx	lr
 80043ba:	f803 1b01 	strb.w	r1, [r3], #1
 80043be:	e7f9      	b.n	80043b4 <memset+0x4>

080043c0 <__errno>:
 80043c0:	4b01      	ldr	r3, [pc, #4]	@ (80043c8 <__errno+0x8>)
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000010 	.word	0x20000010

080043cc <__libc_init_array>:
 80043cc:	b570      	push	{r4, r5, r6, lr}
 80043ce:	2600      	movs	r6, #0
 80043d0:	4d0c      	ldr	r5, [pc, #48]	@ (8004404 <__libc_init_array+0x38>)
 80043d2:	4c0d      	ldr	r4, [pc, #52]	@ (8004408 <__libc_init_array+0x3c>)
 80043d4:	1b64      	subs	r4, r4, r5
 80043d6:	10a4      	asrs	r4, r4, #2
 80043d8:	42a6      	cmp	r6, r4
 80043da:	d109      	bne.n	80043f0 <__libc_init_array+0x24>
 80043dc:	f000 fc78 	bl	8004cd0 <_init>
 80043e0:	2600      	movs	r6, #0
 80043e2:	4d0a      	ldr	r5, [pc, #40]	@ (800440c <__libc_init_array+0x40>)
 80043e4:	4c0a      	ldr	r4, [pc, #40]	@ (8004410 <__libc_init_array+0x44>)
 80043e6:	1b64      	subs	r4, r4, r5
 80043e8:	10a4      	asrs	r4, r4, #2
 80043ea:	42a6      	cmp	r6, r4
 80043ec:	d105      	bne.n	80043fa <__libc_init_array+0x2e>
 80043ee:	bd70      	pop	{r4, r5, r6, pc}
 80043f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f4:	4798      	blx	r3
 80043f6:	3601      	adds	r6, #1
 80043f8:	e7ee      	b.n	80043d8 <__libc_init_array+0xc>
 80043fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80043fe:	4798      	blx	r3
 8004400:	3601      	adds	r6, #1
 8004402:	e7f2      	b.n	80043ea <__libc_init_array+0x1e>
 8004404:	08004ff8 	.word	0x08004ff8
 8004408:	08004ff8 	.word	0x08004ff8
 800440c:	08004ff8 	.word	0x08004ff8
 8004410:	08004ffc 	.word	0x08004ffc

08004414 <__retarget_lock_acquire_recursive>:
 8004414:	4770      	bx	lr

08004416 <__retarget_lock_release_recursive>:
 8004416:	4770      	bx	lr

08004418 <memcpy>:
 8004418:	440a      	add	r2, r1
 800441a:	4291      	cmp	r1, r2
 800441c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004420:	d100      	bne.n	8004424 <memcpy+0xc>
 8004422:	4770      	bx	lr
 8004424:	b510      	push	{r4, lr}
 8004426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800442a:	4291      	cmp	r1, r2
 800442c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004430:	d1f9      	bne.n	8004426 <memcpy+0xe>
 8004432:	bd10      	pop	{r4, pc}

08004434 <_free_r>:
 8004434:	b538      	push	{r3, r4, r5, lr}
 8004436:	4605      	mov	r5, r0
 8004438:	2900      	cmp	r1, #0
 800443a:	d040      	beq.n	80044be <_free_r+0x8a>
 800443c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004440:	1f0c      	subs	r4, r1, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	bfb8      	it	lt
 8004446:	18e4      	addlt	r4, r4, r3
 8004448:	f000 f8de 	bl	8004608 <__malloc_lock>
 800444c:	4a1c      	ldr	r2, [pc, #112]	@ (80044c0 <_free_r+0x8c>)
 800444e:	6813      	ldr	r3, [r2, #0]
 8004450:	b933      	cbnz	r3, 8004460 <_free_r+0x2c>
 8004452:	6063      	str	r3, [r4, #4]
 8004454:	6014      	str	r4, [r2, #0]
 8004456:	4628      	mov	r0, r5
 8004458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800445c:	f000 b8da 	b.w	8004614 <__malloc_unlock>
 8004460:	42a3      	cmp	r3, r4
 8004462:	d908      	bls.n	8004476 <_free_r+0x42>
 8004464:	6820      	ldr	r0, [r4, #0]
 8004466:	1821      	adds	r1, r4, r0
 8004468:	428b      	cmp	r3, r1
 800446a:	bf01      	itttt	eq
 800446c:	6819      	ldreq	r1, [r3, #0]
 800446e:	685b      	ldreq	r3, [r3, #4]
 8004470:	1809      	addeq	r1, r1, r0
 8004472:	6021      	streq	r1, [r4, #0]
 8004474:	e7ed      	b.n	8004452 <_free_r+0x1e>
 8004476:	461a      	mov	r2, r3
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	b10b      	cbz	r3, 8004480 <_free_r+0x4c>
 800447c:	42a3      	cmp	r3, r4
 800447e:	d9fa      	bls.n	8004476 <_free_r+0x42>
 8004480:	6811      	ldr	r1, [r2, #0]
 8004482:	1850      	adds	r0, r2, r1
 8004484:	42a0      	cmp	r0, r4
 8004486:	d10b      	bne.n	80044a0 <_free_r+0x6c>
 8004488:	6820      	ldr	r0, [r4, #0]
 800448a:	4401      	add	r1, r0
 800448c:	1850      	adds	r0, r2, r1
 800448e:	4283      	cmp	r3, r0
 8004490:	6011      	str	r1, [r2, #0]
 8004492:	d1e0      	bne.n	8004456 <_free_r+0x22>
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4408      	add	r0, r1
 800449a:	6010      	str	r0, [r2, #0]
 800449c:	6053      	str	r3, [r2, #4]
 800449e:	e7da      	b.n	8004456 <_free_r+0x22>
 80044a0:	d902      	bls.n	80044a8 <_free_r+0x74>
 80044a2:	230c      	movs	r3, #12
 80044a4:	602b      	str	r3, [r5, #0]
 80044a6:	e7d6      	b.n	8004456 <_free_r+0x22>
 80044a8:	6820      	ldr	r0, [r4, #0]
 80044aa:	1821      	adds	r1, r4, r0
 80044ac:	428b      	cmp	r3, r1
 80044ae:	bf01      	itttt	eq
 80044b0:	6819      	ldreq	r1, [r3, #0]
 80044b2:	685b      	ldreq	r3, [r3, #4]
 80044b4:	1809      	addeq	r1, r1, r0
 80044b6:	6021      	streq	r1, [r4, #0]
 80044b8:	6063      	str	r3, [r4, #4]
 80044ba:	6054      	str	r4, [r2, #4]
 80044bc:	e7cb      	b.n	8004456 <_free_r+0x22>
 80044be:	bd38      	pop	{r3, r4, r5, pc}
 80044c0:	20001210 	.word	0x20001210

080044c4 <sbrk_aligned>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	4e0f      	ldr	r6, [pc, #60]	@ (8004504 <sbrk_aligned+0x40>)
 80044c8:	460c      	mov	r4, r1
 80044ca:	6831      	ldr	r1, [r6, #0]
 80044cc:	4605      	mov	r5, r0
 80044ce:	b911      	cbnz	r1, 80044d6 <sbrk_aligned+0x12>
 80044d0:	f000 fbaa 	bl	8004c28 <_sbrk_r>
 80044d4:	6030      	str	r0, [r6, #0]
 80044d6:	4621      	mov	r1, r4
 80044d8:	4628      	mov	r0, r5
 80044da:	f000 fba5 	bl	8004c28 <_sbrk_r>
 80044de:	1c43      	adds	r3, r0, #1
 80044e0:	d103      	bne.n	80044ea <sbrk_aligned+0x26>
 80044e2:	f04f 34ff 	mov.w	r4, #4294967295
 80044e6:	4620      	mov	r0, r4
 80044e8:	bd70      	pop	{r4, r5, r6, pc}
 80044ea:	1cc4      	adds	r4, r0, #3
 80044ec:	f024 0403 	bic.w	r4, r4, #3
 80044f0:	42a0      	cmp	r0, r4
 80044f2:	d0f8      	beq.n	80044e6 <sbrk_aligned+0x22>
 80044f4:	1a21      	subs	r1, r4, r0
 80044f6:	4628      	mov	r0, r5
 80044f8:	f000 fb96 	bl	8004c28 <_sbrk_r>
 80044fc:	3001      	adds	r0, #1
 80044fe:	d1f2      	bne.n	80044e6 <sbrk_aligned+0x22>
 8004500:	e7ef      	b.n	80044e2 <sbrk_aligned+0x1e>
 8004502:	bf00      	nop
 8004504:	2000120c 	.word	0x2000120c

08004508 <_malloc_r>:
 8004508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800450c:	1ccd      	adds	r5, r1, #3
 800450e:	f025 0503 	bic.w	r5, r5, #3
 8004512:	3508      	adds	r5, #8
 8004514:	2d0c      	cmp	r5, #12
 8004516:	bf38      	it	cc
 8004518:	250c      	movcc	r5, #12
 800451a:	2d00      	cmp	r5, #0
 800451c:	4606      	mov	r6, r0
 800451e:	db01      	blt.n	8004524 <_malloc_r+0x1c>
 8004520:	42a9      	cmp	r1, r5
 8004522:	d904      	bls.n	800452e <_malloc_r+0x26>
 8004524:	230c      	movs	r3, #12
 8004526:	6033      	str	r3, [r6, #0]
 8004528:	2000      	movs	r0, #0
 800452a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800452e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004604 <_malloc_r+0xfc>
 8004532:	f000 f869 	bl	8004608 <__malloc_lock>
 8004536:	f8d8 3000 	ldr.w	r3, [r8]
 800453a:	461c      	mov	r4, r3
 800453c:	bb44      	cbnz	r4, 8004590 <_malloc_r+0x88>
 800453e:	4629      	mov	r1, r5
 8004540:	4630      	mov	r0, r6
 8004542:	f7ff ffbf 	bl	80044c4 <sbrk_aligned>
 8004546:	1c43      	adds	r3, r0, #1
 8004548:	4604      	mov	r4, r0
 800454a:	d158      	bne.n	80045fe <_malloc_r+0xf6>
 800454c:	f8d8 4000 	ldr.w	r4, [r8]
 8004550:	4627      	mov	r7, r4
 8004552:	2f00      	cmp	r7, #0
 8004554:	d143      	bne.n	80045de <_malloc_r+0xd6>
 8004556:	2c00      	cmp	r4, #0
 8004558:	d04b      	beq.n	80045f2 <_malloc_r+0xea>
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	4639      	mov	r1, r7
 800455e:	4630      	mov	r0, r6
 8004560:	eb04 0903 	add.w	r9, r4, r3
 8004564:	f000 fb60 	bl	8004c28 <_sbrk_r>
 8004568:	4581      	cmp	r9, r0
 800456a:	d142      	bne.n	80045f2 <_malloc_r+0xea>
 800456c:	6821      	ldr	r1, [r4, #0]
 800456e:	4630      	mov	r0, r6
 8004570:	1a6d      	subs	r5, r5, r1
 8004572:	4629      	mov	r1, r5
 8004574:	f7ff ffa6 	bl	80044c4 <sbrk_aligned>
 8004578:	3001      	adds	r0, #1
 800457a:	d03a      	beq.n	80045f2 <_malloc_r+0xea>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	442b      	add	r3, r5
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	f8d8 3000 	ldr.w	r3, [r8]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	bb62      	cbnz	r2, 80045e4 <_malloc_r+0xdc>
 800458a:	f8c8 7000 	str.w	r7, [r8]
 800458e:	e00f      	b.n	80045b0 <_malloc_r+0xa8>
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	1b52      	subs	r2, r2, r5
 8004594:	d420      	bmi.n	80045d8 <_malloc_r+0xd0>
 8004596:	2a0b      	cmp	r2, #11
 8004598:	d917      	bls.n	80045ca <_malloc_r+0xc2>
 800459a:	1961      	adds	r1, r4, r5
 800459c:	42a3      	cmp	r3, r4
 800459e:	6025      	str	r5, [r4, #0]
 80045a0:	bf18      	it	ne
 80045a2:	6059      	strne	r1, [r3, #4]
 80045a4:	6863      	ldr	r3, [r4, #4]
 80045a6:	bf08      	it	eq
 80045a8:	f8c8 1000 	streq.w	r1, [r8]
 80045ac:	5162      	str	r2, [r4, r5]
 80045ae:	604b      	str	r3, [r1, #4]
 80045b0:	4630      	mov	r0, r6
 80045b2:	f000 f82f 	bl	8004614 <__malloc_unlock>
 80045b6:	f104 000b 	add.w	r0, r4, #11
 80045ba:	1d23      	adds	r3, r4, #4
 80045bc:	f020 0007 	bic.w	r0, r0, #7
 80045c0:	1ac2      	subs	r2, r0, r3
 80045c2:	bf1c      	itt	ne
 80045c4:	1a1b      	subne	r3, r3, r0
 80045c6:	50a3      	strne	r3, [r4, r2]
 80045c8:	e7af      	b.n	800452a <_malloc_r+0x22>
 80045ca:	6862      	ldr	r2, [r4, #4]
 80045cc:	42a3      	cmp	r3, r4
 80045ce:	bf0c      	ite	eq
 80045d0:	f8c8 2000 	streq.w	r2, [r8]
 80045d4:	605a      	strne	r2, [r3, #4]
 80045d6:	e7eb      	b.n	80045b0 <_malloc_r+0xa8>
 80045d8:	4623      	mov	r3, r4
 80045da:	6864      	ldr	r4, [r4, #4]
 80045dc:	e7ae      	b.n	800453c <_malloc_r+0x34>
 80045de:	463c      	mov	r4, r7
 80045e0:	687f      	ldr	r7, [r7, #4]
 80045e2:	e7b6      	b.n	8004552 <_malloc_r+0x4a>
 80045e4:	461a      	mov	r2, r3
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	42a3      	cmp	r3, r4
 80045ea:	d1fb      	bne.n	80045e4 <_malloc_r+0xdc>
 80045ec:	2300      	movs	r3, #0
 80045ee:	6053      	str	r3, [r2, #4]
 80045f0:	e7de      	b.n	80045b0 <_malloc_r+0xa8>
 80045f2:	230c      	movs	r3, #12
 80045f4:	4630      	mov	r0, r6
 80045f6:	6033      	str	r3, [r6, #0]
 80045f8:	f000 f80c 	bl	8004614 <__malloc_unlock>
 80045fc:	e794      	b.n	8004528 <_malloc_r+0x20>
 80045fe:	6005      	str	r5, [r0, #0]
 8004600:	e7d6      	b.n	80045b0 <_malloc_r+0xa8>
 8004602:	bf00      	nop
 8004604:	20001210 	.word	0x20001210

08004608 <__malloc_lock>:
 8004608:	4801      	ldr	r0, [pc, #4]	@ (8004610 <__malloc_lock+0x8>)
 800460a:	f7ff bf03 	b.w	8004414 <__retarget_lock_acquire_recursive>
 800460e:	bf00      	nop
 8004610:	20001208 	.word	0x20001208

08004614 <__malloc_unlock>:
 8004614:	4801      	ldr	r0, [pc, #4]	@ (800461c <__malloc_unlock+0x8>)
 8004616:	f7ff befe 	b.w	8004416 <__retarget_lock_release_recursive>
 800461a:	bf00      	nop
 800461c:	20001208 	.word	0x20001208

08004620 <__ssputs_r>:
 8004620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	461f      	mov	r7, r3
 8004626:	688e      	ldr	r6, [r1, #8]
 8004628:	4682      	mov	sl, r0
 800462a:	42be      	cmp	r6, r7
 800462c:	460c      	mov	r4, r1
 800462e:	4690      	mov	r8, r2
 8004630:	680b      	ldr	r3, [r1, #0]
 8004632:	d82d      	bhi.n	8004690 <__ssputs_r+0x70>
 8004634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004638:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800463c:	d026      	beq.n	800468c <__ssputs_r+0x6c>
 800463e:	6965      	ldr	r5, [r4, #20]
 8004640:	6909      	ldr	r1, [r1, #16]
 8004642:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004646:	eba3 0901 	sub.w	r9, r3, r1
 800464a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800464e:	1c7b      	adds	r3, r7, #1
 8004650:	444b      	add	r3, r9
 8004652:	106d      	asrs	r5, r5, #1
 8004654:	429d      	cmp	r5, r3
 8004656:	bf38      	it	cc
 8004658:	461d      	movcc	r5, r3
 800465a:	0553      	lsls	r3, r2, #21
 800465c:	d527      	bpl.n	80046ae <__ssputs_r+0x8e>
 800465e:	4629      	mov	r1, r5
 8004660:	f7ff ff52 	bl	8004508 <_malloc_r>
 8004664:	4606      	mov	r6, r0
 8004666:	b360      	cbz	r0, 80046c2 <__ssputs_r+0xa2>
 8004668:	464a      	mov	r2, r9
 800466a:	6921      	ldr	r1, [r4, #16]
 800466c:	f7ff fed4 	bl	8004418 <memcpy>
 8004670:	89a3      	ldrh	r3, [r4, #12]
 8004672:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800467a:	81a3      	strh	r3, [r4, #12]
 800467c:	6126      	str	r6, [r4, #16]
 800467e:	444e      	add	r6, r9
 8004680:	6026      	str	r6, [r4, #0]
 8004682:	463e      	mov	r6, r7
 8004684:	6165      	str	r5, [r4, #20]
 8004686:	eba5 0509 	sub.w	r5, r5, r9
 800468a:	60a5      	str	r5, [r4, #8]
 800468c:	42be      	cmp	r6, r7
 800468e:	d900      	bls.n	8004692 <__ssputs_r+0x72>
 8004690:	463e      	mov	r6, r7
 8004692:	4632      	mov	r2, r6
 8004694:	4641      	mov	r1, r8
 8004696:	6820      	ldr	r0, [r4, #0]
 8004698:	f000 faac 	bl	8004bf4 <memmove>
 800469c:	2000      	movs	r0, #0
 800469e:	68a3      	ldr	r3, [r4, #8]
 80046a0:	1b9b      	subs	r3, r3, r6
 80046a2:	60a3      	str	r3, [r4, #8]
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	4433      	add	r3, r6
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ae:	462a      	mov	r2, r5
 80046b0:	f000 fad8 	bl	8004c64 <_realloc_r>
 80046b4:	4606      	mov	r6, r0
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d1e0      	bne.n	800467c <__ssputs_r+0x5c>
 80046ba:	4650      	mov	r0, sl
 80046bc:	6921      	ldr	r1, [r4, #16]
 80046be:	f7ff feb9 	bl	8004434 <_free_r>
 80046c2:	230c      	movs	r3, #12
 80046c4:	f8ca 3000 	str.w	r3, [sl]
 80046c8:	89a3      	ldrh	r3, [r4, #12]
 80046ca:	f04f 30ff 	mov.w	r0, #4294967295
 80046ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046d2:	81a3      	strh	r3, [r4, #12]
 80046d4:	e7e9      	b.n	80046aa <__ssputs_r+0x8a>
	...

080046d8 <_svfiprintf_r>:
 80046d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046dc:	4698      	mov	r8, r3
 80046de:	898b      	ldrh	r3, [r1, #12]
 80046e0:	4607      	mov	r7, r0
 80046e2:	061b      	lsls	r3, r3, #24
 80046e4:	460d      	mov	r5, r1
 80046e6:	4614      	mov	r4, r2
 80046e8:	b09d      	sub	sp, #116	@ 0x74
 80046ea:	d510      	bpl.n	800470e <_svfiprintf_r+0x36>
 80046ec:	690b      	ldr	r3, [r1, #16]
 80046ee:	b973      	cbnz	r3, 800470e <_svfiprintf_r+0x36>
 80046f0:	2140      	movs	r1, #64	@ 0x40
 80046f2:	f7ff ff09 	bl	8004508 <_malloc_r>
 80046f6:	6028      	str	r0, [r5, #0]
 80046f8:	6128      	str	r0, [r5, #16]
 80046fa:	b930      	cbnz	r0, 800470a <_svfiprintf_r+0x32>
 80046fc:	230c      	movs	r3, #12
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	b01d      	add	sp, #116	@ 0x74
 8004706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800470a:	2340      	movs	r3, #64	@ 0x40
 800470c:	616b      	str	r3, [r5, #20]
 800470e:	2300      	movs	r3, #0
 8004710:	9309      	str	r3, [sp, #36]	@ 0x24
 8004712:	2320      	movs	r3, #32
 8004714:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004718:	2330      	movs	r3, #48	@ 0x30
 800471a:	f04f 0901 	mov.w	r9, #1
 800471e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004722:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80048bc <_svfiprintf_r+0x1e4>
 8004726:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800472a:	4623      	mov	r3, r4
 800472c:	469a      	mov	sl, r3
 800472e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004732:	b10a      	cbz	r2, 8004738 <_svfiprintf_r+0x60>
 8004734:	2a25      	cmp	r2, #37	@ 0x25
 8004736:	d1f9      	bne.n	800472c <_svfiprintf_r+0x54>
 8004738:	ebba 0b04 	subs.w	fp, sl, r4
 800473c:	d00b      	beq.n	8004756 <_svfiprintf_r+0x7e>
 800473e:	465b      	mov	r3, fp
 8004740:	4622      	mov	r2, r4
 8004742:	4629      	mov	r1, r5
 8004744:	4638      	mov	r0, r7
 8004746:	f7ff ff6b 	bl	8004620 <__ssputs_r>
 800474a:	3001      	adds	r0, #1
 800474c:	f000 80a7 	beq.w	800489e <_svfiprintf_r+0x1c6>
 8004750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004752:	445a      	add	r2, fp
 8004754:	9209      	str	r2, [sp, #36]	@ 0x24
 8004756:	f89a 3000 	ldrb.w	r3, [sl]
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 809f 	beq.w	800489e <_svfiprintf_r+0x1c6>
 8004760:	2300      	movs	r3, #0
 8004762:	f04f 32ff 	mov.w	r2, #4294967295
 8004766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800476a:	f10a 0a01 	add.w	sl, sl, #1
 800476e:	9304      	str	r3, [sp, #16]
 8004770:	9307      	str	r3, [sp, #28]
 8004772:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004776:	931a      	str	r3, [sp, #104]	@ 0x68
 8004778:	4654      	mov	r4, sl
 800477a:	2205      	movs	r2, #5
 800477c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004780:	484e      	ldr	r0, [pc, #312]	@ (80048bc <_svfiprintf_r+0x1e4>)
 8004782:	f000 fa61 	bl	8004c48 <memchr>
 8004786:	9a04      	ldr	r2, [sp, #16]
 8004788:	b9d8      	cbnz	r0, 80047c2 <_svfiprintf_r+0xea>
 800478a:	06d0      	lsls	r0, r2, #27
 800478c:	bf44      	itt	mi
 800478e:	2320      	movmi	r3, #32
 8004790:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004794:	0711      	lsls	r1, r2, #28
 8004796:	bf44      	itt	mi
 8004798:	232b      	movmi	r3, #43	@ 0x2b
 800479a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800479e:	f89a 3000 	ldrb.w	r3, [sl]
 80047a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80047a4:	d015      	beq.n	80047d2 <_svfiprintf_r+0xfa>
 80047a6:	4654      	mov	r4, sl
 80047a8:	2000      	movs	r0, #0
 80047aa:	f04f 0c0a 	mov.w	ip, #10
 80047ae:	9a07      	ldr	r2, [sp, #28]
 80047b0:	4621      	mov	r1, r4
 80047b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047b6:	3b30      	subs	r3, #48	@ 0x30
 80047b8:	2b09      	cmp	r3, #9
 80047ba:	d94b      	bls.n	8004854 <_svfiprintf_r+0x17c>
 80047bc:	b1b0      	cbz	r0, 80047ec <_svfiprintf_r+0x114>
 80047be:	9207      	str	r2, [sp, #28]
 80047c0:	e014      	b.n	80047ec <_svfiprintf_r+0x114>
 80047c2:	eba0 0308 	sub.w	r3, r0, r8
 80047c6:	fa09 f303 	lsl.w	r3, r9, r3
 80047ca:	4313      	orrs	r3, r2
 80047cc:	46a2      	mov	sl, r4
 80047ce:	9304      	str	r3, [sp, #16]
 80047d0:	e7d2      	b.n	8004778 <_svfiprintf_r+0xa0>
 80047d2:	9b03      	ldr	r3, [sp, #12]
 80047d4:	1d19      	adds	r1, r3, #4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	9103      	str	r1, [sp, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bfbb      	ittet	lt
 80047de:	425b      	neglt	r3, r3
 80047e0:	f042 0202 	orrlt.w	r2, r2, #2
 80047e4:	9307      	strge	r3, [sp, #28]
 80047e6:	9307      	strlt	r3, [sp, #28]
 80047e8:	bfb8      	it	lt
 80047ea:	9204      	strlt	r2, [sp, #16]
 80047ec:	7823      	ldrb	r3, [r4, #0]
 80047ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80047f0:	d10a      	bne.n	8004808 <_svfiprintf_r+0x130>
 80047f2:	7863      	ldrb	r3, [r4, #1]
 80047f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80047f6:	d132      	bne.n	800485e <_svfiprintf_r+0x186>
 80047f8:	9b03      	ldr	r3, [sp, #12]
 80047fa:	3402      	adds	r4, #2
 80047fc:	1d1a      	adds	r2, r3, #4
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	9203      	str	r2, [sp, #12]
 8004802:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004806:	9305      	str	r3, [sp, #20]
 8004808:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80048c0 <_svfiprintf_r+0x1e8>
 800480c:	2203      	movs	r2, #3
 800480e:	4650      	mov	r0, sl
 8004810:	7821      	ldrb	r1, [r4, #0]
 8004812:	f000 fa19 	bl	8004c48 <memchr>
 8004816:	b138      	cbz	r0, 8004828 <_svfiprintf_r+0x150>
 8004818:	2240      	movs	r2, #64	@ 0x40
 800481a:	9b04      	ldr	r3, [sp, #16]
 800481c:	eba0 000a 	sub.w	r0, r0, sl
 8004820:	4082      	lsls	r2, r0
 8004822:	4313      	orrs	r3, r2
 8004824:	3401      	adds	r4, #1
 8004826:	9304      	str	r3, [sp, #16]
 8004828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800482c:	2206      	movs	r2, #6
 800482e:	4825      	ldr	r0, [pc, #148]	@ (80048c4 <_svfiprintf_r+0x1ec>)
 8004830:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004834:	f000 fa08 	bl	8004c48 <memchr>
 8004838:	2800      	cmp	r0, #0
 800483a:	d036      	beq.n	80048aa <_svfiprintf_r+0x1d2>
 800483c:	4b22      	ldr	r3, [pc, #136]	@ (80048c8 <_svfiprintf_r+0x1f0>)
 800483e:	bb1b      	cbnz	r3, 8004888 <_svfiprintf_r+0x1b0>
 8004840:	9b03      	ldr	r3, [sp, #12]
 8004842:	3307      	adds	r3, #7
 8004844:	f023 0307 	bic.w	r3, r3, #7
 8004848:	3308      	adds	r3, #8
 800484a:	9303      	str	r3, [sp, #12]
 800484c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800484e:	4433      	add	r3, r6
 8004850:	9309      	str	r3, [sp, #36]	@ 0x24
 8004852:	e76a      	b.n	800472a <_svfiprintf_r+0x52>
 8004854:	460c      	mov	r4, r1
 8004856:	2001      	movs	r0, #1
 8004858:	fb0c 3202 	mla	r2, ip, r2, r3
 800485c:	e7a8      	b.n	80047b0 <_svfiprintf_r+0xd8>
 800485e:	2300      	movs	r3, #0
 8004860:	f04f 0c0a 	mov.w	ip, #10
 8004864:	4619      	mov	r1, r3
 8004866:	3401      	adds	r4, #1
 8004868:	9305      	str	r3, [sp, #20]
 800486a:	4620      	mov	r0, r4
 800486c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004870:	3a30      	subs	r2, #48	@ 0x30
 8004872:	2a09      	cmp	r2, #9
 8004874:	d903      	bls.n	800487e <_svfiprintf_r+0x1a6>
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0c6      	beq.n	8004808 <_svfiprintf_r+0x130>
 800487a:	9105      	str	r1, [sp, #20]
 800487c:	e7c4      	b.n	8004808 <_svfiprintf_r+0x130>
 800487e:	4604      	mov	r4, r0
 8004880:	2301      	movs	r3, #1
 8004882:	fb0c 2101 	mla	r1, ip, r1, r2
 8004886:	e7f0      	b.n	800486a <_svfiprintf_r+0x192>
 8004888:	ab03      	add	r3, sp, #12
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	462a      	mov	r2, r5
 800488e:	4638      	mov	r0, r7
 8004890:	4b0e      	ldr	r3, [pc, #56]	@ (80048cc <_svfiprintf_r+0x1f4>)
 8004892:	a904      	add	r1, sp, #16
 8004894:	f3af 8000 	nop.w
 8004898:	1c42      	adds	r2, r0, #1
 800489a:	4606      	mov	r6, r0
 800489c:	d1d6      	bne.n	800484c <_svfiprintf_r+0x174>
 800489e:	89ab      	ldrh	r3, [r5, #12]
 80048a0:	065b      	lsls	r3, r3, #25
 80048a2:	f53f af2d 	bmi.w	8004700 <_svfiprintf_r+0x28>
 80048a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80048a8:	e72c      	b.n	8004704 <_svfiprintf_r+0x2c>
 80048aa:	ab03      	add	r3, sp, #12
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	462a      	mov	r2, r5
 80048b0:	4638      	mov	r0, r7
 80048b2:	4b06      	ldr	r3, [pc, #24]	@ (80048cc <_svfiprintf_r+0x1f4>)
 80048b4:	a904      	add	r1, sp, #16
 80048b6:	f000 f87d 	bl	80049b4 <_printf_i>
 80048ba:	e7ed      	b.n	8004898 <_svfiprintf_r+0x1c0>
 80048bc:	08004fbb 	.word	0x08004fbb
 80048c0:	08004fc1 	.word	0x08004fc1
 80048c4:	08004fc5 	.word	0x08004fc5
 80048c8:	00000000 	.word	0x00000000
 80048cc:	08004621 	.word	0x08004621

080048d0 <_printf_common>:
 80048d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048d4:	4616      	mov	r6, r2
 80048d6:	4698      	mov	r8, r3
 80048d8:	688a      	ldr	r2, [r1, #8]
 80048da:	690b      	ldr	r3, [r1, #16]
 80048dc:	4607      	mov	r7, r0
 80048de:	4293      	cmp	r3, r2
 80048e0:	bfb8      	it	lt
 80048e2:	4613      	movlt	r3, r2
 80048e4:	6033      	str	r3, [r6, #0]
 80048e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048ea:	460c      	mov	r4, r1
 80048ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048f0:	b10a      	cbz	r2, 80048f6 <_printf_common+0x26>
 80048f2:	3301      	adds	r3, #1
 80048f4:	6033      	str	r3, [r6, #0]
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	0699      	lsls	r1, r3, #26
 80048fa:	bf42      	ittt	mi
 80048fc:	6833      	ldrmi	r3, [r6, #0]
 80048fe:	3302      	addmi	r3, #2
 8004900:	6033      	strmi	r3, [r6, #0]
 8004902:	6825      	ldr	r5, [r4, #0]
 8004904:	f015 0506 	ands.w	r5, r5, #6
 8004908:	d106      	bne.n	8004918 <_printf_common+0x48>
 800490a:	f104 0a19 	add.w	sl, r4, #25
 800490e:	68e3      	ldr	r3, [r4, #12]
 8004910:	6832      	ldr	r2, [r6, #0]
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	42ab      	cmp	r3, r5
 8004916:	dc2b      	bgt.n	8004970 <_printf_common+0xa0>
 8004918:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800491c:	6822      	ldr	r2, [r4, #0]
 800491e:	3b00      	subs	r3, #0
 8004920:	bf18      	it	ne
 8004922:	2301      	movne	r3, #1
 8004924:	0692      	lsls	r2, r2, #26
 8004926:	d430      	bmi.n	800498a <_printf_common+0xba>
 8004928:	4641      	mov	r1, r8
 800492a:	4638      	mov	r0, r7
 800492c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004930:	47c8      	blx	r9
 8004932:	3001      	adds	r0, #1
 8004934:	d023      	beq.n	800497e <_printf_common+0xae>
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	6922      	ldr	r2, [r4, #16]
 800493a:	f003 0306 	and.w	r3, r3, #6
 800493e:	2b04      	cmp	r3, #4
 8004940:	bf14      	ite	ne
 8004942:	2500      	movne	r5, #0
 8004944:	6833      	ldreq	r3, [r6, #0]
 8004946:	f04f 0600 	mov.w	r6, #0
 800494a:	bf08      	it	eq
 800494c:	68e5      	ldreq	r5, [r4, #12]
 800494e:	f104 041a 	add.w	r4, r4, #26
 8004952:	bf08      	it	eq
 8004954:	1aed      	subeq	r5, r5, r3
 8004956:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800495a:	bf08      	it	eq
 800495c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004960:	4293      	cmp	r3, r2
 8004962:	bfc4      	itt	gt
 8004964:	1a9b      	subgt	r3, r3, r2
 8004966:	18ed      	addgt	r5, r5, r3
 8004968:	42b5      	cmp	r5, r6
 800496a:	d11a      	bne.n	80049a2 <_printf_common+0xd2>
 800496c:	2000      	movs	r0, #0
 800496e:	e008      	b.n	8004982 <_printf_common+0xb2>
 8004970:	2301      	movs	r3, #1
 8004972:	4652      	mov	r2, sl
 8004974:	4641      	mov	r1, r8
 8004976:	4638      	mov	r0, r7
 8004978:	47c8      	blx	r9
 800497a:	3001      	adds	r0, #1
 800497c:	d103      	bne.n	8004986 <_printf_common+0xb6>
 800497e:	f04f 30ff 	mov.w	r0, #4294967295
 8004982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004986:	3501      	adds	r5, #1
 8004988:	e7c1      	b.n	800490e <_printf_common+0x3e>
 800498a:	2030      	movs	r0, #48	@ 0x30
 800498c:	18e1      	adds	r1, r4, r3
 800498e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004998:	4422      	add	r2, r4
 800499a:	3302      	adds	r3, #2
 800499c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80049a0:	e7c2      	b.n	8004928 <_printf_common+0x58>
 80049a2:	2301      	movs	r3, #1
 80049a4:	4622      	mov	r2, r4
 80049a6:	4641      	mov	r1, r8
 80049a8:	4638      	mov	r0, r7
 80049aa:	47c8      	blx	r9
 80049ac:	3001      	adds	r0, #1
 80049ae:	d0e6      	beq.n	800497e <_printf_common+0xae>
 80049b0:	3601      	adds	r6, #1
 80049b2:	e7d9      	b.n	8004968 <_printf_common+0x98>

080049b4 <_printf_i>:
 80049b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049b8:	7e0f      	ldrb	r7, [r1, #24]
 80049ba:	4691      	mov	r9, r2
 80049bc:	2f78      	cmp	r7, #120	@ 0x78
 80049be:	4680      	mov	r8, r0
 80049c0:	460c      	mov	r4, r1
 80049c2:	469a      	mov	sl, r3
 80049c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049ca:	d807      	bhi.n	80049dc <_printf_i+0x28>
 80049cc:	2f62      	cmp	r7, #98	@ 0x62
 80049ce:	d80a      	bhi.n	80049e6 <_printf_i+0x32>
 80049d0:	2f00      	cmp	r7, #0
 80049d2:	f000 80d3 	beq.w	8004b7c <_printf_i+0x1c8>
 80049d6:	2f58      	cmp	r7, #88	@ 0x58
 80049d8:	f000 80ba 	beq.w	8004b50 <_printf_i+0x19c>
 80049dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049e4:	e03a      	b.n	8004a5c <_printf_i+0xa8>
 80049e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049ea:	2b15      	cmp	r3, #21
 80049ec:	d8f6      	bhi.n	80049dc <_printf_i+0x28>
 80049ee:	a101      	add	r1, pc, #4	@ (adr r1, 80049f4 <_printf_i+0x40>)
 80049f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049f4:	08004a4d 	.word	0x08004a4d
 80049f8:	08004a61 	.word	0x08004a61
 80049fc:	080049dd 	.word	0x080049dd
 8004a00:	080049dd 	.word	0x080049dd
 8004a04:	080049dd 	.word	0x080049dd
 8004a08:	080049dd 	.word	0x080049dd
 8004a0c:	08004a61 	.word	0x08004a61
 8004a10:	080049dd 	.word	0x080049dd
 8004a14:	080049dd 	.word	0x080049dd
 8004a18:	080049dd 	.word	0x080049dd
 8004a1c:	080049dd 	.word	0x080049dd
 8004a20:	08004b63 	.word	0x08004b63
 8004a24:	08004a8b 	.word	0x08004a8b
 8004a28:	08004b1d 	.word	0x08004b1d
 8004a2c:	080049dd 	.word	0x080049dd
 8004a30:	080049dd 	.word	0x080049dd
 8004a34:	08004b85 	.word	0x08004b85
 8004a38:	080049dd 	.word	0x080049dd
 8004a3c:	08004a8b 	.word	0x08004a8b
 8004a40:	080049dd 	.word	0x080049dd
 8004a44:	080049dd 	.word	0x080049dd
 8004a48:	08004b25 	.word	0x08004b25
 8004a4c:	6833      	ldr	r3, [r6, #0]
 8004a4e:	1d1a      	adds	r2, r3, #4
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6032      	str	r2, [r6, #0]
 8004a54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e09e      	b.n	8004b9e <_printf_i+0x1ea>
 8004a60:	6833      	ldr	r3, [r6, #0]
 8004a62:	6820      	ldr	r0, [r4, #0]
 8004a64:	1d19      	adds	r1, r3, #4
 8004a66:	6031      	str	r1, [r6, #0]
 8004a68:	0606      	lsls	r6, r0, #24
 8004a6a:	d501      	bpl.n	8004a70 <_printf_i+0xbc>
 8004a6c:	681d      	ldr	r5, [r3, #0]
 8004a6e:	e003      	b.n	8004a78 <_printf_i+0xc4>
 8004a70:	0645      	lsls	r5, r0, #25
 8004a72:	d5fb      	bpl.n	8004a6c <_printf_i+0xb8>
 8004a74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a78:	2d00      	cmp	r5, #0
 8004a7a:	da03      	bge.n	8004a84 <_printf_i+0xd0>
 8004a7c:	232d      	movs	r3, #45	@ 0x2d
 8004a7e:	426d      	negs	r5, r5
 8004a80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a84:	230a      	movs	r3, #10
 8004a86:	4859      	ldr	r0, [pc, #356]	@ (8004bec <_printf_i+0x238>)
 8004a88:	e011      	b.n	8004aae <_printf_i+0xfa>
 8004a8a:	6821      	ldr	r1, [r4, #0]
 8004a8c:	6833      	ldr	r3, [r6, #0]
 8004a8e:	0608      	lsls	r0, r1, #24
 8004a90:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a94:	d402      	bmi.n	8004a9c <_printf_i+0xe8>
 8004a96:	0649      	lsls	r1, r1, #25
 8004a98:	bf48      	it	mi
 8004a9a:	b2ad      	uxthmi	r5, r5
 8004a9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a9e:	6033      	str	r3, [r6, #0]
 8004aa0:	bf14      	ite	ne
 8004aa2:	230a      	movne	r3, #10
 8004aa4:	2308      	moveq	r3, #8
 8004aa6:	4851      	ldr	r0, [pc, #324]	@ (8004bec <_printf_i+0x238>)
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004aae:	6866      	ldr	r6, [r4, #4]
 8004ab0:	2e00      	cmp	r6, #0
 8004ab2:	bfa8      	it	ge
 8004ab4:	6821      	ldrge	r1, [r4, #0]
 8004ab6:	60a6      	str	r6, [r4, #8]
 8004ab8:	bfa4      	itt	ge
 8004aba:	f021 0104 	bicge.w	r1, r1, #4
 8004abe:	6021      	strge	r1, [r4, #0]
 8004ac0:	b90d      	cbnz	r5, 8004ac6 <_printf_i+0x112>
 8004ac2:	2e00      	cmp	r6, #0
 8004ac4:	d04b      	beq.n	8004b5e <_printf_i+0x1aa>
 8004ac6:	4616      	mov	r6, r2
 8004ac8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004acc:	fb03 5711 	mls	r7, r3, r1, r5
 8004ad0:	5dc7      	ldrb	r7, [r0, r7]
 8004ad2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ad6:	462f      	mov	r7, r5
 8004ad8:	42bb      	cmp	r3, r7
 8004ada:	460d      	mov	r5, r1
 8004adc:	d9f4      	bls.n	8004ac8 <_printf_i+0x114>
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d10b      	bne.n	8004afa <_printf_i+0x146>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	07df      	lsls	r7, r3, #31
 8004ae6:	d508      	bpl.n	8004afa <_printf_i+0x146>
 8004ae8:	6923      	ldr	r3, [r4, #16]
 8004aea:	6861      	ldr	r1, [r4, #4]
 8004aec:	4299      	cmp	r1, r3
 8004aee:	bfde      	ittt	le
 8004af0:	2330      	movle	r3, #48	@ 0x30
 8004af2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004af6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004afa:	1b92      	subs	r2, r2, r6
 8004afc:	6122      	str	r2, [r4, #16]
 8004afe:	464b      	mov	r3, r9
 8004b00:	4621      	mov	r1, r4
 8004b02:	4640      	mov	r0, r8
 8004b04:	f8cd a000 	str.w	sl, [sp]
 8004b08:	aa03      	add	r2, sp, #12
 8004b0a:	f7ff fee1 	bl	80048d0 <_printf_common>
 8004b0e:	3001      	adds	r0, #1
 8004b10:	d14a      	bne.n	8004ba8 <_printf_i+0x1f4>
 8004b12:	f04f 30ff 	mov.w	r0, #4294967295
 8004b16:	b004      	add	sp, #16
 8004b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	f043 0320 	orr.w	r3, r3, #32
 8004b22:	6023      	str	r3, [r4, #0]
 8004b24:	2778      	movs	r7, #120	@ 0x78
 8004b26:	4832      	ldr	r0, [pc, #200]	@ (8004bf0 <_printf_i+0x23c>)
 8004b28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	6831      	ldr	r1, [r6, #0]
 8004b30:	061f      	lsls	r7, r3, #24
 8004b32:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b36:	d402      	bmi.n	8004b3e <_printf_i+0x18a>
 8004b38:	065f      	lsls	r7, r3, #25
 8004b3a:	bf48      	it	mi
 8004b3c:	b2ad      	uxthmi	r5, r5
 8004b3e:	6031      	str	r1, [r6, #0]
 8004b40:	07d9      	lsls	r1, r3, #31
 8004b42:	bf44      	itt	mi
 8004b44:	f043 0320 	orrmi.w	r3, r3, #32
 8004b48:	6023      	strmi	r3, [r4, #0]
 8004b4a:	b11d      	cbz	r5, 8004b54 <_printf_i+0x1a0>
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	e7ab      	b.n	8004aa8 <_printf_i+0xf4>
 8004b50:	4826      	ldr	r0, [pc, #152]	@ (8004bec <_printf_i+0x238>)
 8004b52:	e7e9      	b.n	8004b28 <_printf_i+0x174>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	f023 0320 	bic.w	r3, r3, #32
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	e7f6      	b.n	8004b4c <_printf_i+0x198>
 8004b5e:	4616      	mov	r6, r2
 8004b60:	e7bd      	b.n	8004ade <_printf_i+0x12a>
 8004b62:	6833      	ldr	r3, [r6, #0]
 8004b64:	6825      	ldr	r5, [r4, #0]
 8004b66:	1d18      	adds	r0, r3, #4
 8004b68:	6961      	ldr	r1, [r4, #20]
 8004b6a:	6030      	str	r0, [r6, #0]
 8004b6c:	062e      	lsls	r6, r5, #24
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	d501      	bpl.n	8004b76 <_printf_i+0x1c2>
 8004b72:	6019      	str	r1, [r3, #0]
 8004b74:	e002      	b.n	8004b7c <_printf_i+0x1c8>
 8004b76:	0668      	lsls	r0, r5, #25
 8004b78:	d5fb      	bpl.n	8004b72 <_printf_i+0x1be>
 8004b7a:	8019      	strh	r1, [r3, #0]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	4616      	mov	r6, r2
 8004b80:	6123      	str	r3, [r4, #16]
 8004b82:	e7bc      	b.n	8004afe <_printf_i+0x14a>
 8004b84:	6833      	ldr	r3, [r6, #0]
 8004b86:	2100      	movs	r1, #0
 8004b88:	1d1a      	adds	r2, r3, #4
 8004b8a:	6032      	str	r2, [r6, #0]
 8004b8c:	681e      	ldr	r6, [r3, #0]
 8004b8e:	6862      	ldr	r2, [r4, #4]
 8004b90:	4630      	mov	r0, r6
 8004b92:	f000 f859 	bl	8004c48 <memchr>
 8004b96:	b108      	cbz	r0, 8004b9c <_printf_i+0x1e8>
 8004b98:	1b80      	subs	r0, r0, r6
 8004b9a:	6060      	str	r0, [r4, #4]
 8004b9c:	6863      	ldr	r3, [r4, #4]
 8004b9e:	6123      	str	r3, [r4, #16]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ba6:	e7aa      	b.n	8004afe <_printf_i+0x14a>
 8004ba8:	4632      	mov	r2, r6
 8004baa:	4649      	mov	r1, r9
 8004bac:	4640      	mov	r0, r8
 8004bae:	6923      	ldr	r3, [r4, #16]
 8004bb0:	47d0      	blx	sl
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d0ad      	beq.n	8004b12 <_printf_i+0x15e>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	079b      	lsls	r3, r3, #30
 8004bba:	d413      	bmi.n	8004be4 <_printf_i+0x230>
 8004bbc:	68e0      	ldr	r0, [r4, #12]
 8004bbe:	9b03      	ldr	r3, [sp, #12]
 8004bc0:	4298      	cmp	r0, r3
 8004bc2:	bfb8      	it	lt
 8004bc4:	4618      	movlt	r0, r3
 8004bc6:	e7a6      	b.n	8004b16 <_printf_i+0x162>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	4632      	mov	r2, r6
 8004bcc:	4649      	mov	r1, r9
 8004bce:	4640      	mov	r0, r8
 8004bd0:	47d0      	blx	sl
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	d09d      	beq.n	8004b12 <_printf_i+0x15e>
 8004bd6:	3501      	adds	r5, #1
 8004bd8:	68e3      	ldr	r3, [r4, #12]
 8004bda:	9903      	ldr	r1, [sp, #12]
 8004bdc:	1a5b      	subs	r3, r3, r1
 8004bde:	42ab      	cmp	r3, r5
 8004be0:	dcf2      	bgt.n	8004bc8 <_printf_i+0x214>
 8004be2:	e7eb      	b.n	8004bbc <_printf_i+0x208>
 8004be4:	2500      	movs	r5, #0
 8004be6:	f104 0619 	add.w	r6, r4, #25
 8004bea:	e7f5      	b.n	8004bd8 <_printf_i+0x224>
 8004bec:	08004fcc 	.word	0x08004fcc
 8004bf0:	08004fdd 	.word	0x08004fdd

08004bf4 <memmove>:
 8004bf4:	4288      	cmp	r0, r1
 8004bf6:	b510      	push	{r4, lr}
 8004bf8:	eb01 0402 	add.w	r4, r1, r2
 8004bfc:	d902      	bls.n	8004c04 <memmove+0x10>
 8004bfe:	4284      	cmp	r4, r0
 8004c00:	4623      	mov	r3, r4
 8004c02:	d807      	bhi.n	8004c14 <memmove+0x20>
 8004c04:	1e43      	subs	r3, r0, #1
 8004c06:	42a1      	cmp	r1, r4
 8004c08:	d008      	beq.n	8004c1c <memmove+0x28>
 8004c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c12:	e7f8      	b.n	8004c06 <memmove+0x12>
 8004c14:	4601      	mov	r1, r0
 8004c16:	4402      	add	r2, r0
 8004c18:	428a      	cmp	r2, r1
 8004c1a:	d100      	bne.n	8004c1e <memmove+0x2a>
 8004c1c:	bd10      	pop	{r4, pc}
 8004c1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c26:	e7f7      	b.n	8004c18 <memmove+0x24>

08004c28 <_sbrk_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	4d05      	ldr	r5, [pc, #20]	@ (8004c44 <_sbrk_r+0x1c>)
 8004c2e:	4604      	mov	r4, r0
 8004c30:	4608      	mov	r0, r1
 8004c32:	602b      	str	r3, [r5, #0]
 8004c34:	f7fb fe30 	bl	8000898 <_sbrk>
 8004c38:	1c43      	adds	r3, r0, #1
 8004c3a:	d102      	bne.n	8004c42 <_sbrk_r+0x1a>
 8004c3c:	682b      	ldr	r3, [r5, #0]
 8004c3e:	b103      	cbz	r3, 8004c42 <_sbrk_r+0x1a>
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	bd38      	pop	{r3, r4, r5, pc}
 8004c44:	20001204 	.word	0x20001204

08004c48 <memchr>:
 8004c48:	4603      	mov	r3, r0
 8004c4a:	b510      	push	{r4, lr}
 8004c4c:	b2c9      	uxtb	r1, r1
 8004c4e:	4402      	add	r2, r0
 8004c50:	4293      	cmp	r3, r2
 8004c52:	4618      	mov	r0, r3
 8004c54:	d101      	bne.n	8004c5a <memchr+0x12>
 8004c56:	2000      	movs	r0, #0
 8004c58:	e003      	b.n	8004c62 <memchr+0x1a>
 8004c5a:	7804      	ldrb	r4, [r0, #0]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	428c      	cmp	r4, r1
 8004c60:	d1f6      	bne.n	8004c50 <memchr+0x8>
 8004c62:	bd10      	pop	{r4, pc}

08004c64 <_realloc_r>:
 8004c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c68:	4680      	mov	r8, r0
 8004c6a:	4615      	mov	r5, r2
 8004c6c:	460c      	mov	r4, r1
 8004c6e:	b921      	cbnz	r1, 8004c7a <_realloc_r+0x16>
 8004c70:	4611      	mov	r1, r2
 8004c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c76:	f7ff bc47 	b.w	8004508 <_malloc_r>
 8004c7a:	b92a      	cbnz	r2, 8004c88 <_realloc_r+0x24>
 8004c7c:	f7ff fbda 	bl	8004434 <_free_r>
 8004c80:	2400      	movs	r4, #0
 8004c82:	4620      	mov	r0, r4
 8004c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c88:	f000 f81a 	bl	8004cc0 <_malloc_usable_size_r>
 8004c8c:	4285      	cmp	r5, r0
 8004c8e:	4606      	mov	r6, r0
 8004c90:	d802      	bhi.n	8004c98 <_realloc_r+0x34>
 8004c92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004c96:	d8f4      	bhi.n	8004c82 <_realloc_r+0x1e>
 8004c98:	4629      	mov	r1, r5
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f7ff fc34 	bl	8004508 <_malloc_r>
 8004ca0:	4607      	mov	r7, r0
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	d0ec      	beq.n	8004c80 <_realloc_r+0x1c>
 8004ca6:	42b5      	cmp	r5, r6
 8004ca8:	462a      	mov	r2, r5
 8004caa:	4621      	mov	r1, r4
 8004cac:	bf28      	it	cs
 8004cae:	4632      	movcs	r2, r6
 8004cb0:	f7ff fbb2 	bl	8004418 <memcpy>
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	4640      	mov	r0, r8
 8004cb8:	f7ff fbbc 	bl	8004434 <_free_r>
 8004cbc:	463c      	mov	r4, r7
 8004cbe:	e7e0      	b.n	8004c82 <_realloc_r+0x1e>

08004cc0 <_malloc_usable_size_r>:
 8004cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cc4:	1f18      	subs	r0, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	bfbc      	itt	lt
 8004cca:	580b      	ldrlt	r3, [r1, r0]
 8004ccc:	18c0      	addlt	r0, r0, r3
 8004cce:	4770      	bx	lr

08004cd0 <_init>:
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd2:	bf00      	nop
 8004cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cd6:	bc08      	pop	{r3}
 8004cd8:	469e      	mov	lr, r3
 8004cda:	4770      	bx	lr

08004cdc <_fini>:
 8004cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cde:	bf00      	nop
 8004ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce2:	bc08      	pop	{r3}
 8004ce4:	469e      	mov	lr, r3
 8004ce6:	4770      	bx	lr
